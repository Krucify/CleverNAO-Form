<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
        "naoqi-dotnet4"
    </assembly>
  <members>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.sendRemoteKeyWithTime(System.String,System.String,System.Int32)">
      <summary>
Simulate a remote control (Nao as a remote control).
</summary>
      <param name="Remote"> IR remote control name. </param>
      <param name="Key"> IR remote control key name. </param>
      <param name="pTimeMs"> The time in ms when the remote key must be send. 0 deals like sendRemoteKey </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.sendRemoteKey(System.String,System.String)">
      <summary>
Simulate a remote control (Nao as a remote control).
</summary>
      <param name="Remote"> IR remote control name. </param>
      <param name="Key"> IR remote control key name. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.sendIpAddress(System.String)">
      <summary>
Send an IP by IR.
</summary>
      <param name="IP"> IP adress to send through IR. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.send8(System.Int32)">
      <summary>
Send 1 octet by IR.
</summary>
      <param name="Octet"> octet to send through IR. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.send32(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
Send 4 octets by IR.
</summary>
      <param name="Octet1"> Octet 1 to send through IR. </param>
      <param name="Octet2"> Octet 2 to send through IR. </param>
      <param name="Octet3"> Octet 3 to send through IR. </param>
      <param name="Octet4"> Octet 4 to send through IR. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.send32(System.String)">
      <summary>
Send 4 octets by IR.
</summary>
      <param name="Data_IR"> 4 octets to send through IR. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.initReception(System.Int32)">
      <summary>
Init IR reception (connect as a client to the LIRC daemon).
</summary>
      <param name="RepeatThreshold"> Give the keep-pressing threshold after which the repetition of a key is taken into consideration. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.confRemoteRecordSave">
      <summary>
Rewrite the LIRC daemon configuration file (lircd.conf) with everyremotes configuration concatenated, and reload it in LIRC daemons
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.PostHelper.#ctor(AL.ALInfraredProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.InfraredProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.sendRemoteKeyWithTime(System.String,System.String,System.Int32)">
      <summary>
Simulate a remote control (Nao as a remote control).
</summary>
      <param name="Remote"> IR remote control name. </param>
      <param name="Key"> IR remote control key name. </param>
      <param name="pTimeMs"> The time in ms when the remote key must be send. 0 deals like sendRemoteKey </param>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.sendRemoteKey(System.String,System.String)">
      <summary>
Simulate a remote control (Nao as a remote control).
</summary>
      <param name="Remote"> IR remote control name. </param>
      <param name="Key"> IR remote control key name. </param>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.sendIpAddress(System.String)">
      <summary>
Send an IP by IR.
</summary>
      <param name="IP"> IP adress to send through IR. </param>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.send8(System.Int32)">
      <summary>
Send 1 octet by IR.
</summary>
      <param name="Octet"> octet to send through IR. </param>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.send32(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
Send 4 octets by IR.
</summary>
      <param name="Octet1"> Octet 1 to send through IR. </param>
      <param name="Octet2"> Octet 2 to send through IR. </param>
      <param name="Octet3"> Octet 3 to send through IR. </param>
      <param name="Octet4"> Octet 4 to send through IR. </param>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.send32(System.String)">
      <summary>
Send 4 octets by IR.
</summary>
      <param name="Data_IR"> 4 octets to send through IR. </param>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.initReception(System.Int32)">
      <summary>
Init IR reception (connect as a client to the LIRC daemon).
</summary>
      <param name="RepeatThreshold"> Give the keep-pressing threshold after which the repetition of a key is taken into consideration. </param>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.confRemoteRecordSave">
      <summary>
Rewrite the LIRC daemon configuration file (lircd.conf) with everyremotes configuration concatenated, and reload it in LIRC daemons
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.InfraredProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Infrared </summary>
      <remarks>This module works with Linux Infrared Remote Control (LIRC) in order to emit/receive IR remotes keys or to emit/receive IR information to/from an other Nao.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
InfraredProxy proxy = new InfraredProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.InfraredProxy">
      <summary>This module works with Linux Infrared Remote Control (LIRC) in order to emit/receive IR remotes keys or to emit/receive IR information to/from an other Nao.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.PostHelper.run">
      <summary>
Monitors sensors.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.PostHelper.#ctor(AL.ALSensorsProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.SensorsProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.run">
      <summary>
Monitors sensors.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SensorsProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Sensors </summary>
      <remarks>Deals with bumpers and chest button. 

 Activate the events : \"RightBumperPressed\", \"LeftBumperPressed\", \"ChestButtonPressed\".</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
SensorsProxy proxy = new SensorsProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.SensorsProxy">
      <summary>Deals with bumpers and chest button. 

 Activate the events : \"RightBumperPressed\", \"LeftBumperPressed\", \"ChestButtonPressed\".</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.setParameter(System.String,System.String,System.Single)">
      <summary>
DEPRECATED - Set detection parameters
</summary>
      <param name="type"> Name of detector. For now only one detector is available : \"soundDetection/SoundDetector\". </param>
      <param name="paraDetect"> Name of the parameter. Please refer to the example below for the available parameters. </param>
      <param name="param"> Value of the parameter. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.setParameter(System.String,System.Single)">
      <summary>
Set detection parameters
</summary>
      <param name="paraDetect"> Name of the parameter. Please refer to the example below for the available parameters. </param>
      <param name="param"> Value of the parameter. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.setDebugMode(System.Boolean)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="bSetOrUnset"> enable the functionnality when true. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.processSoundRemote(System.Int32,System.Int32,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.processRemote(System.Int32,System.Int32,System.Object,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="timestamp"> Provides the timestamp of the buffer. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.PostHelper.#ctor(AL.ALSoundDetectionProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.SoundDetectionProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.setParameter(System.String,System.String,System.Single)">
      <summary>
DEPRECATED - Set detection parameters
</summary>
      <param name="type"> Name of detector. For now only one detector is available : \"soundDetection/SoundDetector\". </param>
      <param name="paraDetect"> Name of the parameter. Please refer to the example below for the available parameters. </param>
      <param name="param"> Value of the parameter. </param>
      <example>
        <code lang="python">
#### Default parameters of soundDetection/SoundDetector
# set the threshold that triggers the detection
ALSoundDetectionProxy.setParameter("soundDetection/SoundDetector","threshold" , 1000.0 )
# set windowSize : size the window size inside which the detection is performed
ALSoundDetectionProxy.setParameter("soundDetection/SoundDetector","windowSize", 341  )
# set the value A such that the sound is considered over when getting back under A + Noise Level
ALSoundDetectionProxy.setParameter("soundDetection/SoundDetector","dnoise"    , 10    )
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.setParameter(System.String,System.Single)">
      <summary>
Set detection parameters
</summary>
      <param name="paraDetect"> Name of the parameter. Please refer to the example below for the available parameters. </param>
      <param name="param"> Value of the parameter. </param>
      <example>
        <code lang="python">
# set the sensibility of the detection in the range [0;1]. The default value is 0.9.
ALSoundDetectionProxy.setParameter("Sensibility", 0.9)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.setDebugMode(System.Boolean)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="bSetOrUnset"> enable the functionnality when true. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.processSoundRemote(System.Int32,System.Int32,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.processRemote(System.Int32,System.Int32,System.Object,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="timestamp"> Provides the timestamp of the buffer. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getEvents(System.String)">
      <summary>
DEPRECATED - Get index of events detected
</summary>
      <param name="type"> Name of detector. For now only one detector is available : \"soundDetection/SoundDetector\". </param>
      <returns> Return index of all detections of the current audio buffer </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getDescription(System.String,System.String)">
      <summary>
DEPRECATED - Get description of events
</summary>
      <param name="type"> Name of detector. For now only one detector is available : \"soundDetection/SoundDetector\". </param>
      <param name="nameDesc"> Name of the description : 'default' if not defined </param>
      <returns> Return description for all detections </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SoundDetectionProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to SoundDetection </summary>
      <remarks>This module detects in incoming audio buffers every sound with a significative level.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
SoundDetectionProxy proxy = new SoundDetectionProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.SoundDetectionProxy">
      <summary>This module detects in incoming audio buffers every sound with a significative level.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.PostHelper.setSecurityDistance(System.Single)">
      <summary>
Distance in meters fromwhich the robot should stop if there is an obstacle.
</summary>
      <param name="arg1"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.PostHelper.#ctor(AL.ALNavigationProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.NavigationProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.setSecurityDistance(System.Single)">
      <summary>
Distance in meters fromwhich the robot should stop if there is an obstacle.
</summary>
      <param name="arg1"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.moveTo(System.Single,System.Single,System.Single,System.Object)">
      <summary>
Makes the robot move at the given position.This is a blocking call.
</summary>
      <param name="x"> The position along x axis [m]. </param>
      <param name="y"> The position along y axis [m]. </param>
      <param name="theta"> The angle around z axis [rad]. </param>
      <param name="moveConfig"> An ALValue with custom move configuration. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.moveTo(System.Single,System.Single,System.Single)">
      <summary>
Makes the robot move at the given position.This is a blocking call.
</summary>
      <param name="x"> The position along x axis [m]. </param>
      <param name="y"> The position along y axis [m]. </param>
      <param name="theta"> The angle around z axis [rad]. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.NavigationProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Navigation </summary>
      <remarks>Use ALNavigation module to make the robot go safely to the asked pose2D.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
NavigationProxy proxy = new NavigationProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.NavigationProxy">
      <summary>Use ALNavigation module to make the robot go safely to the asked pose2D.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.setParameter(System.String,System.Object)">
      <summary>
DEPRECATED: Sets pause and resolution
</summary>
      <param name="paramName"> Name of the parameter to set </param>
      <param name="value"> New value </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.setDarknessThreshold(System.Int32)">
      <summary>
Enables to change the DarknessThreshold for isItDark
</summary>
      <param name="threshold"> New darkness threshold (between 0 and 100) </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.pause(System.Boolean)">
      <summary>
Changes the pause status of the extractor
</summary>
      <param name="paused"> New pause satus </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper.#ctor(AL.ALDarknessDetectionProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.DarknessDetectionProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.setResolution(System.Int32)">
      <summary>
Sets extractor resolution
</summary>
      <param name="resolution"> New resolution </param>
      <returns> True if the update succeeded, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.setParameter(System.String,System.Object)">
      <summary>
DEPRECATED: Sets pause and resolution
</summary>
      <param name="paramName"> Name of the parameter to set </param>
      <param name="value"> New value </param>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.setFrameRate(System.Int32)">
      <summary>
Sets extractor framerate
</summary>
      <param name="framerate"> New framerate </param>
      <returns> True if the update succeeded, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.setDarknessThreshold(System.Int32)">
      <summary>
Enables to change the DarknessThreshold for isItDark
</summary>
      <param name="threshold"> New darkness threshold (between 0 and 100) </param>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.setActiveCamera(System.Int32)">
      <summary>
Sets extractor active camera
</summary>
      <param name="cameraId"> Id of the camera that will become the active camera </param>
      <returns> True if the update succeeded, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.pause(System.Boolean)">
      <summary>
Changes the pause status of the extractor
</summary>
      <param name="paused"> New pause satus </param>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.isProcessing">
      <summary>
Gets extractor running status
</summary>
      <returns> True if the extractor is currently processing images, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.isPaused">
      <summary>
Gets extractor pause status
</summary>
      <returns> True if the extractor is paused, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getResolution">
      <summary>
Gets extractor resolution
</summary>
      <returns> Current value of the resolution of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getFrameRate">
      <summary>
Gets extractor framerate
</summary>
      <returns> Current value of the framerate of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getDarknessThreshold">
      <summary>
Returns the current DarknessThreshold for isItDark
</summary>
      <returns> Current darkness threshold value </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.getActiveCamera">
      <summary>
Gets extractor active camera
</summary>
      <returns> Id of the current active camera of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.DarknessDetectionProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to DarknessDetection </summary>
      <remarks>This module enables to detect if the robot is in a dark environment</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
DarknessDetectionProxy proxy = new DarknessDetectionProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.DarknessDetectionProxy">
      <summary>This module enables to detect if the robot is in a dark environment</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.warn(System.String,System.String)">
      <summary>
DEPRECATED: use qiLogWarning instead. Log a warning.
</summary>
      <param name="moduleName"> Name of the module. </param>
      <param name="message"> Log Message. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.setVerbosity(System.String)">
      <summary>
Removed: not implemented anymore.
</summary>
      <param name="arg1"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.setFilter(System.String)">
      <summary>
Removed: not implemented anymore.
</summary>
      <param name="arg1"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.separator">
      <summary>
DEPRECATED. Can be easily replaced if needed.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.removeHandler(System.String)">
      <summary>
Do not use since we cannot add any handler with the API.
</summary>
      <param name="arg1"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.lowInfo(System.String,System.String)">
      <summary>
Same method as info, which is deprecated itself.
</summary>
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.lowDebug(System.String,System.String)">
      <summary>
Same method as debug, which is deprecated itself.
</summary>
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.logInSys">
      <summary>
Removed: not implemented anymore.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.logInStd">
      <summary>
Removed: not implemented anymore.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.logInForwarder(System.String)">
      <summary>
DEPRECATED. Should not be used. Publish logs to a Log Forwarder. Pass an empty string in order to use the default value:  \"tcp://localhost:50998\"
</summary>
      <param name="inputAddress"> Desired input ZMQ address of the Log Forwarder. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.logInFile(System.String)">
      <summary>
DEPRECATED. Create your own log handler with qilog and add it with qi::log::addHandler. See libqi documentation for more details. 

 Allows the logger to store logs in a file. Warning: this is not recomended on Nao.
</summary>
      <param name="fileName"> The fileName to use. Relative to the user naoqi folder. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.info(System.String,System.String)">
      <summary>
DEPRECATED. Use qiLogInfo instead. 

 Log a info message.
</summary>
      <param name="moduleName"> Name of the module. </param>
      <param name="message"> Log Message. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.fatal(System.String,System.String)">
      <summary>
DEPRECATED. Use qiLogFatal instead. 

 Log a fatal error.
</summary>
      <param name="moduleName"> Name of the module. </param>
      <param name="message"> Log Message. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.error(System.String,System.String)">
      <summary>
DEPRECATED. Use qiLogError instead. 

 Log an error.
</summary>
      <param name="moduleName"> Name of the module. </param>
      <param name="message"> Log Message. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.debug(System.String,System.String)">
      <summary>
DEPRECATED. Use qiLogDebug instead. 

 Log a debug message.
</summary>
      <param name="moduleName"> Name of the module. </param>
      <param name="message"> Log Message. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.PostHelper.#ctor(AL.ALLoggerProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.LoggerProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.warn(System.String,System.String)">
      <summary>
DEPRECATED: use qiLogWarning instead. Log a warning.
</summary>
      <param name="moduleName"> Name of the module. </param>
      <param name="message"> Log Message. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.verbosity">
      <summary>
Get verbosity level of qi logs.
</summary>
      <returns> Verbosity of naoqi logs. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.setVerbosity(System.String)">
      <summary>
Removed: not implemented anymore.
</summary>
      <param name="arg1"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.setFilter(System.String)">
      <summary>
Removed: not implemented anymore.
</summary>
      <param name="arg1"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.separator">
      <summary>
DEPRECATED. Can be easily replaced if needed.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.removeHandler(System.String)">
      <summary>
Do not use since we cannot add any handler with the API.
</summary>
      <param name="arg1"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.lowInfo(System.String,System.String)">
      <summary>
Same method as info, which is deprecated itself.
</summary>
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.lowDebug(System.String,System.String)">
      <summary>
Same method as debug, which is deprecated itself.
</summary>
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.logInSys">
      <summary>
Removed: not implemented anymore.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.logInStd">
      <summary>
Removed: not implemented anymore.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.logInForwarder(System.String)">
      <summary>
DEPRECATED. Should not be used. Publish logs to a Log Forwarder. Pass an empty string in order to use the default value:  \"tcp://localhost:50998\"
</summary>
      <param name="inputAddress"> Desired input ZMQ address of the Log Forwarder. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.logInFile(System.String)">
      <summary>
DEPRECATED. Create your own log handler with qilog and add it with qi::log::addHandler. See libqi documentation for more details. 

 Allows the logger to store logs in a file. Warning: this is not recomended on Nao.
</summary>
      <param name="fileName"> The fileName to use. Relative to the user naoqi folder. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.info(System.String,System.String)">
      <summary>
DEPRECATED. Use qiLogInfo instead. 

 Log a info message.
</summary>
      <param name="moduleName"> Name of the module. </param>
      <param name="message"> Log Message. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.fatal(System.String,System.String)">
      <summary>
DEPRECATED. Use qiLogFatal instead. 

 Log a fatal error.
</summary>
      <param name="moduleName"> Name of the module. </param>
      <param name="message"> Log Message. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.error(System.String,System.String)">
      <summary>
DEPRECATED. Use qiLogError instead. 

 Log an error.
</summary>
      <param name="moduleName"> Name of the module. </param>
      <param name="message"> Log Message. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.debug(System.String,System.String)">
      <summary>
DEPRECATED. Use qiLogDebug instead. 

 Log a debug message.
</summary>
      <param name="moduleName"> Name of the module. </param>
      <param name="message"> Log Message. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LoggerProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Logger </summary>
      <remarks>This module allows you log errors, warnings, and info stdout or a file. The verbosity level allow you to  customize the output.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
LoggerProxy proxy = new LoggerProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.LoggerProxy">
      <summary>This module allows you log errors, warnings, and info stdout or a file. The verbosity level allow you to  customize the output.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.PostHelper.stopTracker">
      <summary>
Stop the tracker by Unsubscribing to Event redBallDetected from ALRedBallDetection module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.PostHelper.startTracker">
      <summary>
Start the tracker by Subscribing to Event redBallDetected from ALRedBallDetection module.

Then Wait Event redBallDetected from ALRedBallDetection module.

And finally send information to motion for head tracking.

NOTE: Stiffness of Head must be set to 1.0 to move!
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.PostHelper.setWholeBodyOn(System.Boolean)">
      <summary>
If true, the tracking will be through a Whole Body Process.
</summary>
      <param name="pWholeBodyOn"> The whole Body state </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.PostHelper.#ctor(AL.ALRedBallTrackerProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.RedBallTrackerProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.stopTracker">
      <summary>
Stop the tracker by Unsubscribing to Event redBallDetected from ALRedBallDetection module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.startTracker">
      <summary>
Start the tracker by Subscribing to Event redBallDetected from ALRedBallDetection module.

Then Wait Event redBallDetected from ALRedBallDetection module.

And finally send information to motion for head tracking.

NOTE: Stiffness of Head must be set to 1.0 to move!
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.setWholeBodyOn(System.Boolean)">
      <summary>
If true, the tracking will be through a Whole Body Process.
</summary>
      <param name="pWholeBodyOn"> The whole Body state </param>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.isNewData">
      <summary>
Return true if a new Red Ball was detected since the last getPosition().
</summary>
      <returns> true if a new Red Ball was detected since the last getPosition(). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.isActive">
      <summary>
Return true if the red Ball Tracker is running.
</summary>
      <returns> true if the red Ball Tracker is running. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.getPosition">
      <summary>
Return the position of the red ball in FRAME_TORSO.
</summary>
      <returns> An Array of float containing the red ball position [x, y, z]. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallTrackerProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to RedBallTracker </summary>
      <remarks>This module is dedicated to Track a Red Ball expressed in FRAME_TORSO.

This module need ALRedBallDetection module to run.

Use StartTracker() API to launch the tracking.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
RedBallTrackerProxy proxy = new RedBallTrackerProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.RedBallTrackerProxy">
      <summary>This module is dedicated to Track a Red Ball expressed in FRAME_TORSO.

This module need ALRedBallDetection module to run.

Use StartTracker() API to launch the tracking.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.PostHelper.#ctor(AL.ALSonarProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.SonarProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SonarProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Sonar </summary>
      <remarks>Deals with ultrasonic sensors.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
SonarProxy proxy = new SonarProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.SonarProxy">
      <summary>Deals with ultrasonic sensors.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.setServiceInput(System.Object)">
      <summary>
provide input for pending connection
</summary>
      <param name="reply"> The required input requested by the connection manager to finalize the pending connection </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.setServiceConfiguration(System.Object)">
      <summary>
Set the service configuration
</summary>
      <param name="service"> The service to configure </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.scan(System.String)">
      <summary>
scan for available services on a given technology
</summary>
      <param name="technology"> The type of technology to scan </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.scan">
      <summary>
scan all available services on registered technologies
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.forget(System.String)">
      <summary>
Forget stored information about the service
</summary>
      <param name="serviceId"> Service identifier </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.enableTethering(System.String,System.String,System.String)">
      <summary>
Create a Network Access Point on a given technology and share internet connection if any
</summary>
      <param name="technology"> The technology on which enabling tethering </param>
      <param name="name"> The name of the network to create </param>
      <param name="Passphrase"> The WPA2 passphrase to connect to the created network </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.enableTethering(System.String)">
      <summary>
Create a Network Access Point on a given technology and share internet connection if any
</summary>
      <param name="technology"> Technology on which enabling tethering </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.disconnect(System.String)">
      <summary>
Disconnect a service
</summary>
      <param name="serviceId"> Service identifier </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.disableTethering(System.String)">
      <summary>
Destroy the Access Point created on a given technology
</summary>
      <param name="technology"> The technology to disable tethering </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.connect(System.String)">
      <summary>
Request a connection to the service. If some input is needed for the connection to succeed, an event will be raised
</summary>
      <param name="serviceId"> Service identifier </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper.#ctor(AL.ALConnectionManagerProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.ConnectionManagerProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.tetheringPassphrase(System.String)">
      <summary />
      <param name="technology"> The technology </param>
      <returns> The passphrase of the network used by the tethering mode </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.tetheringName(System.String)">
      <summary />
      <param name="technology"> The technology </param>
      <returns> The name of the network used by the tethering mode </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.technologies">
      <summary>
return the list of all available technologies
</summary>
      <returns> An AL::Value containing an array of string </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.state">
      <summary>
Return the current global state of the connection manager
</summary>
      <returns> A string containing the current state </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.setServiceInput(System.Object)">
      <summary>
provide input for pending connection
</summary>
      <param name="reply"> The required input requested by the connection manager to finalize the pending connection </param>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.setServiceConfiguration(System.Object)">
      <summary>
Set the service configuration
</summary>
      <param name="service"> The service to configure </param>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.services">
      <summary>
Return the list of all network services with their properties
</summary>
      <returns> An array of NetworkInfo </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.service(System.String)">
      <summary>
Return the service properties
</summary>
      <param name="serviceId"> Service identifier </param>
      <returns> Return the service properties </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.scan(System.String)">
      <summary>
scan for available services on a given technology
</summary>
      <param name="technology"> The type of technology to scan </param>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.scan">
      <summary>
scan all available services on registered technologies
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.getTetheringEnable(System.String)">
      <summary />
      <param name="technology"> The technology </param>
      <returns> Return whether tethering mode is enabled for the given technology. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.forget(System.String)">
      <summary>
Forget stored information about the service
</summary>
      <param name="serviceId"> Service identifier </param>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.enableTethering(System.String,System.String,System.String)">
      <summary>
Create a Network Access Point on a given technology and share internet connection if any
</summary>
      <param name="technology"> The technology on which enabling tethering </param>
      <param name="name"> The name of the network to create </param>
      <param name="Passphrase"> The WPA2 passphrase to connect to the created network </param>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.enableTethering(System.String)">
      <summary>
Create a Network Access Point on a given technology and share internet connection if any
</summary>
      <param name="technology"> Technology on which enabling tethering </param>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.disconnect(System.String)">
      <summary>
Disconnect a service
</summary>
      <param name="serviceId"> Service identifier </param>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.disableTethering(System.String)">
      <summary>
Destroy the Access Point created on a given technology
</summary>
      <param name="technology"> The technology to disable tethering </param>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.connect(System.String)">
      <summary>
Request a connection to the service. If some input is needed for the connection to succeed, an event will be raised
</summary>
      <param name="serviceId"> Service identifier </param>
    </member>
    <member name="M:Aldebaran.Proxies.ConnectionManagerProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to ConnectionManager </summary>
      <remarks>This module is used to manage available connections</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
ConnectionManagerProxy proxy = new ConnectionManagerProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.ConnectionManagerProxy">
      <summary>This module is used to manage available connections</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.unsubscribe(System.String)">
      <summary>
This function allows a module to subscribe to the ALAudioDevice module.For more informations see the audio part of the red documentation
</summary>
      <param name="pModule"> Name of the module </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.subscribe(System.String)">
      <summary>
This function allows a module to subscribe to the ALAudioDevice module.For more informations see the audio part of the red documentation
</summary>
      <param name="pModule"> Name of the module </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.stopMicrophonesRecording">
      <summary>
This method stops the recording of the sound collected by the microphones.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.stopAudioOut">
      <summary>
This method calls a procedure to stop and clear the audio output buffers.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.startMicrophonesRecording(System.String)">
      <summary>
This method allows to record the signal collected on the nao's microphones. You can choose to record only the front microphone in a ogg file, or the 4 microphones in a wav file. In this last case the format of the file is 4 channels, 16 bits little endian, 48 KHz
</summary>
      <param name="pFileName"> Name of the file where to record the sound. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.setParameter(System.String,System.Int32)">
      <summary>
This method sets the specified internal parameter ('outputSampleRate' or 'inputBufferSize')

inputBufferSize can bet set to 8192 or 16384. Warning: when speech recognition is running, a buffer size of 8192 is used. Don't change it during the recognition process.

outputSampleRate can bet set to 16000 Hz, 22050 Hz, 44100 Hz or 48000 Hz. Warning: if speech synthesis is running, a sample rate of 16000 Hz or 22050 Hz is used (depending of the language). Don't change it during the synthesis process
</summary>
      <param name="pParamName"> Name of the parameter to set ('outputSampleRate' or 'inputBufferSize'). </param>
      <param name="pParamValue"> The value to which the specified parameter should be set. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.setOutputVolume(System.Int32)">
      <summary>
Sets the output sound level of the system.
</summary>
      <param name="volume"> Volume [0-100]. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.setFileAsInput(System.String)">
      <summary>
This method allows to send sound samples contained in a sound file at the input of ALAudioDevice, instead of the nao's microphones sound data. The sound file must be a .wav file containing 16bits / 4 channels / interleaved samples. Once the file has been read, microphones sound data will again taken as input
</summary>
      <param name="pFileName"> Name of the input file. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.setClientPreferences(System.String,System.Int32,System.Object,System.Int32,System.Int32)">
      <summary>
Set AudioDevice Client preferences. This function is deprecated, the use of the alternate 4 arguments setClientPreferences() is now prefered.
</summary>
      <param name="name"> name of the client </param>
      <param name="sampleRate"> sample rate of the microphones data sent to the processSound or processSoundRemote functions - must be 16000 or 48000 </param>
      <param name="channelsVector"> ALValue containing a vector of int indicating which microphones data will be send to the processSound or processSoundRemote functions </param>
      <param name="deinterleaved"> indicates if the microphones data sent to the processSound or processSoundRemote functions are interleaved or not - 0 : interleaved - 1 : deinterleaved </param>
      <param name="timeStamp"> parameter indicating if audio timestamps are sent to the processSound or processSoundRemote functions - 0 : no - 1 : yes </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.setClientPreferences(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
Set AudioDevice Client preferences
</summary>
      <param name="name"> name of the client </param>
      <param name="sampleRate"> sample rate of the microphones data sent to the process function - must be 16000 or 48000 </param>
      <param name="channelsConfiguration"> An int (defined in ALSoundExtractor) indicating which microphones data will be send to the process function. ALLCHANNELS, LEFTCHANNEL, RIGHTCHANNEL, FRONTCHANNEL, REARCHANNEL are the configuration currently supported. </param>
      <param name="deinterleaved"> indicates if the microphones data sent to the process function are interleaved or not - 0 : interleaved - 1 : deinterleaved </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.resetAudio">
      <summary>
reset ALSA driver. Use this method only when no audio module is subscribed to ALAudioDevice
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.playSine(System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>
Play a sine wave which specified caracteristics.
</summary>
      <param name="frequence"> Frequence in Hertz </param>
      <param name="gain"> Volume Gain between 0 and 100 </param>
      <param name="pan"> Stereo Pan set to either {-1,0,+1} </param>
      <param name="duration"> Duration of the sine wave in seconds </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.openAudioOutputs">
      <summary>
Opens the audio device for playback. If you closed the audio outputs with the closeAudioOutputs method, you must call this method to ear or send sound onto the nao's loudspeakers.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.openAudioInputs">
      <summary>
Opens the audio device for capture. If you closed the audio inputs with the closeAudioInputs method, you must call this method to be able to access to the sound data of the nao's microphones.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.muteAudioOut(System.Boolean)">
      <summary>
mute the loudspeakers
</summary>
      <param name="arg1"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.flushAudioOutputs">
      <summary>
Flush the audio device for playback. close the audio device for capture. You can call this method if you want to send sound to alsa in another program than naoqi while naoqi is running (with aplay for example)
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.enableEnergyComputation">
      <summary>
Enables the computation of the energy of each microphone signal
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.disableEnergyComputation">
      <summary>
Disables the computation of the energy of each microphone signal
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.closeAudioOutputs">
      <summary>
Closes the audio device for playback. close the audio device for capture. You can call this method if you want to send sound to alsa in another program than naoqi while naoqi is running (with aplay for example)
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.closeAudioInputs">
      <summary>
Closes the audio device for capture. You can call this method if you want to have access to the alsa input buffers in another program than naoqi while naoqi is running (with arecord for example)
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.PostHelper.#ctor(AL.ALAudioDeviceProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.AudioDeviceProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.unsubscribe(System.String)">
      <summary>
This function allows a module to subscribe to the ALAudioDevice module.For more informations see the audio part of the red documentation
</summary>
      <param name="pModule"> Name of the module </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.unSubscribeRemoteModule(System.String)">
      <summary>
This function unsubscribes a remote module (identified by its name) from the ALAudioDevice module
</summary>
      <param name="pModule"> Name of the remote module to unsuscribe from ALAudioDevice </param>
      <returns> True if module has been unsubscribed successfully - False otherwise </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.subscribeRemoteModule(System.String)">
      <summary>
This function allows a remote module to subscribe to the ALAudioDevice module.

Once your remote module is subscribed, the function 'processSoundRemote' of your module (you need to declare one) will be automatically and regularly called with raw data from microphones as inputs.

This function must be declared as follow : processSoundRemote( const int &amp; pNbOfInputChannels, const int &amp; pNbrSamples, const ALValue &amp; pDataInterleaved).

When she will be called, the received pDataInterleaved buffer will contain pNbrSamples 16 bits interleaved samples, ordered as follows : s1m1,s1m2,s1m3,s1m4,s2m1,s2m2, ... where simj is the sample number i of microphone j.

The indices of microphones are the followings : 1 : left microphone / 2 : right microphone / 3 : front microphone / 4 : rear microphone.

For more informations see the audio part of the red documentation
</summary>
      <param name="pModule"> Name of the remote module </param>
      <returns> True if module has subscribed successfully - False otherwise </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.subscribe(System.String)">
      <summary>
This function allows a module to subscribe to the ALAudioDevice module.For more informations see the audio part of the red documentation
</summary>
      <param name="pModule"> Name of the module </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.stopMicrophonesRecording">
      <summary>
This method stops the recording of the sound collected by the microphones.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.stopAudioOut">
      <summary>
This method calls a procedure to stop and clear the audio output buffers.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.startMicrophonesRecording(System.String)">
      <summary>
This method allows to record the signal collected on the nao's microphones. You can choose to record only the front microphone in a ogg file, or the 4 microphones in a wav file. In this last case the format of the file is 4 channels, 16 bits little endian, 48 KHz
</summary>
      <param name="pFileName"> Name of the file where to record the sound. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.setParameter(System.String,System.Int32)">
      <summary>
This method sets the specified internal parameter ('outputSampleRate' or 'inputBufferSize')

inputBufferSize can bet set to 8192 or 16384. Warning: when speech recognition is running, a buffer size of 8192 is used. Don't change it during the recognition process.

outputSampleRate can bet set to 16000 Hz, 22050 Hz, 44100 Hz or 48000 Hz. Warning: if speech synthesis is running, a sample rate of 16000 Hz or 22050 Hz is used (depending of the language). Don't change it during the synthesis process
</summary>
      <param name="pParamName"> Name of the parameter to set ('outputSampleRate' or 'inputBufferSize'). </param>
      <param name="pParamValue"> The value to which the specified parameter should be set. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.setOutputVolume(System.Int32)">
      <summary>
Sets the output sound level of the system.
</summary>
      <param name="volume"> Volume [0-100]. </param>
      <example>
        <code lang="python">
#Sets the output sound level of the system to maximum
ad.setOutputVolume(100)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.setFileAsInput(System.String)">
      <summary>
This method allows to send sound samples contained in a sound file at the input of ALAudioDevice, instead of the nao's microphones sound data. The sound file must be a .wav file containing 16bits / 4 channels / interleaved samples. Once the file has been read, microphones sound data will again taken as input
</summary>
      <param name="pFileName"> Name of the input file. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.setClientPreferences(System.String,System.Int32,System.Object,System.Int32,System.Int32)">
      <summary>
Set AudioDevice Client preferences. This function is deprecated, the use of the alternate 4 arguments setClientPreferences() is now prefered.
</summary>
      <param name="name"> name of the client </param>
      <param name="sampleRate"> sample rate of the microphones data sent to the processSound or processSoundRemote functions - must be 16000 or 48000 </param>
      <param name="channelsVector"> ALValue containing a vector of int indicating which microphones data will be send to the processSound or processSoundRemote functions </param>
      <param name="deinterleaved"> indicates if the microphones data sent to the processSound or processSoundRemote functions are interleaved or not - 0 : interleaved - 1 : deinterleaved </param>
      <param name="timeStamp"> parameter indicating if audio timestamps are sent to the processSound or processSoundRemote functions - 0 : no - 1 : yes </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.setClientPreferences(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
Set AudioDevice Client preferences
</summary>
      <param name="name"> name of the client </param>
      <param name="sampleRate"> sample rate of the microphones data sent to the process function - must be 16000 or 48000 </param>
      <param name="channelsConfiguration"> An int (defined in ALSoundExtractor) indicating which microphones data will be send to the process function. ALLCHANNELS, LEFTCHANNEL, RIGHTCHANNEL, FRONTCHANNEL, REARCHANNEL are the configuration currently supported. </param>
      <param name="deinterleaved"> indicates if the microphones data sent to the process function are interleaved or not - 0 : interleaved - 1 : deinterleaved </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.sendRemoteBufferToOutput(System.Int32,System.Object)">
      <summary>
This function allows a remote module to send sound onto the nao's loudpseakers

You must pass to this function the stereo buffer you want to send as an ALValue converted to binary, and the number of frames per channel. The number of frames does not exceed 16384. For more information please see the red documentation
</summary>
      <param name="nbOfFrames"> Number of 16 bits samples per channel to send. </param>
      <param name="pBuffer"> Buffer to send </param>
      <returns> True if the operation is successfull - False otherwise </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.sendLocalBufferToOutput(System.Int32,System.Int32)">
      <summary>
This function allows a local module to send sound onto the nao's loudpseakers

You must pass to this function a pointer to the stereo buffer to send, and the number of frames per channel. The buffer must contain 16bits stereo interleaved samples, and the number of frames does not exceed 16384
</summary>
      <param name="nbOfFrames"> Number of 16 bits samples per channel to send. </param>
      <param name="pBuffer"> Buffer to send </param>
      <returns> True if the operation is successfull - False otherwise </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.resetAudio">
      <summary>
reset ALSA driver. Use this method only when no audio module is subscribed to ALAudioDevice
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.playSine(System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>
Play a sine wave which specified caracteristics.
</summary>
      <param name="frequence"> Frequence in Hertz </param>
      <param name="gain"> Volume Gain between 0 and 100 </param>
      <param name="pan"> Stereo Pan set to either {-1,0,+1} </param>
      <param name="duration"> Duration of the sine wave in seconds </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.openAudioOutputs">
      <summary>
Opens the audio device for playback. If you closed the audio outputs with the closeAudioOutputs method, you must call this method to ear or send sound onto the nao's loudspeakers.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.openAudioInputs">
      <summary>
Opens the audio device for capture. If you closed the audio inputs with the closeAudioInputs method, you must call this method to be able to access to the sound data of the nao's microphones.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.muteAudioOut(System.Boolean)">
      <summary>
mute the loudspeakers
</summary>
      <param name="arg1"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.isOutputClosed">
      <summary>
Allows to know if audio ouputs are closed or not
</summary>
      <returns> True if audio outputs are closed / False otherwise </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.isInputClosed">
      <summary>
Allows to know if audio inputs are closed or not
</summary>
      <returns> True if audio inputs are closed / False otherwise </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.isAudioOutMuted">
      <summary>
check if loudspeakers are muted
</summary>
      <returns> 1 if true / 0 otherwise </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getRightMicEnergy">
      <summary>
Returns the energy of the right microphone signal
</summary>
      <returns> energy of the right microphone signal </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getRearMicEnergy">
      <summary>
Returns the energy of the rear microphone signal
</summary>
      <returns> energy of the rear microphone signal </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getParameter(System.String)">
      <summary>
This method returns the specified internal parameter ('outputSampleRate' or 'inputBufferSize'). The value -1 is returned if the specified parameter is not valid.
</summary>
      <param name="pParamName"> Name of the parameter to get ('outputSampleRate' or 'inputBufferSize'). </param>
      <returns> value of the specified parameter </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getOutputVolume">
      <summary>
Gets the output sound level of the system.
</summary>
      <returns> outputVolume of the system </returns>
      <example>
        <code lang="python">
#Gets the output sound level of the system
int vol = ad.getOutputVolume()
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getLeftMicEnergy">
      <summary>
Returns the energy of the left microphone signal
</summary>
      <returns> energy of the left microphone signal </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getFrontMicEnergy">
      <summary>
Returns the energy of the front microphone signal
</summary>
      <returns> energy of the front microphone signal </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.flushAudioOutputs">
      <summary>
Flush the audio device for playback. close the audio device for capture. You can call this method if you want to send sound to alsa in another program than naoqi while naoqi is running (with aplay for example)
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.enableEnergyComputation">
      <summary>
Enables the computation of the energy of each microphone signal
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.disableEnergyComputation">
      <summary>
Disables the computation of the energy of each microphone signal
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.closeAudioOutputs">
      <summary>
Closes the audio device for playback. close the audio device for capture. You can call this method if you want to send sound to alsa in another program than naoqi while naoqi is running (with aplay for example)
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.closeAudioInputs">
      <summary>
Closes the audio device for capture. You can call this method if you want to have access to the alsa input buffers in another program than naoqi while naoqi is running (with arecord for example)
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioDeviceProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to AudioDevice </summary>
      <remarks>The ALAudioDevice module allows other modules to access to the sound data of the nao's microphones, and to send sound toward its loudspeakers  The way to receive or send the audio data depends whether the modules are local (dynamic library) or remote (executable).</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
AudioDeviceProxy proxy = new AudioDeviceProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.AudioDeviceProxy">
      <summary>The ALAudioDevice module allows other modules to access to the sound data of the nao's microphones, and to send sound toward its loudspeakers  The way to receive or send the audio data depends whether the modules are local (dynamic library) or remote (executable).</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.PostHelper.stopBehavior(System.String)">
      <summary>
Stop a behavior
</summary>
      <param name="behavior"> Behavior name </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.PostHelper.stopAllBehaviors">
      <summary>
Stop all behaviors
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.PostHelper.runBehavior(System.String)">
      <summary>
Run a behavior
</summary>
      <param name="behavior"> Behavior name </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.PostHelper.removeDefaultBehavior(System.String)">
      <summary>
Remove the given behavior from the default behaviors
</summary>
      <param name="behavior"> Behavior name </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.PostHelper.playDefaultProject">
      <summary>
Play default behaviors
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.PostHelper.addDefaultBehavior(System.String)">
      <summary>
Set the given behavior as default
</summary>
      <param name="behavior"> Behavior name </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.PostHelper.#ctor(AL.ALBehaviorManagerProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.BehaviorManagerProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.stopBehavior(System.String)">
      <summary>
Stop a behavior
</summary>
      <param name="behavior"> Behavior name </param>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.stopAllBehaviors">
      <summary>
Stop all behaviors
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.runBehavior(System.String)">
      <summary>
Run a behavior
</summary>
      <param name="behavior"> Behavior name </param>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.removeDefaultBehavior(System.String)">
      <summary>
Remove the given behavior from the default behaviors
</summary>
      <param name="behavior"> Behavior name </param>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.removeBehavior(System.String)">
      <summary>
Remove a behavior from the filesystem
</summary>
      <param name="behavior"> Behavior name </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.preloadBehavior(System.String)">
      <summary>
Load a behavior
</summary>
      <param name="behavior"> Behavior name </param>
      <returns> Returns true if it was successfully loaded. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.playDefaultProject">
      <summary>
Play default behaviors
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.isBehaviorRunning(System.String)">
      <summary>
Tell if supplied name corresponds to a running behavior
</summary>
      <param name="behavior"> Behavior name </param>
      <returns> Returns true if it is a running behavior </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.isBehaviorPresent(System.String)">
      <summary>
Tell if the supplied namecorresponds to an existing behavior.
</summary>
      <param name="prefixedBehavior"> Prefixed behavior or just behavior's name (latter usage deprecated, in this case the behavior is searched for amongst user's behaviors, then in system behaviors) DEPRECATED. </param>
      <returns> Returns true if it is an existing behavior </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.isBehaviorInstalled(System.String)">
      <summary>
Tell if supplied name corresponds to a behavior that has been installed
</summary>
      <param name="name"> The behavior directory name </param>
      <returns> Returns true if it is a valid behavior </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.installBehavior(System.String,System.String,System.Boolean)">
      <summary>
Install a behavior.

Check and take the behavior found at the given absolute path andimport it to the given local path, relative to behaviors path.

On success, behavior added signal is emitted before returning.
</summary>
      <param name="absolutePath"> a behavior on the local file system to install. </param>
      <param name="localPath"> the relative destination path. </param>
      <param name="overwrite"> whether to replace existing behavior if present. </param>
      <returns> true on success, false on failure. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.installBehavior(System.String)">
      <summary>
Install a behavior.

Check the given local path for a valid behavior or package.

On success, behavior added or updated signal is emitted.
</summary>
      <param name="localPath"> the relative destination path. </param>
      <returns> true on success, false on failure. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getUserBehaviorNames">
      <summary>
Get user's behaviors
</summary>
      <returns> Returns the list of user's behaviors prefixed by User/. DEPRECATED. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getTagList">
      <summary>
Get tags found on installed behaviors.
</summary>
      <returns> The list of tags found. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getSystemBehaviorNames">
      <summary>
Get system behaviors
</summary>
      <returns> Returns the list of system behaviors prefixed by System/. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getRunningBehaviors">
      <summary>
Get running behaviors
</summary>
      <returns> Return running behaviors </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getInstalledBehaviors">
      <summary>
Get installed behaviors directories names
</summary>
      <returns> Returns the behaviors list </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getDefaultBehaviors">
      <summary>
Get default behaviors
</summary>
      <returns> Return default behaviors </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getBehaviorsByTag(System.String)">
      <summary>
Get installed behaviors directories names and filter it by tag.
</summary>
      <param name="tag"> A tag to filter the list with. </param>
      <returns> Returns the behaviors list </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getBehaviorTags(System.String)">
      <summary>
Get tags found on the given behavior.
</summary>
      <param name="behavior"> The local path towards a behavior or a directory. </param>
      <returns> The list of tags found. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.getBehaviorNames">
      <summary>
Get behaviors
</summary>
      <returns> Returns the list of behaviors prefixed by their type (User/ or System/). DEPRECATED </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.addDefaultBehavior(System.String)">
      <summary>
Set the given behavior as default
</summary>
      <param name="behavior"> Behavior name </param>
    </member>
    <member name="M:Aldebaran.Proxies.BehaviorManagerProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to BehaviorManager </summary>
      <remarks>This module is intended to manage behaviors. With this module, you can load, start, stop behaviors, add default behaviors or remove them.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
BehaviorManagerProxy proxy = new BehaviorManagerProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.BehaviorManagerProxy">
      <summary>This module is intended to manage behaviors. With this module, you can load, start, stop behaviors, add default behaviors or remove them.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.stopTimeline(System.String)">
      <summary>
Stops playing a timeline contained in a given box, at the current frame. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.setTimelineFps(System.String,System.Int32)">
      <summary>
Sets the FPS of a given timeline. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the timeline. </param>
      <param name="fps"> The FPS to set. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.setDeprecationWarningEnabled(System.Boolean)">
      <summary>
enable the deprecation warning
</summary>
      <param name="arg1"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.playTimeline(System.String)">
      <summary>
Starts playing a timeline contained in a given box. If the box is a flow diagram, it will look for the first onStart input of type Bang, and stimulate it ! DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.playBehavior(System.String)">
      <summary>
Starts a behavior
</summary>
      <param name="id"> The id of the box. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.gotoAndStop(System.String,System.Int32)">
      <summary>
Goes to a certain frame and pause. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box containing the box. </param>
      <param name="frame"> The frame we want the timeline to go to. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.gotoAndStop(System.String,System.String)">
      <summary>
Goes to a certain frame and pause. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box containing the box. </param>
      <param name="frame"> The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.gotoAndPlay(System.String,System.Int32)">
      <summary>
Goes to a certain frame and continue playing. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box containing the box. </param>
      <param name="frame"> The frame we want the timeline to go to. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.gotoAndPlay(System.String,System.String)">
      <summary>
Goes to a certain frame and continue playing. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box containing the box. </param>
      <param name="frame"> The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.exitBehavior(System.String)">
      <summary>
Exit the reading of a timeline contained in a given box
</summary>
      <param name="id"> The id of the box. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.deleteBehavior(System.String)">
      <summary>
Deletes a behavior (meaning a box). Stop the whole behavior contained in this box first.
</summary>
      <param name="id"> The id of the box to delete. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.completeBehavior(System.String)">
      <summary>
It will play a behavior and block until the behavior is finished. Note that it can block forever if the behavior output is never called.
</summary>
      <param name="id"> The id of the box. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.cleanBehaviors">
      <summary>
Stop playing any behavior in FrameManager, and delete all of them.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.PostHelper.#ctor(AL.ALFrameManagerProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.FrameManagerProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.stopTimeline(System.String)">
      <summary>
Stops playing a timeline contained in a given box, at the current frame. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.setTimelineFps(System.String,System.Int32)">
      <summary>
Sets the FPS of a given timeline. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the timeline. </param>
      <param name="fps"> The FPS to set. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.setDeprecationWarningEnabled(System.Boolean)">
      <summary>
enable the deprecation warning
</summary>
      <param name="arg1"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.playTimeline(System.String)">
      <summary>
Starts playing a timeline contained in a given box. If the box is a flow diagram, it will look for the first onStart input of type Bang, and stimulate it ! DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.playBehavior(System.String)">
      <summary>
Starts a behavior
</summary>
      <param name="id"> The id of the box. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.newBehaviorFromFile(System.String,System.String)">
      <summary>
Creates a new behavior, from a box found in an xml file stored in the robot.
</summary>
      <param name="xmlFilePath"> Path to Xml file, ex : \"/home/youhou/mybehavior.xar\". </param>
      <param name="behName" />
      <returns> return a unique identifier for the created box, that can be used by playBehavior </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.newBehaviorFromChoregraphe">
      <summary>
Creates a new behavior, from the current Choregraphe behavior 0(uploaded to /tmp/currentChoregrapheBehavior/behavior.xar). DEPRECATED since 1.14
</summary>
      <returns> return a unique identifier for the created behavior </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.newBehavior(System.String,System.String)">
      <summary>
Creates a new behavior, from a box found in an xml file. Note that you have to give the xml file contents, so this method is not very user friendly. You have to open the file, and send the string that matches the file contents if you are working from a file. You probably want to use newBehaviorFromFile instead. DEPRECATED since 1.14
</summary>
      <param name="path"> The path to reach the box to instantiate in the project (\"\" if root). </param>
      <param name="xmlFile"> The choregraphe project (in plain text for the moment). </param>
      <returns> return a unique identifier for the created box. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.gotoAndStop(System.String,System.Int32)">
      <summary>
Goes to a certain frame and pause. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box containing the box. </param>
      <param name="frame"> The frame we want the timeline to go to. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.gotoAndStop(System.String,System.String)">
      <summary>
Goes to a certain frame and pause. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box containing the box. </param>
      <param name="frame"> The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.gotoAndPlay(System.String,System.Int32)">
      <summary>
Goes to a certain frame and continue playing. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box containing the box. </param>
      <param name="frame"> The frame we want the timeline to go to. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.gotoAndPlay(System.String,System.String)">
      <summary>
Goes to a certain frame and continue playing. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box containing the box. </param>
      <param name="frame"> The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.getTimelineFps(System.String)">
      <summary>
Gets the FPS of a given timeline. DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the timeline. </param>
      <returns> Returns the timeline's FPS. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.getMotionLength(System.String)">
      <summary>
Returns in seconds, the duration of a given movement stored in a box. Returns 0 if the behavior has no motion layers.  DEPRECATED since 1.14
</summary>
      <param name="id"> The id of the box. </param>
      <returns> Returns the time in seconds. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.getBehaviorPath(System.String)">
      <summary>
Returns a playing behavior absolute path.
</summary>
      <param name="id"> The id of the behavior. </param>
      <returns> Returns the absolute path of given behavior. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.exitBehavior(System.String)">
      <summary>
Exit the reading of a timeline contained in a given box
</summary>
      <param name="id"> The id of the box. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.deleteBehavior(System.String)">
      <summary>
Deletes a behavior (meaning a box). Stop the whole behavior contained in this box first.
</summary>
      <param name="id"> The id of the box to delete. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.createAndPlayTimeline(System.String)">
      <summary>
Creates and play completely a timeline
</summary>
      <param name="xmlFile"> The choregraphe project (in plain text for the moment). </param>
      <returns> return a unique identifier for the created box that contains the timeline. You must call deleteBehavior on it at some point. DEPRECATED since 1.14 </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.completeBehavior(System.String)">
      <summary>
It will play a behavior and block until the behavior is finished. Note that it can block forever if the behavior output is never called.
</summary>
      <param name="id"> The id of the box. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.cleanBehaviors">
      <summary>
Stop playing any behavior in FrameManager, and delete all of them.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FrameManagerProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to FrameManager </summary>
      <remarks>Frame manager is used to play choregraphe projects in naoqi. It needs Choregraphe projects in input and will return an ID for each project. It can also only read a given box/timeline in a complex behavior.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
FrameManagerProxy proxy = new FrameManagerProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.FrameManagerProxy">
      <summary>Frame manager is used to play choregraphe projects in naoqi. It needs Choregraphe projects in input and will return an ID for each project. It can also only read a given box/timeline in a complex behavior.</summary>
    </member>
    <member name="T:Aldebaran.LanguageCompatibility.Encoding">
      <summary>Encoding types for strings</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.takePictures(System.Int32)">
      <summary>
Shoot a specific number of successives pictures and place them in the \"/home/nao/recordings/cameras/\" folder. If halfPress has not been called before, it will take longer between click and shoot.
</summary>
      <param name="numberOfPictures"> how many pictures you want to take </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.takePictureRegularly(System.Single,System.String,System.Boolean,System.String,System.Int32)">
      <summary>
Shoot regularly a picture to follow Nao's evolution in his environment
</summary>
      <param name="secondsBetweenTwoShots"> how many seconds between two pictures? </param>
      <param name="pathAndNameRoot"> path and the root of the name for the picture </param>
      <param name="overwriteImage"> do we need to overwrite the picture, or do we add a timestamp to the name? </param>
      <param name="imageRecordFormat"> such as jpeg, bmp, png, etc. </param>
      <param name="resolution"> resolution for the image (e.g. kQQVGA, kQVGA) </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.takePicture">
      <summary>
Shoot 3 successives pictures and place them in the \"/home/nao/recordings/cameras/\" folder. If halfPress has not been called before, it will take longer between click and shoot.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.stopTPR(System.String,System.String)">
      <summary>
Stop an instance of takePictureRegularly()
</summary>
      <param name="pathAndNameRoot"> path and name root of the file we want to stop recording </param>
      <param name="imageRecordFormat"> formats of the file we want to stop recording </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.startVideoRecord_adv(System.String,System.Single,System.String,System.Int32,System.Int32)">
      <summary>
Start recording a video, with advanced options. Please note that only one record at a time can be made.
</summary>
      <param name="videoName"> Name of the video file to be recorded. </param>
      <param name="framerate"> Record frame rate [0.1-50.0]. Warning: MJPG format requires framerate greater than 2.0. </param>
      <param name="format"> ARV = raw YUV422 format; IYUV = raw avi, MJPG = compressed avi. </param>
      <param name="resIndex"> Resolution index. 0 = 160*120, 1 = 320*240, 2 = 640*480 </param>
      <param name="numFrames"> Number of frames to record. If less than 0, it records until stopVideoRecord() is called. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.startVideoRecord(System.String)">
      <summary>
Start recording a video. The .avi video is stored on the robot in the \"/home/nao/.local/share/naoqi/vision\" folder. The record should be stopped by calling stopVideoRecord(). Resolution: 320*240, MJPG format, frame rate ~10-15 fps. Please note that only one record at a time can be made.
</summary>
      <param name="videoName"> Name of the video file to be recorded. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.setWhiteBalance(System.Int32)">
      <summary>
Set white balance by using Nao's white hands as reference.
</summary>
      <param name="camera"> Camera we want to set white balance to : [0] top - [1] bottom - [2] both </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.halfPress">
      <summary>
Prepare camera for shooting (like the auto-focus on standard and digital cameras)
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.PostHelper.#ctor(AL.ALVisionToolboxProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.VisionToolboxProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.takePictures(System.Int32)">
      <summary>
Shoot a specific number of successives pictures and place them in the \"/home/nao/recordings/cameras/\" folder. If halfPress has not been called before, it will take longer between click and shoot.
</summary>
      <param name="numberOfPictures"> how many pictures you want to take </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.takePictureRegularly(System.Single,System.String,System.Boolean,System.String,System.Int32)">
      <summary>
Shoot regularly a picture to follow Nao's evolution in his environment
</summary>
      <param name="secondsBetweenTwoShots"> how many seconds between two pictures? </param>
      <param name="pathAndNameRoot"> path and the root of the name for the picture </param>
      <param name="overwriteImage"> do we need to overwrite the picture, or do we add a timestamp to the name? </param>
      <param name="imageRecordFormat"> such as jpeg, bmp, png, etc. </param>
      <param name="resolution"> resolution for the image (e.g. kQQVGA, kQVGA) </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.takePicture">
      <summary>
Shoot 3 successives pictures and place them in the \"/home/nao/recordings/cameras/\" folder. If halfPress has not been called before, it will take longer between click and shoot.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.stopVideoRecord">
      <summary>
Stop a video record that was launched with startVideoRecord() or startVideoRecord_adv(). The function returns the number of frames that were recorded, as well as the video absolute file name.
</summary>
      <returns> Array of two elements [numRecordedFrames, recordAbsolutePath] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.stopTPR(System.String,System.String)">
      <summary>
Stop an instance of takePictureRegularly()
</summary>
      <param name="pathAndNameRoot"> path and name root of the file we want to stop recording </param>
      <param name="imageRecordFormat"> formats of the file we want to stop recording </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.startVideoRecord_adv(System.String,System.Single,System.String,System.Int32,System.Int32)">
      <summary>
Start recording a video, with advanced options. Please note that only one record at a time can be made.
</summary>
      <param name="videoName"> Name of the video file to be recorded. </param>
      <param name="framerate"> Record frame rate [0.1-50.0]. Warning: MJPG format requires framerate greater than 2.0. </param>
      <param name="format"> ARV = raw YUV422 format; IYUV = raw avi, MJPG = compressed avi. </param>
      <param name="resIndex"> Resolution index. 0 = 160*120, 1 = 320*240, 2 = 640*480 </param>
      <param name="numFrames"> Number of frames to record. If less than 0, it records until stopVideoRecord() is called. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.startVideoRecord(System.String)">
      <summary>
Start recording a video. The .avi video is stored on the robot in the \"/home/nao/.local/share/naoqi/vision\" folder. The record should be stopped by calling stopVideoRecord(). Resolution: 320*240, MJPG format, frame rate ~10-15 fps. Please note that only one record at a time can be made.
</summary>
      <param name="videoName"> Name of the video file to be recorded. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.setWhiteBalance(System.Int32)">
      <summary>
Set white balance by using Nao's white hands as reference.
</summary>
      <param name="camera"> Camera we want to set white balance to : [0] top - [1] bottom - [2] both </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.isVideoRecording">
      <summary>
Are we currently recording a video with startVideoRecord() or startVideoRecord_adv().
</summary>
      <returns> True/False </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.isItDark">
      <summary>
Tell if it is dark around.
</summary>
      <returns> [0;4] outdoor - [5;100] indoor bright - [101;127] indoor artificial light - [128;210] indoor weak lights - [211;255] dark place </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.halfPress">
      <summary>
Prepare camera for shooting (like the auto-focus on standard and digital cameras)
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.backlighting">
      <summary>
Indicates if we might be in backlighting conditions.
</summary>
      <returns> 0: no backlight - 1: possible backlight - 2 and more: backlight identified </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionToolboxProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to VisionToolbox </summary>
      <remarks>This module contains different vision functionalities, like picture taking, video recording, white balance setting, etc ... Videos are recorded in \"/home/nao/.local/share/naoqi/vision\". Pictures are recorded in \"/home/nao/recordings/cameras/\"</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
VisionToolboxProxy proxy = new VisionToolboxProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.VisionToolboxProxy">
      <summary>This module contains different vision functionalities, like picture taking, video recording, white balance setting, etc ... Videos are recorded in \"/home/nao/.local/share/naoqi/vision\". Pictures are recorded in \"/home/nao/recordings/cameras/\"</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.PostHelper.stopMove">
      <summary>
Stop the posture move.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.PostHelper.setMaxTryNumber(System.Int32)">
      <summary>
Set maximum of tries on goToPosture fail.
</summary>
      <param name="pMaxTryNumber"> Number of retry if goToPosture fail. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.PostHelper.#ctor(AL.ALRobotPostureProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.RobotPostureProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.stopMove">
      <summary>
Stop the posture move.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.setMaxTryNumber(System.Int32)">
      <summary>
Set maximum of tries on goToPosture fail.
</summary>
      <param name="pMaxTryNumber"> Number of retry if goToPosture fail. </param>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.goToPosture(System.String,System.Single)">
      <summary>
Make the robot go to the choosenposture.
</summary>
      <param name="postureName"> Name of the desired posture. Use getPostureList to get the list of posture name available. </param>
      <param name="maxSpeedFraction"> A fraction. </param>
      <returns> Returns if the posture was reached or not. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.getPostureList">
      <summary>
Get the list of posture names available.
</summary>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.getPostureFamilyList">
      <summary>
Get the list of posture family names available.
</summary>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.getPostureFamily">
      <summary>
Returns the posture family for example Standing, LyingBelly,...
</summary>
      <returns> Returns the posture family, e.g. Standing. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.applyPosture(System.String,System.Single)">
      <summary>
Set the angle of the joints of the  robot to the choosen posture.
</summary>
      <param name="postureName"> Name of the desired posture. Use getPostureList to get the list of posture name available. </param>
      <param name="maxSpeedFraction"> A fraction. </param>
      <returns> Returns if the posture was reached or not. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPostureProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to RobotPosture </summary>
      <remarks>Use ALRobotPosture module to make the robot go tothe asked posture.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
RobotPostureProxy proxy = new RobotPostureProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.RobotPostureProxy">
      <summary>Use ALRobotPosture module to make the robot go tothe asked posture.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.PostHelper.#ctor(AL.ALRobotPoseProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.RobotPoseProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.getPoseNames">
      <summary>
Get the full list of pose possibly return by this module.
</summary>
      <returns> A ALValue array of string containing the possible Poses. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.getActualPoseAndTime">
      <summary>
Get the actual robot pose and the time since this pose was activate.
</summary>
      <returns> A ALValue array of size 2. With first a string of the robot pose and 

then a float with the time in second since this pose is activated. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RobotPoseProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to RobotPose </summary>
      <remarks>This module give the estimated Nao PoseDetects. 

.A MicroEvent is generated when the robot pose changed. A temporization of 500ms is apply before generated this MicroEvent.

The ALMemory Key is robotPoseChanged, its a string corresponding to the actual robot Pose.

Also some fast access Memory key are available : 

 robotPose An integer in relation with the actual pose(use getPoseNames() to have a relation between int and string)

 robotPoseSince A float corresponding to the time in second since the actual Pose is active.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
RobotPoseProxy proxy = new RobotPoseProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.RobotPoseProxy">
      <summary>This module give the estimated Nao PoseDetects. 

.A MicroEvent is generated when the robot pose changed. A temporization of 500ms is apply before generated this MicroEvent.

The ALMemory Key is robotPoseChanged, its a string corresponding to the actual robot Pose.

Also some fast access Memory key are available : 

 robotPose An integer in relation with the actual pose(use getPoseNames() to have a relation between int and string)

 robotPoseSince A float corresponding to the time in second since the actual Pose is active.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.PostHelper.startPeriodicRecording(System.Collections.Generic.List`1{System.String},System.Int32,System.Boolean,System.Single,System.Collections.Generic.List`1{System.String},System.Object)">
      <summary>
Start recording the motion in a periodic mode
</summary>
      <param name="jointsToRecord"> Names of joints that must be recorded </param>
      <param name="nbPoses"> Default number of poses to record </param>
      <param name="extensionAllowed"> set to true to ignore nbPoses and keep recording new poses as long as record is not manually stopped </param>
      <param name="timeStep"> Time in seconds to wait between two poses </param>
      <param name="jointsToReplay"> Names of joints that must be replayed </param>
      <param name="replayData"> An ALValue holding data for replayed joints. It holds two ALValues. The first one is an ALValue where each line corresponds to a joint, and column elements are times of control points The second one is also an ALValue where each line corresponds to a joint, but column elements are arrays containing [float angle, Handle1, Handle2] elements, where Handle is [int InterpolationType, float dAngle, float dTime] describing the handle offsets relative to the angle and time of the point. The first bezier param describes the handle that controls the curve preceding the point, the second describes the curve following the point. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.PostHelper.startInteractiveRecording(System.Collections.Generic.List`1{System.String},System.Int32,System.Boolean,System.Int32)">
      <summary>
Start recording the motion in an interactive mode
</summary>
      <param name="jointsToRecord"> Names of joints that must be recorded </param>
      <param name="nbPoses"> Default number of poses to record </param>
      <param name="extensionAllowed"> Set to true to ignore nbPoses and keep recording new poses as long as record is not manually stopped </param>
      <param name="mode"> Indicates which interactive mode must be used. 1 : Use right bumper to enslave and left bumper to store the pose  (deprecated); 2 : Use chest button to store the pose </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.PostHelper.dataChanged(System.String,System.Object,System.String)">
      <summary>
Called by ALMemory when subcription data is updated. INTERNAL
</summary>
      <param name="dataName"> Name of the subscribed data. </param>
      <param name="data"> Value of the the subscribed data </param>
      <param name="message"> The message give when subscribing. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.PostHelper.#ctor(AL.ALMotionRecorderProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.MotionRecorderProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.stopAndGetRecording">
      <summary>
Stop recording the motion and return data
</summary>
      <returns> Returns the recorded data as an ALValue: [[JointName1,[pos1, pos2, ...]], [JointName2,[pos1, pos2, ...]], ...] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.startPeriodicRecording(System.Collections.Generic.List`1{System.String},System.Int32,System.Boolean,System.Single,System.Collections.Generic.List`1{System.String},System.Object)">
      <summary>
Start recording the motion in a periodic mode
</summary>
      <param name="jointsToRecord"> Names of joints that must be recorded </param>
      <param name="nbPoses"> Default number of poses to record </param>
      <param name="extensionAllowed"> set to true to ignore nbPoses and keep recording new poses as long as record is not manually stopped </param>
      <param name="timeStep"> Time in seconds to wait between two poses </param>
      <param name="jointsToReplay"> Names of joints that must be replayed </param>
      <param name="replayData"> An ALValue holding data for replayed joints. It holds two ALValues. The first one is an ALValue where each line corresponds to a joint, and column elements are times of control points The second one is also an ALValue where each line corresponds to a joint, but column elements are arrays containing [float angle, Handle1, Handle2] elements, where Handle is [int InterpolationType, float dAngle, float dTime] describing the handle offsets relative to the angle and time of the point. The first bezier param describes the handle that controls the curve preceding the point, the second describes the curve following the point. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.startInteractiveRecording(System.Collections.Generic.List`1{System.String},System.Int32,System.Boolean,System.Int32)">
      <summary>
Start recording the motion in an interactive mode
</summary>
      <param name="jointsToRecord"> Names of joints that must be recorded </param>
      <param name="nbPoses"> Default number of poses to record </param>
      <param name="extensionAllowed"> Set to true to ignore nbPoses and keep recording new poses as long as record is not manually stopped </param>
      <param name="mode"> Indicates which interactive mode must be used. 1 : Use right bumper to enslave and left bumper to store the pose  (deprecated); 2 : Use chest button to store the pose </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.dataChanged(System.String,System.Object,System.String)">
      <summary>
Called by ALMemory when subcription data is updated. INTERNAL
</summary>
      <param name="dataName"> Name of the subscribed data. </param>
      <param name="data"> Value of the the subscribed data </param>
      <param name="message"> The message give when subscribing. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionRecorderProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to MotionRecorder </summary>
      <remarks>ALMotionRecorder is a very specific module for real-time motion recording in Choregraphe. Users can get a simpler interface for motion recording by using the Animation Mode. ALMotionRecorder also supports recording modes using bumpers or torso button, and selective motion replay.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
MotionRecorderProxy proxy = new MotionRecorderProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.MotionRecorderProxy">
      <summary>ALMotionRecorder is a very specific module for real-time motion recording in Choregraphe. Users can get a simpler interface for motion recording by using the Animation Mode. ALMotionRecorder also supports recording modes using bumpers or torso button, and selective motion replay.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.setParameter(System.String,System.Object)">
      <summary>
DEPRECATED: Sets pause and resolution
</summary>
      <param name="paramName"> Name of the parameter to set </param>
      <param name="value"> New value </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.pause(System.Boolean)">
      <summary>
Changes the pause status of the extractor
</summary>
      <param name="paused"> New pause satus </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.enableReferenceRefresh(System.Boolean)">
      <summary />
      <param name="refresh"> True if the reference is automatically refreshed at extractor startup; false to use the manually set reference image. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.PostHelper.#ctor(AL.ALVisualCompassProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.VisualCompassProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.setResolution(System.Int32)">
      <summary>
Sets extractor resolution
</summary>
      <param name="resolution"> New resolution </param>
      <returns> True if the update succeeded, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.setReferenceImage">
      <summary>
Sets the reference image for the compass.
</summary>
      <returns> True if the reference image has been successfully set </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.setParameter(System.String,System.Object)">
      <summary>
DEPRECATED: Sets pause and resolution
</summary>
      <param name="paramName"> Name of the parameter to set </param>
      <param name="value"> New value </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.setFrameRate(System.Int32)">
      <summary>
Sets extractor framerate
</summary>
      <param name="framerate"> New framerate </param>
      <returns> True if the update succeeded, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.setActiveCamera(System.Int32)">
      <summary>
Sets extractor active camera
</summary>
      <param name="cameraId"> Id of the camera that will become the active camera </param>
      <returns> True if the update succeeded, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.pause(System.Boolean)">
      <summary>
Changes the pause status of the extractor
</summary>
      <param name="paused"> New pause satus </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.isProcessing">
      <summary>
Gets extractor running status
</summary>
      <returns> True if the extractor is currently processing images, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.isPaused">
      <summary>
Gets extractor pause status
</summary>
      <returns> True if the extractor is paused, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getResolution">
      <summary>
Gets extractor resolution
</summary>
      <returns> Current value of the resolution of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getReferenceQuality">
      <summary>
Returns the number of reference keypoints.
</summary>
      <returns> Number of reference keypoints. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getReferenceImage">
      <summary>
Returns an ALValue containing the image used as a reference.
</summary>
      <returns> Reference image (formatted as the ALValue from getImageRemote of ALVideoDevice) </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getMatchingQuality">
      <summary>
Returns the reliability of the matching and the compass deviation computations.
</summary>
      <returns> [0]: Percentage of the matched keypoints that are used to compute the deviation (significant if over 50%) 

 [1]: Number of keypoints matching. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getFrameRate">
      <summary>
Gets extractor framerate
</summary>
      <returns> Current value of the framerate of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getCurrentImage">
      <summary>
Returns an ALValue containing the current image used to compute the deviation.
</summary>
      <returns> Current image (formatted as the ALValue from getImageRemote of ALVideoDevice) </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.getActiveCamera">
      <summary>
Gets extractor active camera
</summary>
      <returns> Id of the current active camera of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.enableReferenceRefresh(System.Boolean)">
      <summary />
      <param name="refresh"> True if the reference is automatically refreshed at extractor startup; false to use the manually set reference image. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisualCompassProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to VisualCompass </summary>
      <remarks />
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
VisualCompassProxy proxy = new VisualCompassProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.VisualCompassProxy">
      <summary />
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.PostHelper.#ctor(AL.ALFsrProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.FsrProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FsrProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Fsr </summary>
      <remarks>Deals with FSR sensors.

 A MicroEvent is generated when the foot contact changed.

The ALMemory Key is footContactChanged, its a boolean which is set to \"True\" if one of the foot touched the ground

Also some fast access Memory key are available : 

 footContact (1.0f if one of the foot touched the ground)

 leftFootContact (1.0f if the left foot touched the ground)

 rightFootContact (1.0f if the right foot touched the ground)

 leftFootTotalWeight (the average weight on the left foot in Kg)

 rightFootTotalWeight (the average weight on the right foot in Kg)</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
FsrProxy proxy = new FsrProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.FsrProxy">
      <summary>Deals with FSR sensors.

 A MicroEvent is generated when the foot contact changed.

The ALMemory Key is footContactChanged, its a boolean which is set to \"True\" if one of the foot touched the ground

Also some fast access Memory key are available : 

 footContact (1.0f if one of the foot touched the ground)

 leftFootContact (1.0f if the left foot touched the ground)

 rightFootContact (1.0f if the right foot touched the ground)

 leftFootTotalWeight (the average weight on the left foot in Kg)

 rightFootTotalWeight (the average weight on the right foot in Kg)</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.stopMicrophonesRecording">
      <summary>
This method stops the recording of the sound collected by the microphones.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.startMicrophonesRecording(System.String,System.String,System.Int32,System.Object)">
      <summary>
This method allows to record the signal collected on the nao's microphones. You can choose to record only the front microphone in a ogg file, or the 4 microphones in a wav file.
</summary>
      <param name="filename"> Name of the file where to record the sound. </param>
      <param name="type"> wav or ogg. </param>
      <param name="samplerate"> Required sample rate. </param>
      <param name="channels"> vector of booleans. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.setDebugMode(System.Boolean)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="bSetOrUnset"> enable the functionnality when true. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.processSoundRemote(System.Int32,System.Int32,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.processRemote(System.Int32,System.Int32,System.Object,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="timestamp"> Provides the timestamp of the buffer. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.PostHelper.#ctor(AL.ALAudioRecorderProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.AudioRecorderProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.stopMicrophonesRecording">
      <summary>
This method stops the recording of the sound collected by the microphones.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.startMicrophonesRecording(System.String,System.String,System.Int32,System.Object)">
      <summary>
This method allows to record the signal collected on the nao's microphones. You can choose to record only the front microphone in a ogg file, or the 4 microphones in a wav file.
</summary>
      <param name="filename"> Name of the file where to record the sound. </param>
      <param name="type"> wav or ogg. </param>
      <param name="samplerate"> Required sample rate. </param>
      <param name="channels"> vector of booleans. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.setDebugMode(System.Boolean)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="bSetOrUnset"> enable the functionnality when true. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.processSoundRemote(System.Int32,System.Int32,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.processRemote(System.Int32,System.Int32,System.Object,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="timestamp"> Provides the timestamp of the buffer. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioRecorderProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to AudioRecorder </summary>
      <remarks>This module records NAO's microphones signals into sound files.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
AudioRecorderProxy proxy = new AudioRecorderProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.AudioRecorderProxy">
      <summary>This module records NAO's microphones signals into sound files.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.Proxy.genericPost(System.String,System.Object)">
      <summary> Starts a method in a new thread and returns an ID that can be used to interact with a long running task </summary>
      <param name="methodName"> The name of the method you want to call </param>
      <param name="args"> The arguments required for the method expressed as a single object array </param>
      <returns> An int ID that can be used with the methods stop, isRunning and wait </returns>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

// Create a generic proxy to motion
Proxy proxy = new Proxy("ALMotion", "10.0.252.82", 9559);

Object[] names = new Object[] {"HeadYaw", "HeadPitch"};
Object[] angles = new Object[] {1.0F, 0.5F};
Object fractionMaxSpeed = 0.3F;

// Gather the arguments into a single object array
Object[] methodArgs = new Object[] {names, angles, fractionMaxSpeed};

// Call the method using the generic proxy, using genericPost
// genericPost will return an ID that can be used to stop the task
int id = proxy.genericPost("angleInterpolationWithSpeed", methodArgs);

// Wait a little so that the start of the movement can be seen
System.Threading.Thread.Sleep(200);

// Stop the movement.
// Note that the id needs to be put into an object array
proxy.genericCall("stop", new Object[] {id});
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.Proxy.genericVoidCall(System.String,System.Object)">
      <summary> Can be used to call any method of the module that does not return a result </summary>
      <param name="methodName"> The name of the method you want to call </param>
      <param name="args"> The arguments required for the method expressed as a single object array </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
string name = "ALMotion"
// Make a proxy to ALMotion
Proxy proxy = new Proxy(name, ip, 9559);

// Prepare the arguments for angleInterpolationWithSpeed
Object[] names = new Object[] {"HeadYaw", "HeadPitch"};
Object[] angles = new Object[] {1.0F, 0.5F};
Object fractionMaxSpeed = 0.3F;

// Combine the arguments into a single object
Object[] methodArgs = new Object[] {names, angles, fractionMaxSpeed};

// Call the method using the generic proxy
proxy.genericVoidCall("angleInterpolationWithSpeed", methodArgs);
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.Proxy.genericCall(System.String,System.Object)">
      <summary> Can be used to call any method of the module that returns </summary>
      <param name="methodName"> The name of the method you want to call </param>
      <param name="args"> The arguments required for the method expressed as a single object array </param>
      <returns> The result of calling the method </returns>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;
using System.Collections;

string ip = "127.0.0.1";
string name = "ALMotion"
Proxy proxy = new Proxy(name, ip, 9559);

// The result is an object which in this case is really an array of objects.
// This is most easily viewed when cast to a System.Collections.ArrayList
ArrayList sensorAngles = (ArrayList) proxy.genericCall("getAngles", new object[] {"Body", true});
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.Proxy.#ctor(System.String,System.String,System.Int32)">
      <summary> Creates a generic proxy that can be used to communicate with any NAOqi module</summary>
      <param name="moduleName"> The name of the module to connect to</param>
      <param name="ip"> The IP address used for the connection</param>
      <param name="port"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
string name = "MyModule"
Proxy proxy = new Proxy(name, ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.Proxy">
      <summary>Generic proxy that can be used to communicate with any NAOqi module</summary>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.PostHelper.special(System.String)">
      <summary>
Special DCM commands
</summary>
      <param name="result"> one string and could be Reset, Version, Chain, Diagnostic, Config </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.PostHelper.setAlias(System.Object)">
      <summary>
Call this function to send timed-command list to an alias (list of actuators)
</summary>
      <param name="commands"> AL::ALValue with all data </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.PostHelper.set(System.Object)">
      <summary>
Call this function to send a timed-command list to an actuator
</summary>
      <param name="commands"> AL::ALValue with all data </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.PostHelper.calibration(System.Object)">
      <summary>
Calibration of a joint
</summary>
      <param name="calibrationInput"> A complex ALValue. See red documentation </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.PostHelper.#ctor(AL.DCMProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.DCMProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.special(System.String)">
      <summary>
Special DCM commands
</summary>
      <param name="result"> one string and could be Reset, Version, Chain, Diagnostic, Config </param>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.setAlias(System.Object)">
      <summary>
Call this function to send timed-command list to an alias (list of actuators)
</summary>
      <param name="commands"> AL::ALValue with all data </param>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.set(System.Object)">
      <summary>
Call this function to send a timed-command list to an actuator
</summary>
      <param name="commands"> AL::ALValue with all data </param>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.preferences(System.String,System.String,System.String,System.Object)">
      <summary>
Save updated value from DCM in XML pref file
</summary>
      <param name="action"> string : 'Save' 'Load' 'Add' </param>
      <param name="target"> string : 'Chest' 'Head' 'Main' 'All' </param>
      <param name="keyName"> The name of the key if action = 'Add'. </param>
      <param name="keyValue"> The ALVAlue of the key to add </param>
      <returns> Nothing </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.getTime(System.Int32)">
      <summary>
Return the DCM time
</summary>
      <param name="offset"> optional time in ms (signed) to add/remove </param>
      <returns> An integer (could be signed) with the DCM time </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.getPrefix">
      <summary>
Return the STM base name
</summary>
      <returns> the STM base name for all device/sensors (1st string in the array) and all devices (2nd string in the array) </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.createAlias(System.Object)">
      <summary>
Create or change an alias (list of actuators)
</summary>
      <param name="alias"> Alias name and description </param>
      <returns> Same as pParams, but with the name removed if the actuator is not found </returns>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.calibration(System.Object)">
      <summary>
Calibration of a joint
</summary>
      <param name="calibrationInput"> A complex ALValue. See red documentation </param>
    </member>
    <member name="M:Aldebaran.Proxies.DCMProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to DCM </summary>
      <remarks>Manage link with devices (sensors and actuators). See specific documentation.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
DCMProxy proxy = new DCMProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.DCMProxy">
      <summary>Manage link with devices (sensors and actuators). See specific documentation.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.PostHelper.setUserSharedFolderPath(System.String)">
      <summary>
Set a new value of the user shared folder path.
</summary>
      <param name="fileName"> Name of the module associate to the preference. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.PostHelper.#ctor(AL.ALFileManagerProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.FileManagerProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.setUserSharedFolderPath(System.String)">
      <summary>
Set a new value of the user shared folder path.
</summary>
      <param name="fileName"> Name of the module associate to the preference. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.getUserSharedFolderPath">
      <summary>
Get the current user shared folder path.
</summary>
      <returns> User shared folder path string. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.getSystemSharedFolderPath">
      <summary>
Get the current system shared folder path.
</summary>
      <returns> System shared folder path string. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.getFileContents(System.String)">
      <summary>
Returns the complete path of the file if it does exist. Starts by looking in user's shared folder, then in system folder.
</summary>
      <param name="prefs"> array reprenting the whole file. </param>
      <returns> True upon success </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.getFileCompletePath(System.String)">
      <summary>
Returns the complete path of the file if it does exist. Starts by looking in user's shared folder, then in system folder.
</summary>
      <param name="prefs"> array reprenting the whole file. </param>
      <returns> True upon success </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.fileExists(System.String)">
      <summary>
Try to find if this file does exist on robot or not.
</summary>
      <param name="fileName"> Name of the module associate to the preference. </param>
      <returns> True upon success </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.dataFileExists(System.String)">
      <summary>
Try to find if this file does exist on robot or not.
</summary>
      <param name="fileName"> Name of the module associate to the preference. </param>
      <returns> True upon success </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FileManagerProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to FileManager </summary>
      <remarks>ALFileManager manages the user files stored in a shared folder.

Note that FileManager starts to look in the shared folder, and if it does not find anything,

then it looks in the data folder.

Shared folder can be changed on the fly, and module will then be able to say which

files are available in this folder, as well as return their complete path.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
FileManagerProxy proxy = new FileManagerProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.FileManagerProxy">
      <summary>ALFileManager manages the user files stored in a shared folder.

Note that FileManager starts to look in the shared folder, and if it does not find anything,

then it looks in the data folder.

Shared folder can be changed on the fly, and module will then be able to say which

files are available in this folder, as well as return their complete path.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.PostHelper.unsubscribeAllInstances(System.String)">
      <summary>
Used to unsubscribe all instances for a given G.V.M. (e.g. VisionModule and VisionModule_5) from ALVideoDevice.
</summary>
      <param name="id"> Root name of the G.V.M. (e.g. with the example above this will be VisionModule). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.PostHelper.unsubscribe(System.String)">
      <summary />
      <param name="nameId"> Name under which the vision module is known from ALVideoDevice. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.PostHelper.setParamDefault(System.Int32)">
      <summary />
      <param name="arg1"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.PostHelper.setParam(System.Int32,System.Int32)">
      <summary>
Sets the value of a specific parameter for the video source.
</summary>
      <param name="pParam"> Camera parameter requested. </param>
      <param name="pNewValue"> value requested. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.PostHelper.setParam(System.Int32,System.Int32,System.Int32)">
      <summary>
Sets the value of a specific parameter for the video source.
</summary>
      <param name="pParam"> Camera parameter requested. </param>
      <param name="pNewValue"> value requested. </param>
      <param name="pCameraIndex"> Camera requested. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.PostHelper.onClientDisconnected(System.String,System.Object,System.String)">
      <summary>
Callback when client is disconnected
</summary>
      <param name="eventName"> The echoed event name </param>
      <param name="eventContents"> The name of the client that has disconnected </param>
      <param name="message"> The message give when subscribing. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.PostHelper.#ctor(AL.ALVideoDeviceProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.VideoDeviceProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.unsubscribeAllInstances(System.String)">
      <summary>
Used to unsubscribe all instances for a given G.V.M. (e.g. VisionModule and VisionModule_5) from ALVideoDevice.
</summary>
      <param name="id"> Root name of the G.V.M. (e.g. with the example above this will be VisionModule). </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.unsubscribe(System.String)">
      <summary />
      <param name="nameId"> Name under which the vision module is known from ALVideoDevice. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.subscribeCameras(System.String,System.Object,System.Object,System.Object,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="cameraIndexes"> Cameras requested. </param>
      <param name="resolutions"> Resolutions requested.{0=kQQVGA, 1=kQVGA, 2=kVGA, 3=k4VGA} </param>
      <param name="colorSpaces"> Colorspaces requested.{0=kYuv, 9=kYUV422, 10=kYUV, 11=kRGB, 12=kHSY, 13=kBGR} </param>
      <param name="fps"> Fps (frames per second) requested.{5, 10, 15, 30} </param>
      <returns> Name under which the vision module is known from ALVideoDevice </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.subscribeCamera(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="cameraIndex"> Camera requested. </param>
      <param name="resolution"> Resolution requested.{0=kQQVGA, 1=kQVGA, 2=kVGA, 3=k4VGA} </param>
      <param name="colorSpace"> Colorspace requested.{0=kYuv, 9=kYUV422, 10=kYUV, 11=kRGB, 12=kHSY, 13=kBGR} </param>
      <param name="fps"> Fps (frames per second) requested.{5, 10, 15, 30} </param>
      <returns> Name under which the vision module is known from ALVideoDevice </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.subscribe(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
Register to ALVideoDevice (formerly Video Input Module/V.I.M.). When a General Video Module(G.V.M.) registers to ALVideoDevice, a buffer of the requested image format is added to the buffers list.

Returns the name under which the G.V.M. is registered to ALVideoDevice (useful when two G.V.M. try to register using the same name
</summary>
      <param name="gvmName"> Name of the subscribing G.V.M. </param>
      <param name="resolution"> Resolution requested. { 0 = kQQVGA, 1 = kQVGA, 2 = kVGA } </param>
      <param name="colorSpace"> Colorspace requested. { 0 = kYuv, 9 = kYUV422, 10 = kYUV, 11 = kRGB, 12 = kHSY, 13 = kBGR } </param>
      <param name="fps"> Fps (frames per second) requested. { 5, 10, 15, 30 } </param>
      <returns> Name under which the G.V.M. is known from ALVideoDevice, 0 if failed. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.stopVideo(System.String)">
      <summary>
Stop writing the video sequence
</summary>
      <param name="id"> Name under which the G.V.M. is known from ALVideoDevice. </param>
      <returns> true if success </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.stopFrameGrabber">
      <summary>
Advanced method that close video source device.

Note that the last module unsubscribing to ALVideoDevice will launch it automatically.
</summary>
      <returns> true if success </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.stopFrameGrabber(System.Int32)">
      <summary />
      <param name="cameraIndex"> Camera requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.startFrameGrabber">
      <summary>
Advanced method that opens and initialize video source device if it was not before.

Note that the first module subscribing to ALVideoDevice will launch it automatically.
</summary>
      <returns> true if success </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.startFrameGrabber(System.Int32)">
      <summary />
      <param name="cameraIndex"> Camera requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.sizesToResolution(System.Int32,System.Int32)">
      <summary />
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setSimCamInputSize(System.Int32,System.Int32)">
      <summary>
called by the simulator to know expected image parameters
</summary>
      <param name="width"> int width of image among 1280*960, 640*480, 320*240, 240*160 </param>
      <param name="height"> int height of image among 1280*960, 640*480, 320*240, 240*160 </param>
      <returns> true if setSize worked </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setResolutions(System.String,System.Object)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="resolutions"> Resolutions requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setResolution(System.String,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="resolution"> Resolution requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setParamDefault(System.Int32)">
      <summary />
      <param name="arg1"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setParam(System.Int32,System.Int32)">
      <summary>
Sets the value of a specific parameter for the video source.
</summary>
      <param name="pParam"> Camera parameter requested. </param>
      <param name="pNewValue"> value requested. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setParam(System.Int32,System.Int32,System.Int32)">
      <summary>
Sets the value of a specific parameter for the video source.
</summary>
      <param name="pParam"> Camera parameter requested. </param>
      <param name="pNewValue"> value requested. </param>
      <param name="pCameraIndex"> Camera requested. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setFrameRate(System.String,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="frameRate"> Frame Rate requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setColorSpaces(System.String,System.Object)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="colorSpaces"> Color Spaces requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setColorSpace(System.String,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="colorSpace"> Color Space requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setCamerasParameterToDefault(System.String,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="parameterId"> Camera parameter requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setCamerasParameter(System.String,System.Int32,System.Object)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="parameterId"> Camera parameter requested. </param>
      <param name="values"> values requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setCameraParameterToDefault(System.String,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="parameterId"> Camera parameter requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setCameraParameter(System.String,System.Int32,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="parameterId"> Camera parameter requested. </param>
      <param name="value"> value requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setActiveCameras(System.String,System.Object)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="cameraIndexes"> Cameras requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setActiveCamera(System.Int32)">
      <summary>
Set the active camera
</summary>
      <param name="activeCamera"> 0: top camera - 1: bottom camera </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.setActiveCamera(System.String,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="cameraIndex"> Camera requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.resolutionToSizes(System.Int32)">
      <summary />
      <param name="arg1"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.releaseImages(System.String)">
      <summary>
Release image buffer locked by getImageLocal().

If G.V.M. had no locked image buffer, does nothing.
</summary>
      <param name="name"> Name of the subscribing vision module </param>
      <returns> true if success </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.releaseImage(System.String)">
      <summary>
Release image buffer locked by getImageLocal().

If G.V.M. had no locked image buffer, does nothing.
</summary>
      <param name="name"> Name of the subscribing vision module </param>
      <returns> true if success </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.recordVideo(System.String,System.String,System.Int32,System.Int32)">
      <summary>
Background record of an .arv raw format video from the images processed by a vision module

Actualy it take picture each time the vision module call getDirectRawImageRemote().
</summary>
      <param name="id"> Name under which the G.V.M. is known from the V.I.M. </param>
      <param name="path"> path/name of the video to be recorded </param>
      <param name="totalNumber"> number of images to be recorded. 0xFFFFFFFF for \"unlimited\" </param>
      <param name="period"> one image recorded every pPeriod images </param>
      <returns> true if success </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.putImage(System.Object)">
      <summary>
Allow image buffer pushing
</summary>
      <param name="imageBuffer"> Image buffer in bitmap form </param>
      <returns> true if the put succeeded </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.putImage(System.Int32,System.Int32,System.Int32,System.Object)">
      <summary>
Allow image buffer pushing
</summary>
      <param name="cameraIndex"> Camera requested. </param>
      <param name="width"> int width of image among 1280*960, 640*480, 320*240, 240*160 </param>
      <param name="height"> int height of image </param>
      <param name="imageBuffer"> Image buffer in bitmap form </param>
      <returns> true if the put succeeded </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.onClientDisconnected(System.String,System.Object,System.String)">
      <summary>
Callback when client is disconnected
</summary>
      <param name="eventName"> The echoed event name </param>
      <param name="eventContents"> The name of the client that has disconnected </param>
      <param name="message"> The message give when subscribing. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.isFrameGrabberOff">
      <summary>
Advanced method that asks if the framegrabber is off.
</summary>
      <returns> true if off </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.isFrameGrabberOff(System.Int32)">
      <summary />
      <param name="cameraIndex"> Camera requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getVIMResolution">
      <summary />
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getVIMFrameRate">
      <summary />
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getVIMColorSpace">
      <summary />
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getResolutions(System.String)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getResolution(System.String)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getResolution(System.Int32)">
      <summary />
      <param name="cameraIndex"> Camera requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getParam(System.Int32)">
      <summary />
      <param name="pParam"> Camera parameter requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getParam(System.Int32,System.Int32)">
      <summary />
      <param name="pParam"> Camera parameter requested. </param>
      <param name="pCameraIndex"> Camera requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getImgSizeFromAngSize(System.Collections.Generic.List`1{System.Single})">
      <summary />
      <param name="arg1"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getImgPosFromAngPos(System.Collections.Generic.List`1{System.Single})">
      <summary />
      <param name="arg1"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getImgInfoFromAngInfoWithRes(System.Collections.Generic.List`1{System.Single},System.Int32)">
      <summary />
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getImgInfoFromAngInfo(System.Collections.Generic.List`1{System.Single})">
      <summary />
      <param name="arg1"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getImagesRemote(System.String)">
      <summary>
Applies transformations to the last image from video source and fills pFrameOut.
</summary>
      <param name="name"> Name of the subscribing vision module </param>
      <returns> Array containing image informations : 

    [0] : width;

    [1] : height;

    [2] : number of layers;

    [3] : ColorSpace;

    [4] : time stamp (highest 32 bits);

    [5] : time stamp (lowest 32 bits);

    [6] : array of size height * width * nblayers containing image data;

    [7] : cameraID;

    [8] : left angle;

    [9] : top angle;

    [10] : right angle;

    [11] : bottom angle; </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getImageSizeFromAngularSize(System.Int32,System.Collections.Generic.List`1{System.Single})">
      <summary />
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getImageRemote(System.String)">
      <summary>
Applies transformations to the last image from video source and fills pFrameOut.
</summary>
      <param name="name"> Name of the subscribing vision module </param>
      <returns> Array containing image informations : 

    [0] : width;

    [1] : height;

    [2] : number of layers;

    [3] : ColorSpace;

    [4] : time stamp (highest 32 bits);

    [5] : time stamp (lowest 32 bits);

    [6] : array of size height * width * nblayers containing image data;

    [7] : cameraID;

    [8] : left angle;

    [9] : top angle;

    [10] : right angle;

    [11] : bottom angle; </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getImagePositionFromAngularPosition(System.Int32,System.Collections.Generic.List`1{System.Single})">
      <summary />
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getImageInfoFromAngularInfoWithResolution(System.Int32,System.Collections.Generic.List`1{System.Single},System.Int32)">
      <summary />
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <param name="arg3"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getImageInfoFromAngularInfo(System.Int32,System.Collections.Generic.List`1{System.Single})">
      <summary />
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getGVMResolution(System.String)">
      <summary />
      <param name="arg1"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getGVMFrameRate(System.String)">
      <summary />
      <param name="arg1"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getGVMColorSpace(System.String)">
      <summary />
      <param name="arg1"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getFrameRate(System.String)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getFrameRate(System.Int32)">
      <summary />
      <param name="cameraIndex"> Camera requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getExpectedImageParameters">
      <summary>
called by the simulator to know expected image parameters
</summary>
      <returns> ALValue of expected parameters, [int resolution, int framerate] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getExpectedImageParameters(System.Int32)">
      <summary>
called by the simulator to know expected image parameters
</summary>
      <param name="cameraIndex"> Camera requested. </param>
      <returns> ALValue of expected parameters, [int resolution, int framerate] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getDirectRawImagesRemote(System.String)">
      <summary>
Fills an ALValue with data coming directly from raw buffer (no format conversion).
</summary>
      <param name="name"> Name of the subscribing vision module </param>
      <returns> Array containing image informations : 

    [0] : width;

    [1] : height;

    [2] : number of layers;

    [3] : ColorSpace;

    [4] : time stamp (highest 32 bits);

    [5] : time stamp (lowest 32 bits);

    [6] : array of size height * width * nblayers containing image data;

    [7] : cameraID;

    [8] : left angle;

    [9] : top angle;

    [10] : right angle;

    [11] : bottom angle; </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getDirectRawImageRemote(System.String)">
      <summary>
Fills an ALValue with data coming directly from raw buffer (no format conversion).
</summary>
      <param name="name"> Name of the subscribing vision module </param>
      <returns> Array containing image informations : 

    [0] : width;

    [1] : height;

    [2] : number of layers;

    [3] : ColorSpace;

    [4] : time stamp (highest 32 bits);

    [5] : time stamp (lowest 32 bits);

    [6] : array of size height * width * nblayers containing image data;

    [7] : cameraID;

    [8] : left angle;

    [9] : top angle;

    [10] : right angle;

    [11] : bottom angle; </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getColorSpaces(System.String)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getColorSpace(System.String)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getColorSpace(System.Int32)">
      <summary />
      <param name="cameraIndex"> Camera requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getCamerasParameter(System.String,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="parameterId"> Camera parameter requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getCameraParameter(System.String,System.Int32)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <param name="parameterId"> Camera parameter requested. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getCameraModelID">
      <summary />
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getCameraModel(System.Int32)">
      <summary />
      <param name="cameraIndex"> Camera requested. </param>
      <returns> 1(kOV7670): VGA camera - 2(kMT9M114): HD camera </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getAngularSizeFromImageSize(System.Int32,System.Collections.Generic.List`1{System.Single})">
      <summary />
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getAngularPositionFromImagePosition(System.Int32,System.Collections.Generic.List`1{System.Single})">
      <summary />
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getAngSizeFromImgSize(System.Collections.Generic.List`1{System.Single})">
      <summary />
      <param name="arg1"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getAngPosFromImgPos(System.Collections.Generic.List`1{System.Single})">
      <summary />
      <param name="arg1"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getActiveCameras(System.String)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getActiveCamera">
      <summary>
Tells if top camera is active
</summary>
      <returns> 0: top camera - 1: bottom camera </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.getActiveCamera(System.String)">
      <summary />
      <param name="name"> Name of the subscribing vision module </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VideoDeviceProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to VideoDevice </summary>
      <remarks>ALVideoDevice, formerly called Video Input systemis architectured in order to provide every module related to vision, called vision module, a direct access to raw images from video source, or an access to images transformed in the requested format.

  Extension name of the methods providing images depends on wether modules are local (dynamic library) or remote (executable).</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
VideoDeviceProxy proxy = new VideoDeviceProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.VideoDeviceProxy">
      <summary>ALVideoDevice, formerly called Video Input systemis architectured in order to provide every module related to vision, called vision module, a direct access to raw images from video source, or an access to images transformed in the requested format.

  Extension name of the methods providing images depends on wether modules are local (dynamic library) or remote (executable).</summary>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.PostHelper.setResolution(System.Int32)">
      <summary>
Sets resolution.
</summary>
      <param name="resolution"> New frame resolution. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.PostHelper.setPictureFormat(System.String)">
      <summary>
Sets picture extension.
</summary>
      <param name="pictureFormat"> New extension used to save pictures. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.PostHelper.setColorSpace(System.Int32)">
      <summary>
Sets color space.
</summary>
      <param name="colorSpace"> New color space. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.PostHelper.setCaptureInterval(System.Int32)">
      <summary>
Sets delay between two captures.
</summary>
      <param name="captureInterval"> New delay (in ms) between two pictures. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.PostHelper.setCameraID(System.Int32)">
      <summary>
Sets camera ID.
</summary>
      <param name="cameraID"> ID of the camera to use. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.PostHelper.#ctor(AL.ALPhotoCaptureProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.PhotoCaptureProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.takePictures(System.Int32,System.String,System.String,System.Boolean)">
      <summary>
Takes several pictures as quickly as possible
</summary>
      <param name="numberOfPictures"> Number of pictures to take </param>
      <param name="folderPath"> Folder where the pictures are saved. </param>
      <param name="fileName"> Filename used to save the pictures. </param>
      <param name="overwrite"> If false and the filename already exists, an error is thrown. </param>
      <returns> List of all saved files: [[filename1, filename2...]] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.takePictures(System.Int32,System.String,System.String)">
      <summary>
Takes several pictures as quickly as possible
</summary>
      <param name="numberOfPictures"> Number of pictures to take </param>
      <param name="folderPath"> Folder where the pictures are saved. </param>
      <param name="fileName"> Filename used to save the pictures. </param>
      <returns> List of all saved files: [[filename1, filename2...]] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.takePicture(System.String,System.String,System.Boolean)">
      <summary>
Takes one picture.
</summary>
      <param name="folderPath"> Folder where the picture is saved. </param>
      <param name="fileName"> Filename used to save the picture. </param>
      <param name="overwrite"> If false and the filename already exists, an error is thrown. </param>
      <returns> Full file name of the picture saved on the disk: [filename] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.takePicture(System.String,System.String)">
      <summary>
Takes one picture.
</summary>
      <param name="folderPath"> Folder where the picture is saved. </param>
      <param name="fileName"> Filename used to save the picture. </param>
      <returns> Full file name of the picture saved on the disk: [filename] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.setResolution(System.Int32)">
      <summary>
Sets resolution.
</summary>
      <param name="resolution"> New frame resolution. </param>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.setPictureFormat(System.String)">
      <summary>
Sets picture extension.
</summary>
      <param name="pictureFormat"> New extension used to save pictures. </param>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.setColorSpace(System.Int32)">
      <summary>
Sets color space.
</summary>
      <param name="colorSpace"> New color space. </param>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.setCaptureInterval(System.Int32)">
      <summary>
Sets delay between two captures.
</summary>
      <param name="captureInterval"> New delay (in ms) between two pictures. </param>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.setCameraID(System.Int32)">
      <summary>
Sets camera ID.
</summary>
      <param name="cameraID"> ID of the camera to use. </param>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.getResolution">
      <summary>
Returns current resolution.
</summary>
      <returns> Current frame resolution. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.getPictureFormat">
      <summary>
Returns current picture format.
</summary>
      <returns> Current picture format. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.getColorSpace">
      <summary>
Returns current color space.
</summary>
      <returns> Current color space. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.getCaptureInterval">
      <summary>
Returns current delay between captures.
</summary>
      <returns> Current delay (in ms) between two pictures. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.getCameraID">
      <summary>
Returns current camera ID.
</summary>
      <returns> Current camera ID. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.PhotoCaptureProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to PhotoCapture </summary>
      <remarks>This module provides methods to take pictures and store them on disk.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
PhotoCaptureProxy proxy = new PhotoCaptureProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.PhotoCaptureProxy">
      <summary>This module provides methods to take pictures and store them on disk.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.PostHelper.#ctor(AL.ALLauncherProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.LauncherProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.launchScript(System.String)">
      <summary>
runs a script connected the current broker
</summary>
      <param name="moduleName"> the name of the script to launch (python) </param>
      <returns> true if ok </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.launchPythonModule(System.String)">
      <summary>
Import a python module
</summary>
      <param name="moduleName"> the name of the module to launch </param>
      <returns> true if ok </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.launchLocal(System.String)">
      <summary>
Loads dynamicaly a module
</summary>
      <param name="moduleName"> the name of the module to launch or the name of the python script to evaluate </param>
      <returns> list of modules loaded </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.launchExecutable(System.String)">
      <summary>
runs an executable and connect it to current broker (executable)
</summary>
      <param name="moduleName"> the name of the module to launch or the name of the script file to execute </param>
      <returns> true if ok </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.isModulePresent(System.String)">
      <summary>
Tests the existence of an active module in the global system (in same executable or in another executable of the distributed system)
</summary>
      <param name="strPartOfModuleName"> a part of the name of the module to test existence </param>
      <returns> the returned value is true if this module is present </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.getGlobalModuleList">
      <summary>
get the list of modules loaded on the robot and connected on the robot
</summary>
      <returns> array of present modules </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LauncherProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Launcher </summary>
      <remarks>ALlauncher allows to link dynamicaly with library, run executable, unload library, check if module is loaded...</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
LauncherProxy proxy = new LauncherProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.LauncherProxy">
      <summary>ALlauncher allows to link dynamicaly with library, run executable, unload library, check if module is loaded...</summary>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.stopAll">
      <summary>
This method stops the current and all the pending tasks immediately.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.setVolume(System.Single)">
      <summary>
Sets the volume of text-to-speech output.
</summary>
      <param name="volume"> Volume (between 0.0 and 1.0). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.setVoice(System.String)">
      <summary>
Changes the voice used by the text-to-speech engine. The voice identifier must belong to the installed voices, that can be listed using the 'getAvailableVoices' method. If the voice is not available, it remains unchanged. No exception is thrown in this case. For the time being, only two voices are available by default : Kenny22Enhanced (English voice) and Julie22Enhanced (French voice)
</summary>
      <param name="pVoiceID"> The voice (as a std::string). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.setParameter(System.String,System.Single)">
      <summary>
Changes the parameters of the voice. The available parameters are: 

 	 pitchShift: applies a pitch shifting to the voice. The value indicates the ratio between the new fundamental frequencies and the old ones (examples: 2.0: an octave above, 1.5: a quint above). Correct range is (1.0 -- 4), or 0 to disable effect.

 	 doubleVoice: adds a second voice to the first one. The value indicates the ratio between the second voice fundamental frequency and the first one. Correct range is (1.0 -- 4), or 0 to disable effect 

 	 doubleVoiceLevel: the corresponding value is the level of the double voice (1.0: equal to the main voice one). Correct range is (0 -- 4). 

 	 doubleVoiceTimeShift: the corresponding value is the delay between the double voice and the main one. Correct range is (0 -- 0.5) 

 If the effect value is not available, the effect parameter remains unchanged.
</summary>
      <param name="pEffectName"> Name of the parameter. </param>
      <param name="pEffectValue"> Value of the parameter. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.setLanguage(System.String)">
      <summary>
Changes the language used by the Text-to-Speech engine. It automatically changes the voice used since each of them is related to a unique language. If you want that change to take effect automatically after reboot of your robot, refer to the robot web page (setting page).
</summary>
      <param name="pLanguage"> Language name. Must belong to the languages available in TTS (can be obtained with the getAvailableLanguages method).  It should be an identifier std::string. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.sayToFileAndPlay(System.String)">
      <summary>
This method performs the text-to-speech operations: it takes a std::string, outputs the synthesis resulting audio signal in a file, and then plays the audio file. The file is deleted afterwards. It is useful when you want to perform a short synthesis, when few CPU is available. Do not use it if you want a low-latency synthesis or to synthesize a long std::string.
</summary>
      <param name="pStringToSay"> Text to say, encoded in UTF-8. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.sayToFile(System.String,System.String)">
      <summary>
Performs the text-to-speech operations: it takes a std::string as input and outputs the corresponding audio signal in the specified file.
</summary>
      <param name="pStringToSay"> Text to say, encoded in UTF-8. </param>
      <param name="pFileName"> RAW file where to store the generated signal. The signal is encoded with a sample rate of 22050Hz, format S16_LE, 2 channels. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.say(System.String)">
      <summary>
Performs the text-to-speech operations : it takes a std::string as input and outputs a sound in both speakers. It logs an error if the std::string is empty. String encoding must be UTF8.
</summary>
      <param name="stringToSay"> Text to say, encoded in UTF-8. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.loadVoicePreference(System.String)">
      <summary>
Loads a set of voice parameters defined in a xml file contained in the preferences folder.The name of the xml file must begin with ALTextToSpeech_Voice_
</summary>
      <param name="pPreferenceName"> Name of the voice preference. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.enableNotifications">
      <summary>
Enables the notifications puted in ALMemory during the synthesis (TextStarted, TextDone, CurrentBookMark, CurrentWord, ...)
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.disableNotifications">
      <summary>
Disables the notifications puted in ALMemory during the synthesis (TextStarted, TextDone, CurrentBookMark, CurrentWord, ...)
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.PostHelper.#ctor(AL.ALTextToSpeechProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.TextToSpeechProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.stopAll">
      <summary>
This method stops the current and all the pending tasks immediately.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.setVolume(System.Single)">
      <summary>
Sets the volume of text-to-speech output.
</summary>
      <param name="volume"> Volume (between 0.0 and 1.0). </param>
      <example>
        <code lang="python">
tts = ALProxy("ALTextToSpeech")
#Changes the volume
tts.setVolume(0.5)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.setVoice(System.String)">
      <summary>
Changes the voice used by the text-to-speech engine. The voice identifier must belong to the installed voices, that can be listed using the 'getAvailableVoices' method. If the voice is not available, it remains unchanged. No exception is thrown in this case. For the time being, only two voices are available by default : Kenny22Enhanced (English voice) and Julie22Enhanced (French voice)
</summary>
      <param name="pVoiceID"> The voice (as a std::string). </param>
      <example>
        <code lang="python">
tts = ALProxy("ALTextToSpeech")
#Sets the voice of the synthesis to the french voice Julie22Enhanced
tts.setVoice("Julie22Enhanced")
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.setParameter(System.String,System.Single)">
      <summary>
Changes the parameters of the voice. The available parameters are: 

 	 pitchShift: applies a pitch shifting to the voice. The value indicates the ratio between the new fundamental frequencies and the old ones (examples: 2.0: an octave above, 1.5: a quint above). Correct range is (1.0 -- 4), or 0 to disable effect.

 	 doubleVoice: adds a second voice to the first one. The value indicates the ratio between the second voice fundamental frequency and the first one. Correct range is (1.0 -- 4), or 0 to disable effect 

 	 doubleVoiceLevel: the corresponding value is the level of the double voice (1.0: equal to the main voice one). Correct range is (0 -- 4). 

 	 doubleVoiceTimeShift: the corresponding value is the delay between the double voice and the main one. Correct range is (0 -- 0.5) 

 If the effect value is not available, the effect parameter remains unchanged.
</summary>
      <param name="pEffectName"> Name of the parameter. </param>
      <param name="pEffectValue"> Value of the parameter. </param>
      <example>
        <code lang="python">
tts = ALProxy("ALTextToSpeech")
#Applies a pitch shifting to the voice
tts.setParameter("pitchShift", 1.5)
#Deactivates double voice
tts.setParameter("doubleVoice", 0.0)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.setLanguage(System.String)">
      <summary>
Changes the language used by the Text-to-Speech engine. It automatically changes the voice used since each of them is related to a unique language. If you want that change to take effect automatically after reboot of your robot, refer to the robot web page (setting page).
</summary>
      <param name="pLanguage"> Language name. Must belong to the languages available in TTS (can be obtained with the getAvailableLanguages method).  It should be an identifier std::string. </param>
      <example>
        <code lang="python">
#Sets the language to english
tts = ALProxy("ALTextToSpeech")
tts.setLanguage("English")
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.sayToFileAndPlay(System.String)">
      <summary>
This method performs the text-to-speech operations: it takes a std::string, outputs the synthesis resulting audio signal in a file, and then plays the audio file. The file is deleted afterwards. It is useful when you want to perform a short synthesis, when few CPU is available. Do not use it if you want a low-latency synthesis or to synthesize a long std::string.
</summary>
      <param name="pStringToSay"> Text to say, encoded in UTF-8. </param>
      <example>
        <code lang="python">
#Says a test std::string safely Vincent : pouquoi c'est plus safe, je comprends pas ! ?
tts = ALProxy("ALTextToSpeech")
tts.sayToFileAndPlay("This is a sample text.")
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.sayToFile(System.String,System.String)">
      <summary>
Performs the text-to-speech operations: it takes a std::string as input and outputs the corresponding audio signal in the specified file.
</summary>
      <param name="pStringToSay"> Text to say, encoded in UTF-8. </param>
      <param name="pFileName"> RAW file where to store the generated signal. The signal is encoded with a sample rate of 22050Hz, format S16_LE, 2 channels. </param>
      <example>
        <code lang="python">
#Says a test std::string, and save it into a file
tts = ALProxy("ALTextToSpeech")
tts.sayToFile("This is a sample text, written in a file!", "/tmp/sample_text.raw")
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.say(System.String)">
      <summary>
Performs the text-to-speech operations : it takes a std::string as input and outputs a sound in both speakers. It logs an error if the std::string is empty. String encoding must be UTF8.
</summary>
      <param name="stringToSay"> Text to say, encoded in UTF-8. </param>
      <example>
        <code lang="python">
#Says a test std::string
tts = ALProxy("ALTextToSpeech")
tts.say("This is a sample text!")
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.loadVoicePreference(System.String)">
      <summary>
Loads a set of voice parameters defined in a xml file contained in the preferences folder.The name of the xml file must begin with ALTextToSpeech_Voice_
</summary>
      <param name="pPreferenceName"> Name of the voice preference. </param>
      <example>
        <code lang="python">
tts = ALProxy("ALTextToSpeech")
//loads the set of voice parameters contained in the ALTextToSpeech_Voice_NaoOfficialVoiceEnglish.xml file
tts.loadVoicePreference("NaoOfficialVoiceEnglish");
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getVolume">
      <summary>
Fetches the current volume the text to speech.
</summary>
      <returns> Volume (integer between 0 and 100). </returns>
      <example>
        <code lang="python">
tts = ALProxy("ALTextToSpeech")
#Gets the volume
a= tts.getVolume()
print a
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getVoice">
      <summary>
Returns the voice currently used by the text-to-speech engine.
</summary>
      <returns> Name of the current voice </returns>
      <example>
        <code lang="python">
tts = ALProxy("ALTextToSpeech")
#Gets the current voice of the synthesis engine
voice = tts.getVoice()
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getParameter(System.String)">
      <summary>
Returns the value of one of the voice parameters. The available parameters are: \"pitchShift\", \"doubleVoice\",\"doubleVoiceLevel\" and \"doubleVoiceTimeShift\"
</summary>
      <param name="pParameterName"> Name of the parameter. </param>
      <returns> Value of the specified parameter </returns>
      <example>
        <code lang="python">
#Gets the value of the pitch shift and displays it
tts = ALProxy("ALTextToSpeech")
ps=tts.getParameter("pitchShift")
print ps
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getLanguageEncoding(System.String)">
      <summary>
Returns the encoding that should be used with the specified language.
</summary>
      <param name="pLanguage"> Language name (as a std::string). Must belong to the languages available in TTS. </param>
      <returns> Encoding of the specified language. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getLanguage">
      <summary>
Returns the language currently used by the text-to-speech engine.
</summary>
      <returns> Language of the current voice. </returns>
      <example>
        <code lang="python">
//gets the language of the current voice
tts = ALProxy("ALTextToSpeech")
lang = tts.getLanguage();
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getAvailableVoices">
      <summary>
Outputs the available voices. The returned list contains the voice IDs.
</summary>
      <returns> Array of std::string containing the voices installed on the system. </returns>
      <example>
        <code lang="python">
tts = ALProxy("ALTextToSpeech")
#Lists the installed voices
voicelist = tts.getAvailableVoices()
print voicelist
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.getAvailableLanguages">
      <summary>
Outputs the languages installed on the system.
</summary>
      <returns> Array of std::string that contains the languages installed on the system. </returns>
      <example>
        <code lang="python">
tts = ALProxy("ALTextToSpeech")
lang = tts.getAvailableLanguages();
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.enableNotifications">
      <summary>
Enables the notifications puted in ALMemory during the synthesis (TextStarted, TextDone, CurrentBookMark, CurrentWord, ...)
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.disableNotifications">
      <summary>
Disables the notifications puted in ALMemory during the synthesis (TextStarted, TextDone, CurrentBookMark, CurrentWord, ...)
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.TextToSpeechProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to TextToSpeech </summary>
      <remarks>This module embeds a speech synthetizer whose role is to convert text commands into sound waves that are then either sent to Nao's loudspeakers or written into a file. This service supports several languages and some parameters of the synthetizer can be tuned to change each language's synthetic voice.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
TextToSpeechProxy proxy = new TextToSpeechProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.TextToSpeechProxy">
      <summary>This module embeds a speech synthetizer whose role is to convert text commands into sound waves that are then either sent to Nao's loudspeakers or written into a file. This service supports several languages and some parameters of the synthetizer can be tuned to change each language's synthetic voice.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.PostHelper.#ctor(AL.ALLandMarkDetectionProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.LandMarkDetectionProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LandMarkDetectionProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to LandMarkDetection </summary>
      <remarks>ALLandMarkDetection is a module which detects and recognizes Naomarks. The output value is written in ALMemory in the LandmarkDetected variable.

 It contains an array of tags, with the following format: 

 

[ [timestamp_seconds, timestamp_microseconds], [mark_info_0, mark_info_1, .. , mark_info_N] ] 

 

with as many mark_info tags as marks currently detected. 

mark_info_x = [ [shape, alpha, beta, sizeX, sizeY, heading], [markID] ]. 

- alpha and beta represent the Naomark's location in terms of camera angles 

- sizeX and sizeY are the mark's size in camera angles 

- the heading angle describes how the Naomark is oriented about the vertical axis with regards to Nao's head. 

- Mark ID is the number written on the naomark and which corresponds to its pattern.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
LandMarkDetectionProxy proxy = new LandMarkDetectionProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.LandMarkDetectionProxy">
      <summary>ALLandMarkDetection is a module which detects and recognizes Naomarks. The output value is written in ALMemory in the LandmarkDetected variable.

 It contains an array of tags, with the following format: 

 

[ [timestamp_seconds, timestamp_microseconds], [mark_info_0, mark_info_1, .. , mark_info_N] ] 

 

with as many mark_info tags as marks currently detected. 

mark_info_x = [ [shape, alpha, beta, sizeX, sizeY, heading], [markID] ]. 

- alpha and beta represent the Naomark's location in terms of camera angles 

- sizeX and sizeY are the mark's size in camera angles 

- the heading angle describes how the Naomark is oriented about the vertical axis with regards to Nao's head. 

- Mark ID is the number written on the naomark and which corresponds to its pattern.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.wbSetEffectorControl(System.String,System.Object)">
      <summary>
UserFriendly Whole Body API: set new target for controlled effector. This is a non-blocking call.
</summary>
      <param name="effectorName"> Name of the effector : \"Head\", \"LArm\" or \"RArm\". Nao goes to posture init. He manages his balance and keep foot fix. \"Head\" is controlled in rotation. \"LArm\" and \"RArm\" are controlled in position. </param>
      <param name="targetCoordinate"> \"Head\" is controlled in rotation (WX, WY, WZ). \"LArm\" and \"RArm\" are controlled in position (X, Y, Z). TargetCoordinate must be absolute and expressed in FRAME_ROBOT. If the desired position/orientation is unfeasible, target is resize to the nearest feasible motion. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.wbGoToBalance(System.String,System.Single)">
      <summary>
Advanced Whole Body API: \"Com\" go to a desired support polygon. This is a blocking call.
</summary>
      <param name="supportLeg"> Name of the support leg: \"Legs\", \"LLeg\", \"RLeg\". </param>
      <param name="duration"> Time in seconds. Must be upper 0.5 s. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.wbFootState(System.String,System.String)">
      <summary>
UserFriendly Whole Body API: set the foot state: fixed foot, constrained in a plane or free.
</summary>
      <param name="stateName"> Name of the foot state. \"Fixed\" set the foot fixed. \"Plane\" constrained the Foot in the plane. \"Free\" set the foot free. </param>
      <param name="supportLeg"> Name of the foot. \"LLeg\", \"RLeg\" or \"Legs\". </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.wbEnableEffectorOptimization(System.String,System.Boolean)">
      <summary>
Advanced Whole Body API: enable to control an effector as an optimization.
</summary>
      <param name="effectorName"> Name of the effector : \"All\", \"Arms\", \"Legs\", \"Head\", \"LArm\", \"RArm\", \"LLeg\", \"RLeg\", \"Torso\", \"Com\". </param>
      <param name="isActive"> if true, the effector control is taken in acount in the optimization criteria. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.wbEnableEffectorControl(System.String,System.Boolean)">
      <summary>
UserFriendly Whole Body API: enable whole body cartesian control of an effector.
</summary>
      <param name="effectorName"> Name of the effector : \"Head\", \"LArm\" or \"RArm\". Nao goes to posture init. He manages his balance and keep foot fix. \"Head\" is controlled in rotation. \"LArm\" and \"RArm\" are controlled in position. </param>
      <param name="isEnabled"> Active / Disactive Effector Control. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.wbEnableBalanceConstraint(System.Boolean,System.String)">
      <summary>
UserFriendly Whole Body API: enable to keep balance in support polygon.
</summary>
      <param name="isEnable"> Enable Nao to keep balance. </param>
      <param name="supportLeg"> Name of the support leg: \"Legs\", \"LLeg\", \"RLeg\". </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.wbEnable(System.Boolean)">
      <summary>
UserFriendly Whole Body API: enable Whole Body Balancer. It's a Generalized Inverse Kinematics which deals with cartesian control, balance, redundancy and task priority. The main goal is to generate and stabilized consistent motions without precomputed trajectories and adapt nao's behaviour to the situation. The generalized inverse kinematic problem takes in account equality constraints (keep foot fix), inequality constraints (joint limits, balance, ...) and quadratic minimization (cartesian / articular desired trajectories). We solve each step a quadratic programming on the robot.
</summary>
      <param name="isEnabled"> Active / Disactive Whole Body Balancer. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.walkTo(System.Object,System.Object)">
      <summary>
DEPRECATED. Use moveTo() function instead.
</summary>
      <param name="controlPoint"> An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN] </param>
      <param name="feetGaitConfig"> An ALValue with the custom gait configuration for both feet </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.walkTo(System.Object)">
      <summary>
DEPRECATED. Use moveTo() function instead.
</summary>
      <param name="controlPoint"> An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN] </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.walkTo(System.Single,System.Single,System.Single,System.Object)">
      <summary>
DEPRECATED. Use moveTo() function instead.
</summary>
      <param name="x"> Distance along the X axis in meters. </param>
      <param name="y"> Distance along the Y axis in meters. </param>
      <param name="theta"> Rotation around the Z axis in radians [-3.1415 to 3.1415]. </param>
      <param name="feetGaitConfig"> An ALValue with the custom gait configuration for both feet. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.walkTo(System.Single,System.Single,System.Single)">
      <summary>
DEPRECATED. Use moveTo() function instead.
</summary>
      <param name="x"> Distance along the X axis in meters. </param>
      <param name="y"> Distance along the Y axis in meters. </param>
      <param name="theta"> Rotation around the Z axis in radians [-3.1415 to 3.1415]. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.walkInit">
      <summary>
DEPRECATED. Use moveInit function instead.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.wakeUp">
      <summary>
The robot will wake up: set Motor ON and go to initial position if needed
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.waitUntilWalkIsFinished">
      <summary>
DEPRECATED. Use waitUntilMoveIsFinished function instead.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.waitUntilMoveIsFinished">
      <summary>
Waits until the move process is finished: This method can be used to block your script/code execution until the move task is totally finished.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.updateTrackerTarget(System.Single,System.Single,System.Int32,System.Boolean)">
      <summary>
Update the target to follow by the head of NAO.

This function is mainly use by the tracker modules.
</summary>
      <param name="pTargetPositionWy"> The target position wy in FRAME_ROBOT </param>
      <param name="pTargetPositionWz"> The target position wz in  FRAME_ROBOT </param>
      <param name="pTimeSinceDetectionMs"> The time in Ms since the target was detected </param>
      <param name="pUseOfWholeBody"> If true, the target is follow in cartesian space by the Head with whole Body constraints. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.transformInterpolations(System.Collections.Generic.List`1{System.String},System.Int32,System.Object,System.Object,System.Object,System.Boolean)">
      <summary>
Moves end-effector to the given transforms over time. This is a blocking call.
</summary>
      <param name="effectorNames"> Vector of chain names. Could be: \"Head\", \"LArm\", \"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="taskSpaceForAllPaths"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="paths"> Vector of transforms arrays. </param>
      <param name="axisMasks"> Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <param name="relativeTimes"> Vector of times in seconds corresponding to the path points </param>
      <param name="isAbsolute"> If true, the movement is absolute else relative </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.transformInterpolation(System.String,System.Int32,System.Object,System.Int32,System.Object,System.Boolean)">
      <summary>
Moves an end-effector to the given position and orientation over time using homogenous transforms to describe the positions or changes. This is a blocking call.
</summary>
      <param name="chainName"> Name of the chain. Could be: \"Head\", \"LArm\",\"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="path"> Vector of Transform arrays </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <param name="duration"> Vector of times in seconds corresponding to the path points </param>
      <param name="isAbsolute"> If true, the movement is absolute else relative </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.stopWalk">
      <summary>
DEPRECATED. Use stopMove function instead.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.stopMove">
      <summary>
Stop Move task safely as fast as possible. The move task is ended less brutally than killMove but more quickly than move(0.0, 0.0, 0.0).

This is a blocking call.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.stiffnessInterpolation(System.Object,System.Object,System.Object)">
      <summary>
Interpolates one or multiple joints to a target stiffness or along timed trajectories of stiffness. This is a blocking call.
</summary>
      <param name="names"> Name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="stiffnessLists"> An stiffness, list of stiffnesses or list of list of stiffnesses </param>
      <param name="timeLists"> A time, list of times or list of list of times. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setWalkTargetVelocity(System.Single,System.Single,System.Single,System.Single,System.Object,System.Object)">
      <summary>
Makes Nao walk at the given velocity. This is a non-blocking call.
</summary>
      <param name="x"> Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0] </param>
      <param name="y"> Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0] </param>
      <param name="theta"> Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0] </param>
      <param name="frequency"> Fraction of MaxStepFrequency [0.0 to 1.0] </param>
      <param name="leftFootMoveConfig"> An ALValue with custom move configuration for the left foot </param>
      <param name="rightFootMoveConfig"> An ALValue with custom move configuration for the right foot </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setWalkTargetVelocity(System.Single,System.Single,System.Single,System.Single,System.Object)">
      <summary>
Makes Nao walk at the given velocity. This is a non-blocking call.
</summary>
      <param name="x"> Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0] </param>
      <param name="y"> Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0] </param>
      <param name="theta"> Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0] </param>
      <param name="frequency"> Fraction of MaxStepFrequency [0.0 to 1.0] </param>
      <param name="feetGaitConfig"> An ALValue with the custom gait configuration for both feet </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setWalkTargetVelocity(System.Single,System.Single,System.Single,System.Single)">
      <summary>
Makes Nao walk at the given velocity. This is a non-blocking call.
</summary>
      <param name="x"> Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0] </param>
      <param name="y"> Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0] </param>
      <param name="theta"> Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0] </param>
      <param name="frequency"> Fraction of MaxStepFrequency [0.0 to 1.0] </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setWalkArmsEnabled(System.Boolean,System.Boolean)">
      <summary>
Sets if Arms Motions are enabled during the Walk Process.
</summary>
      <param name="leftArmEnabled"> if true Left Arm motions are controlled by the Walk Task </param>
      <param name="rightArmEnabled"> if true Right Arm mMotions are controlled by the Walk Task </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setWalkArmsEnable(System.Boolean,System.Boolean)">
      <summary>
DEPRECATED Function. PLease use setWalkArmsEnabled().
</summary>
      <param name="leftArmEnable"> if true Left Arm motions are controlled by the Walk Task </param>
      <param name="rightArmEnable"> if true Right Arm mMotions are controlled by the Walk Task </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setTransform(System.String,System.Int32,System.Collections.Generic.List`1{System.Single},System.Single,System.Int32)">
      <summary>
Moves an end-effector to the given position and orientation transform. This is a non-blocking call.
</summary>
      <param name="chainName"> Name of the chain. Could be: \"Head\", \"LArm\",\"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="transform"> Transform arrays </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setStiffnesses(System.Object,System.Object)">
      <summary>
Sets the stiffness of one or more joints. This is a non-blocking call.
</summary>
      <param name="names"> Names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="stiffnesses"> One or more stiffnesses between zero and one. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setSmartStiffnessEnabled(System.Boolean)">
      <summary>
Enable Smart Stiffness for all the joints (True by default), the update take one motion cycle for updating. The smart Stiffness is a gestion of joint maximum torque. More description is available on the red documentation of ALMotion module.
</summary>
      <param name="pEnable"> Activate or disactivate the smart stiffness. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setPosition(System.String,System.Int32,System.Collections.Generic.List`1{System.Single},System.Single,System.Int32)">
      <summary>
Moves an end-effector to the given position and orientation. This is a non-blocking call.
</summary>
      <param name="chainName"> Name of the chain. Could be: \"Head\", \"LArm\",\"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="position"> 6D position array (x,y,z,wx,wy,wz) in meters and radians </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setMotionConfig(System.Object)">
      <summary>
Internal Use.
</summary>
      <param name="config"> Internal: An array of ALValues [i][0]: name, [i][1]: value </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setFootStepsWithSpeed(System.Collections.Generic.List`1{System.String},System.Object,System.Collections.Generic.List`1{System.Single},System.Boolean)">
      <summary>
Makes Nao do foot step planner with speed. This is a blocking call.
</summary>
      <param name="legName"> name of the leg to move('LLeg'or 'RLeg') </param>
      <param name="footSteps"> [x, y, theta], [Position along X/Y, Orientation round Z axis] of the leg relative to the other Leg in [meters, meters, radians]. Must be less than [MaxStepX, MaxStepY, MaxStepTheta] </param>
      <param name="fractionMaxSpeed"> speed of each foot step. Must be between 0 and 1. </param>
      <param name="clearExisting"> Clear existing foot steps. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setFootSteps(System.Collections.Generic.List`1{System.String},System.Object,System.Collections.Generic.List`1{System.Single},System.Boolean)">
      <summary>
Makes Nao do foot step planner. This is a non-blocking call.
</summary>
      <param name="legName"> name of the leg to move('LLeg'or 'RLeg') </param>
      <param name="footSteps"> [x, y, theta], [Position along X/Y, Orientation round Z axis] of the leg relative to the other Leg in [meters, meters, radians]. Must be less than [MaxStepX, MaxStepY, MaxStepTheta] </param>
      <param name="timeList"> time list of each foot step </param>
      <param name="clearExisting"> Clear existing foot steps. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setFallManagerEnabled(System.Boolean)">
      <summary>
Enable The fall manager protection for the robot. When a fall is detected the robot adopt a joint configuration to protect himself and cut the stiffness.

. An memory event called \"robotHasFallen\" is generated when the fallManager have been activated.
</summary>
      <param name="pEnable"> Activate or disactivate the smart stiffness. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.setAngles(System.Object,System.Object,System.Single)">
      <summary>
Sets angles. This is a non-blocking call.
</summary>
      <param name="names"> The name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="angles"> One or more angles in radians </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.rest">
      <summary>
The robot will rest: go to a relax and safe position and set Motor OFF
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.positionInterpolations(System.Collections.Generic.List`1{System.String},System.Int32,System.Object,System.Object,System.Object,System.Boolean)">
      <summary>
Moves end-effectors to the given positions and orientations over time. This is a blocking call.
</summary>
      <param name="effectorNames"> Vector of chain names. Could be: \"Head\", \"LArm\", \"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="taskSpaceForAllPaths"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="paths"> Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians </param>
      <param name="axisMasks"> Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <param name="relativeTimes"> Vector of times in seconds corresponding to the path points </param>
      <param name="isAbsolute"> If true, the movement is absolute else relative </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.positionInterpolation(System.String,System.Int32,System.Object,System.Int32,System.Object,System.Boolean)">
      <summary>
Moves an end-effector to the given position and orientation over time. This is a blocking call.
</summary>
      <param name="chainName"> Name of the chain. Could be: \"Head\", \"LArm\", \"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="path"> Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <param name="durations"> Vector of times in seconds corresponding to the path points </param>
      <param name="isAbsolute"> If true, the movement is absolute else relative </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.openHand(System.String)">
      <summary>
NAO stiffens the motors of desired hand. Then, he opens the hand, then cuts motor current to conserve energy. This is a blocking call.
</summary>
      <param name="handName"> The name of the hand. Could be: \"RHand or \"LHand\" </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.moveToward(System.Single,System.Single,System.Single,System.Object)">
      <summary>
Makes the robot move at the given normalized velocity. This is a non-blocking call.
</summary>
      <param name="x"> The normalized velocity along x axis (between -1 and 1). </param>
      <param name="y"> The normalized velocity along y axis (between -1 and 1). </param>
      <param name="theta"> The normalized velocity around z axis (between -1 and 1). </param>
      <param name="moveConfig"> An ALValue with custom move configuration. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.moveToward(System.Single,System.Single,System.Single)">
      <summary>
Makes the robot move at the given normalized velocity. This is a non-blocking call.
</summary>
      <param name="x"> The normalized velocity along x axis (between -1 and 1). </param>
      <param name="y"> The normalized velocity along y axis (between -1 and 1). </param>
      <param name="theta"> The normalized velocity around z axis (between -1 and 1). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.moveTo(System.Object,System.Object)">
      <summary>
Makes Nao move to the given relative Position. This is a blocking call.
</summary>
      <param name="controlPoint"> An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN] </param>
      <param name="feetGaitConfig"> An ALValue with the custom gait configuration for both feet </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.moveTo(System.Object)">
      <summary>
Makes Nao move to the given relative Position. This is a blocking call.
</summary>
      <param name="controlPoint"> An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN] </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.moveTo(System.Single,System.Single,System.Single,System.Object)">
      <summary>
Makes the robot move at the given position. This is a non-blocking call.
</summary>
      <param name="x"> The position along x axis [m.s-1]. </param>
      <param name="y"> The position along y axis [m.s-1]. </param>
      <param name="theta"> The position around z axis [rd.s-1]. </param>
      <param name="moveConfig"> An ALValue with custom move configuration. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.moveTo(System.Single,System.Single,System.Single)">
      <summary>
Makes the robot move at the given position. This is a non-blocking call.
</summary>
      <param name="x"> The position along x axis [m.s-1]. </param>
      <param name="y"> The position along y axis [m.s-1]. </param>
      <param name="theta"> The position around z axis [rd.s-1]. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.moveInit">
      <summary>
Initialize the move process. Check the robot pose and take a right posture. This is blocking called.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.move(System.Single,System.Single,System.Single,System.Object)">
      <summary>
Makes the robot move at the given velocity. This is a non-blocking call.
</summary>
      <param name="x"> The velocity along x axis [m.s-1]. </param>
      <param name="y"> The velocity along y axis [m.s-1]. </param>
      <param name="theta"> The velocity around z axis [rd.s-1]. </param>
      <param name="moveConfig"> An ALValue with custom move configuration. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.move(System.Single,System.Single,System.Single)">
      <summary>
Makes the robot move at the given velocity. This is a non-blocking call.
</summary>
      <param name="x"> The velocity along x axis [m.s-1]. </param>
      <param name="y"> The velocity along y axis [m.s-1]. </param>
      <param name="theta"> The velocity around z axis [rd.s-1]. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.killWalk">
      <summary>
DEPRECATED. Use killMove function instead.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.killTasksUsingResources(System.Collections.Generic.List`1{System.String})">
      <summary>
Kills all tasks that use any of the resources given. Only motion API's' blocking call takes resources and can be killed. Use getBodyNames(\"Body\") to have the list of the available joint for your robot.
</summary>
      <param name="resourceNames"> A vector of resource joint names </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.killMove">
      <summary>
Emergency Stop on Move task: This method will end the move task brutally, without attempting to return to a balanced state. The robot could easily fall.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.killAll">
      <summary>
Kills all tasks.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.closeHand(System.String)">
      <summary>
NAO stiffens the motors of desired hand. Then, he closes the hand, then cuts motor current to conserve energy. This is a blocking call.
</summary>
      <param name="handName"> The name of the hand. Could be: \"RHand\" or \"LHand\" </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.changeTransform(System.String,System.Int32,System.Collections.Generic.List`1{System.Single},System.Single,System.Int32)">
      <summary>
Moves an end-effector to the given position and orientation transform. This is a non-blocking call.
</summary>
      <param name="chainName"> Name of the chain. Could be: \"Head\", \"LArm\",\"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="transform"> Transform arrays </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.changePosition(System.String,System.Int32,System.Collections.Generic.List`1{System.Single},System.Single,System.Int32)">
      <summary>
Creates a move of an end effector in cartesian space. This is a non-blocking call.
</summary>
      <param name="effectorName"> Name of the effector. </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="positionChange"> 6D position change array (xd, yd, zd, wxd, wyd, wzd) in meters and radians </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.changeAngles(System.Object,System.Object,System.Single)">
      <summary>
Changes Angles. This is a non-blocking call.
</summary>
      <param name="names"> The name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="changes"> One or more changes in radians </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.angleInterpolationWithSpeed(System.Object,System.Object,System.Single)">
      <summary>
Interpolates one or multiple joints to a target angle, using a fraction of max speed. Only one target angle is allowed for each joint. This is a blocking call.
</summary>
      <param name="names"> Name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="targetAngles"> An angle, or list of angles in radians </param>
      <param name="maxSpeedFraction"> A fraction. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.angleInterpolationBezier(System.Collections.Generic.List`1{System.String},System.Object,System.Object)">
      <summary>
Interpolates a sequence of timed angles for several motors using bezier control points. This is a blocking call.
</summary>
      <param name="jointNames"> A vector of joint names </param>
      <param name="times"> An ragged ALValue matrix of floats. Each line corresponding to a motor, and column element to a control point. </param>
      <param name="controlPoints"> An ALValue array of arrays each containing [float angle, Handle1, Handle2], where Handle is [int InterpolationType, float dAngle, float dTime] descibing the handle offsets relative to the angle and time of the point. The first bezier param describes the handle that controls the curve preceeding the point, the second describes the curve following the point. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.angleInterpolation(System.Object,System.Object,System.Object,System.Boolean)">
      <summary>
Interpolates one or multiple joints to a target angle or along timed trajectories. This is a blocking call.
</summary>
      <param name="names"> Name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="angleLists"> An angle, list of angles or list of list of angles in radians </param>
      <param name="timeLists"> A time, list of times or list of list of times in seconds </param>
      <param name="isAbsolute"> If true, the movement is described in absolute angles, else the angles are relative to the current angle. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.PostHelper.#ctor(AL.ALMotionProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.MotionProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.wbSetEffectorControl(System.String,System.Object)">
      <summary>
UserFriendly Whole Body API: set new target for controlled effector. This is a non-blocking call.
</summary>
      <param name="effectorName"> Name of the effector : \"Head\", \"LArm\" or \"RArm\". Nao goes to posture init. He manages his balance and keep foot fix. \"Head\" is controlled in rotation. \"LArm\" and \"RArm\" are controlled in position. </param>
      <param name="targetCoordinate"> \"Head\" is controlled in rotation (WX, WY, WZ). \"LArm\" and \"RArm\" are controlled in position (X, Y, Z). TargetCoordinate must be absolute and expressed in FRAME_ROBOT. If the desired position/orientation is unfeasible, target is resize to the nearest feasible motion. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.wbGoToBalance(System.String,System.Single)">
      <summary>
Advanced Whole Body API: \"Com\" go to a desired support polygon. This is a blocking call.
</summary>
      <param name="supportLeg"> Name of the support leg: \"Legs\", \"LLeg\", \"RLeg\". </param>
      <param name="duration"> Time in seconds. Must be upper 0.5 s. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.wbFootState(System.String,System.String)">
      <summary>
UserFriendly Whole Body API: set the foot state: fixed foot, constrained in a plane or free.
</summary>
      <param name="stateName"> Name of the foot state. \"Fixed\" set the foot fixed. \"Plane\" constrained the Foot in the plane. \"Free\" set the foot free. </param>
      <param name="supportLeg"> Name of the foot. \"LLeg\", \"RLeg\" or \"Legs\". </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.wbEnableEffectorOptimization(System.String,System.Boolean)">
      <summary>
Advanced Whole Body API: enable to control an effector as an optimization.
</summary>
      <param name="effectorName"> Name of the effector : \"All\", \"Arms\", \"Legs\", \"Head\", \"LArm\", \"RArm\", \"LLeg\", \"RLeg\", \"Torso\", \"Com\". </param>
      <param name="isActive"> if true, the effector control is taken in acount in the optimization criteria. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.wbEnableEffectorControl(System.String,System.Boolean)">
      <summary>
UserFriendly Whole Body API: enable whole body cartesian control of an effector.
</summary>
      <param name="effectorName"> Name of the effector : \"Head\", \"LArm\" or \"RArm\". Nao goes to posture init. He manages his balance and keep foot fix. \"Head\" is controlled in rotation. \"LArm\" and \"RArm\" are controlled in position. </param>
      <param name="isEnabled"> Active / Disactive Effector Control. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.wbEnableBalanceConstraint(System.Boolean,System.String)">
      <summary>
UserFriendly Whole Body API: enable to keep balance in support polygon.
</summary>
      <param name="isEnable"> Enable Nao to keep balance. </param>
      <param name="supportLeg"> Name of the support leg: \"Legs\", \"LLeg\", \"RLeg\". </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.wbEnable(System.Boolean)">
      <summary>
UserFriendly Whole Body API: enable Whole Body Balancer. It's a Generalized Inverse Kinematics which deals with cartesian control, balance, redundancy and task priority. The main goal is to generate and stabilized consistent motions without precomputed trajectories and adapt nao's behaviour to the situation. The generalized inverse kinematic problem takes in account equality constraints (keep foot fix), inequality constraints (joint limits, balance, ...) and quadratic minimization (cartesian / articular desired trajectories). We solve each step a quadratic programming on the robot.
</summary>
      <param name="isEnabled"> Active / Disactive Whole Body Balancer. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.walkTo(System.Object,System.Object)">
      <summary>
DEPRECATED. Use moveTo() function instead.
</summary>
      <param name="controlPoint"> An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN] </param>
      <param name="feetGaitConfig"> An ALValue with the custom gait configuration for both feet </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.walkTo(System.Object)">
      <summary>
DEPRECATED. Use moveTo() function instead.
</summary>
      <param name="controlPoint"> An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN] </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.walkTo(System.Single,System.Single,System.Single,System.Object)">
      <summary>
DEPRECATED. Use moveTo() function instead.
</summary>
      <param name="x"> Distance along the X axis in meters. </param>
      <param name="y"> Distance along the Y axis in meters. </param>
      <param name="theta"> Rotation around the Z axis in radians [-3.1415 to 3.1415]. </param>
      <param name="feetGaitConfig"> An ALValue with the custom gait configuration for both feet. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.walkTo(System.Single,System.Single,System.Single)">
      <summary>
DEPRECATED. Use moveTo() function instead.
</summary>
      <param name="x"> Distance along the X axis in meters. </param>
      <param name="y"> Distance along the Y axis in meters. </param>
      <param name="theta"> Rotation around the Z axis in radians [-3.1415 to 3.1415]. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.walkIsActive">
      <summary>
DEPRECATED. Use moveIsActive function instead.
</summary>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.walkInit">
      <summary>
DEPRECATED. Use moveInit function instead.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.wakeUp">
      <summary>
The robot will wake up: set Motor ON and go to initial position if needed
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.waitUntilWalkIsFinished">
      <summary>
DEPRECATED. Use waitUntilMoveIsFinished function instead.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.waitUntilMoveIsFinished">
      <summary>
Waits until the move process is finished: This method can be used to block your script/code execution until the move task is totally finished.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.updateTrackerTarget(System.Single,System.Single,System.Int32,System.Boolean)">
      <summary>
Update the target to follow by the head of NAO.

This function is mainly use by the tracker modules.
</summary>
      <param name="pTargetPositionWy"> The target position wy in FRAME_ROBOT </param>
      <param name="pTargetPositionWz"> The target position wz in  FRAME_ROBOT </param>
      <param name="pTimeSinceDetectionMs"> The time in Ms since the target was detected </param>
      <param name="pUseOfWholeBody"> If true, the target is follow in cartesian space by the Head with whole Body constraints. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.transformInterpolations(System.Collections.Generic.List`1{System.String},System.Int32,System.Object,System.Object,System.Object,System.Boolean)">
      <summary>
Moves end-effector to the given transforms over time. This is a blocking call.
</summary>
      <param name="effectorNames"> Vector of chain names. Could be: \"Head\", \"LArm\", \"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="taskSpaceForAllPaths"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="paths"> Vector of transforms arrays. </param>
      <param name="axisMasks"> Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <param name="relativeTimes"> Vector of times in seconds corresponding to the path points </param>
      <param name="isAbsolute"> If true, the movement is absolute else relative </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.transformInterpolation(System.String,System.Int32,System.Object,System.Int32,System.Object,System.Boolean)">
      <summary>
Moves an end-effector to the given position and orientation over time using homogenous transforms to describe the positions or changes. This is a blocking call.
</summary>
      <param name="chainName"> Name of the chain. Could be: \"Head\", \"LArm\",\"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="path"> Vector of Transform arrays </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <param name="duration"> Vector of times in seconds corresponding to the path points </param>
      <param name="isAbsolute"> If true, the movement is absolute else relative </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.stopWalk">
      <summary>
DEPRECATED. Use stopMove function instead.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.stopMove">
      <summary>
Stop Move task safely as fast as possible. The move task is ended less brutally than killMove but more quickly than move(0.0, 0.0, 0.0).

This is a blocking call.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.stiffnessInterpolation(System.Object,System.Object,System.Object)">
      <summary>
Interpolates one or multiple joints to a target stiffness or along timed trajectories of stiffness. This is a blocking call.
</summary>
      <param name="names"> Name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="stiffnessLists"> An stiffness, list of stiffnesses or list of list of stiffnesses </param>
      <param name="timeLists"> A time, list of times or list of list of times. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setWalkTargetVelocity(System.Single,System.Single,System.Single,System.Single,System.Object,System.Object)">
      <summary>
Makes Nao walk at the given velocity. This is a non-blocking call.
</summary>
      <param name="x"> Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0] </param>
      <param name="y"> Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0] </param>
      <param name="theta"> Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0] </param>
      <param name="frequency"> Fraction of MaxStepFrequency [0.0 to 1.0] </param>
      <param name="leftFootMoveConfig"> An ALValue with custom move configuration for the left foot </param>
      <param name="rightFootMoveConfig"> An ALValue with custom move configuration for the right foot </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setWalkTargetVelocity(System.Single,System.Single,System.Single,System.Single,System.Object)">
      <summary>
Makes Nao walk at the given velocity. This is a non-blocking call.
</summary>
      <param name="x"> Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0] </param>
      <param name="y"> Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0] </param>
      <param name="theta"> Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0] </param>
      <param name="frequency"> Fraction of MaxStepFrequency [0.0 to 1.0] </param>
      <param name="feetGaitConfig"> An ALValue with the custom gait configuration for both feet </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setWalkTargetVelocity(System.Single,System.Single,System.Single,System.Single)">
      <summary>
Makes Nao walk at the given velocity. This is a non-blocking call.
</summary>
      <param name="x"> Fraction of MaxStepX. Use negative for backwards. [-1.0 to 1.0] </param>
      <param name="y"> Fraction of MaxStepY. Use negative for right. [-1.0 to 1.0] </param>
      <param name="theta"> Fraction of MaxStepTheta. Use negative for clockwise [-1.0 to 1.0] </param>
      <param name="frequency"> Fraction of MaxStepFrequency [0.0 to 1.0] </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setWalkArmsEnabled(System.Boolean,System.Boolean)">
      <summary>
Sets if Arms Motions are enabled during the Walk Process.
</summary>
      <param name="leftArmEnabled"> if true Left Arm motions are controlled by the Walk Task </param>
      <param name="rightArmEnabled"> if true Right Arm mMotions are controlled by the Walk Task </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setWalkArmsEnable(System.Boolean,System.Boolean)">
      <summary>
DEPRECATED Function. PLease use setWalkArmsEnabled().
</summary>
      <param name="leftArmEnable"> if true Left Arm motions are controlled by the Walk Task </param>
      <param name="rightArmEnable"> if true Right Arm mMotions are controlled by the Walk Task </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setTransform(System.String,System.Int32,System.Collections.Generic.List`1{System.Single},System.Single,System.Int32)">
      <summary>
Moves an end-effector to the given position and orientation transform. This is a non-blocking call.
</summary>
      <param name="chainName"> Name of the chain. Could be: \"Head\", \"LArm\",\"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="transform"> Transform arrays </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setStiffnesses(System.Object,System.Object)">
      <summary>
Sets the stiffness of one or more joints. This is a non-blocking call.
</summary>
      <param name="names"> Names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="stiffnesses"> One or more stiffnesses between zero and one. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setSmartStiffnessEnabled(System.Boolean)">
      <summary>
Enable Smart Stiffness for all the joints (True by default), the update take one motion cycle for updating. The smart Stiffness is a gestion of joint maximum torque. More description is available on the red documentation of ALMotion module.
</summary>
      <param name="pEnable"> Activate or disactivate the smart stiffness. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setPosition(System.String,System.Int32,System.Collections.Generic.List`1{System.Single},System.Single,System.Int32)">
      <summary>
Moves an end-effector to the given position and orientation. This is a non-blocking call.
</summary>
      <param name="chainName"> Name of the chain. Could be: \"Head\", \"LArm\",\"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="position"> 6D position array (x,y,z,wx,wy,wz) in meters and radians </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setMotionConfig(System.Object)">
      <summary>
Internal Use.
</summary>
      <param name="config"> Internal: An array of ALValues [i][0]: name, [i][1]: value </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setFootStepsWithSpeed(System.Collections.Generic.List`1{System.String},System.Object,System.Collections.Generic.List`1{System.Single},System.Boolean)">
      <summary>
Makes Nao do foot step planner with speed. This is a blocking call.
</summary>
      <param name="legName"> name of the leg to move('LLeg'or 'RLeg') </param>
      <param name="footSteps"> [x, y, theta], [Position along X/Y, Orientation round Z axis] of the leg relative to the other Leg in [meters, meters, radians]. Must be less than [MaxStepX, MaxStepY, MaxStepTheta] </param>
      <param name="fractionMaxSpeed"> speed of each foot step. Must be between 0 and 1. </param>
      <param name="clearExisting"> Clear existing foot steps. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setFootSteps(System.Collections.Generic.List`1{System.String},System.Object,System.Collections.Generic.List`1{System.Single},System.Boolean)">
      <summary>
Makes Nao do foot step planner. This is a non-blocking call.
</summary>
      <param name="legName"> name of the leg to move('LLeg'or 'RLeg') </param>
      <param name="footSteps"> [x, y, theta], [Position along X/Y, Orientation round Z axis] of the leg relative to the other Leg in [meters, meters, radians]. Must be less than [MaxStepX, MaxStepY, MaxStepTheta] </param>
      <param name="timeList"> time list of each foot step </param>
      <param name="clearExisting"> Clear existing foot steps. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setFallManagerEnabled(System.Boolean)">
      <summary>
Enable The fall manager protection for the robot. When a fall is detected the robot adopt a joint configuration to protect himself and cut the stiffness.

. An memory event called \"robotHasFallen\" is generated when the fallManager have been activated.
</summary>
      <param name="pEnable"> Activate or disactivate the smart stiffness. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setCollisionProtectionEnabled(System.String,System.Boolean)">
      <summary>
Enable Anticollision protection of the arms of the robot. Use api isCollision to know if a chain is in collision and can be disactivated.
</summary>
      <param name="pChainName"> The chain name {\"Arms\", \"LArm\" or \"RArm\"}. </param>
      <param name="pEnable"> Activate or disactivate the anticollision of the desired Chain. </param>
      <returns> A bool which return always true. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.setAngles(System.Object,System.Object,System.Single)">
      <summary>
Sets angles. This is a non-blocking call.
</summary>
      <param name="names"> The name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="angles"> One or more angles in radians </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.robotIsWakeUp">
      <summary>
return true if the robot is already wakeUp
</summary>
      <returns> True if the robot is already wakeUp. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.rest">
      <summary>
The robot will rest: go to a relax and safe position and set Motor OFF
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.positionInterpolations(System.Collections.Generic.List`1{System.String},System.Int32,System.Object,System.Object,System.Object,System.Boolean)">
      <summary>
Moves end-effectors to the given positions and orientations over time. This is a blocking call.
</summary>
      <param name="effectorNames"> Vector of chain names. Could be: \"Head\", \"LArm\", \"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="taskSpaceForAllPaths"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="paths"> Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians </param>
      <param name="axisMasks"> Vector of Axis Masks. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <param name="relativeTimes"> Vector of times in seconds corresponding to the path points </param>
      <param name="isAbsolute"> If true, the movement is absolute else relative </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.positionInterpolation(System.String,System.Int32,System.Object,System.Int32,System.Object,System.Boolean)">
      <summary>
Moves an end-effector to the given position and orientation over time. This is a blocking call.
</summary>
      <param name="chainName"> Name of the chain. Could be: \"Head\", \"LArm\", \"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="path"> Vector of 6D position arrays (x,y,z,wx,wy,wz) in meters and radians </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
      <param name="durations"> Vector of times in seconds corresponding to the path points </param>
      <param name="isAbsolute"> If true, the movement is absolute else relative </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.openHand(System.String)">
      <summary>
NAO stiffens the motors of desired hand. Then, he opens the hand, then cuts motor current to conserve energy. This is a blocking call.
</summary>
      <param name="handName"> The name of the hand. Could be: \"RHand or \"LHand\" </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.moveToward(System.Single,System.Single,System.Single,System.Object)">
      <summary>
Makes the robot move at the given normalized velocity. This is a non-blocking call.
</summary>
      <param name="x"> The normalized velocity along x axis (between -1 and 1). </param>
      <param name="y"> The normalized velocity along y axis (between -1 and 1). </param>
      <param name="theta"> The normalized velocity around z axis (between -1 and 1). </param>
      <param name="moveConfig"> An ALValue with custom move configuration. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.moveToward(System.Single,System.Single,System.Single)">
      <summary>
Makes the robot move at the given normalized velocity. This is a non-blocking call.
</summary>
      <param name="x"> The normalized velocity along x axis (between -1 and 1). </param>
      <param name="y"> The normalized velocity along y axis (between -1 and 1). </param>
      <param name="theta"> The normalized velocity around z axis (between -1 and 1). </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.moveTo(System.Object,System.Object)">
      <summary>
Makes Nao move to the given relative Position. This is a blocking call.
</summary>
      <param name="controlPoint"> An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN] </param>
      <param name="feetGaitConfig"> An ALValue with the custom gait configuration for both feet </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.moveTo(System.Object)">
      <summary>
Makes Nao move to the given relative Position. This is a blocking call.
</summary>
      <param name="controlPoint"> An ALValue with all the control point in NAO SPACE[[x1,y1,theta1], ..., [xN,yN,thetaN] </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.moveTo(System.Single,System.Single,System.Single,System.Object)">
      <summary>
Makes the robot move at the given position. This is a non-blocking call.
</summary>
      <param name="x"> The position along x axis [m.s-1]. </param>
      <param name="y"> The position along y axis [m.s-1]. </param>
      <param name="theta"> The position around z axis [rd.s-1]. </param>
      <param name="moveConfig"> An ALValue with custom move configuration. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.moveTo(System.Single,System.Single,System.Single)">
      <summary>
Makes the robot move at the given position. This is a non-blocking call.
</summary>
      <param name="x"> The position along x axis [m.s-1]. </param>
      <param name="y"> The position along y axis [m.s-1]. </param>
      <param name="theta"> The position around z axis [rd.s-1]. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.moveIsActive">
      <summary>
Check if the move process is actif.
</summary>
      <returns> True if move is active </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.moveInit">
      <summary>
Initialize the move process. Check the robot pose and take a right posture. This is blocking called.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.move(System.Single,System.Single,System.Single,System.Object)">
      <summary>
Makes the robot move at the given velocity. This is a non-blocking call.
</summary>
      <param name="x"> The velocity along x axis [m.s-1]. </param>
      <param name="y"> The velocity along y axis [m.s-1]. </param>
      <param name="theta"> The velocity around z axis [rd.s-1]. </param>
      <param name="moveConfig"> An ALValue with custom move configuration. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.move(System.Single,System.Single,System.Single)">
      <summary>
Makes the robot move at the given velocity. This is a non-blocking call.
</summary>
      <param name="x"> The velocity along x axis [m.s-1]. </param>
      <param name="y"> The velocity along y axis [m.s-1]. </param>
      <param name="theta"> The velocity around z axis [rd.s-1]. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.killWalk">
      <summary>
DEPRECATED. Use killMove function instead.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.killTasksUsingResources(System.Collections.Generic.List`1{System.String})">
      <summary>
Kills all tasks that use any of the resources given. Only motion API's' blocking call takes resources and can be killed. Use getBodyNames(\"Body\") to have the list of the available joint for your robot.
</summary>
      <param name="resourceNames"> A vector of resource joint names </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.killTask(System.Int32)">
      <summary>
Kills a motion task.
</summary>
      <param name="motionTaskID"> TaskID of the motion task you want to kill. </param>
      <returns> Return true if the specified motionTaskId has been killed. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.killMove">
      <summary>
Emergency Stop on Move task: This method will end the move task brutally, without attempting to return to a balanced state. The robot could easily fall.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.killAll">
      <summary>
Kills all tasks.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.isCollision(System.String)">
      <summary>
Give the collision state of a chain. If a chain has a collision state \"none\" or \"near\", it could be desactivated.
</summary>
      <param name="pChainName"> The chain name {\"Arms\", \"LArm\" or \"RArm\"}. </param>
      <returns> A string which notice the collision state: \"none\" there are no collision, \"near\" the collision is taking in account in the anti-collision algorithm, \"collision\" the chain is in contact with an other body. If the chain asked is \"Arms\" the most unfavorable result is given. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getWalkArmsEnabled">
      <summary>
Gets if Arms Motions are enabled during the Walk Process.
</summary>
      <returns> True Arm Motions are controlled by the Walk Task. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getWalkArmsEnable">
      <summary>
DEPRECATED Function. PLease use getWalkArmsEnabled().
</summary>
      <returns> True Arm Motions are controlled by the Walk Task. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getTransform(System.String,System.Int32,System.Boolean)">
      <summary>
Gets an Homogenous Transform relative to the TASK_SPACE. Axis definition: the x axis is positive toward Nao's front, the y from right to left and the z is vertical.
</summary>
      <param name="name"> Name of the item. Could be: any joint or chain or sensor (Head, LArm, RArm, LLeg, RLeg, Torso, HeadYaw, ..., CameraTop, CameraBottom, MicroFront, MicroRear, MicroLeft, MicroRight, Accelerometer, Gyrometer, Laser, LFsrFR, LFsrFL, LFsrRR, LFsrRL, RFsrFR, RFsrFL, RFsrRR, RFsrRL, USSensor1, USSensor2, USSensor3, USSensor4. Use getSensorNames for the list of sensors supported on your robot. </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="useSensorValues"> If true, the sensor values will be used to determine the position. </param>
      <returns> Vector of 16 floats corresponding to the values of the matrix, line by line. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getTaskList">
      <summary>
Gets an ALValue structure describing the tasks in the Task List
</summary>
      <returns> An ALValue containing an ALValue for each task. The inner ALValue contains: Name, MotionID </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getSummary">
      <summary>
Returns a string representation of the Model's state
</summary>
      <returns> A formated string </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getStiffnesses(System.Object)">
      <summary>
Gets stiffness of a joint or group of joints
</summary>
      <param name="jointName"> Name of the joints, chains, \"Body\", \"Joints\" or \"Actuators\". </param>
      <returns> One or more stiffnesses. 1.0 indicates maximum stiffness. 0.0 indicated minimum stiffness </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getSmartStiffnessEnabled">
      <summary>
Give the state of the smart Stiffness.
</summary>
      <returns> Return true is the smart Stiffnes is activated. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getSensorNames">
      <summary>
Gets the list of sensors supported on your robot.
</summary>
      <returns> Vector of sensor names </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getRobotVelocity">
      <summary>
Gets the World Absolute Robot Velocity.
</summary>
      <returns> A vector containing the World Absolute Robot Velocity. (Absolute Velocity Translation X [m.s-1], Absolute Velocity Translation Y[m.s-1], Absolute Velocity Rotation WZ [rd.s-1]) </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getRobotPosition(System.Boolean)">
      <summary>
Gets the World Absolute Robot Position.
</summary>
      <param name="useSensors"> If true, use the sensor values </param>
      <returns> A vector containing the World Absolute Robot Position. (Absolute Position X, Absolute Position Y, Absolute Angle Z) </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getRobotConfig">
      <summary>
Get the robot configuration.
</summary>
      <returns> ALValue arrays containing the robot parameter names and the robot parameter values. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getPosition(System.String,System.Int32,System.Boolean)">
      <summary>
Gets a Position relative to the TASK_SPACE. Axis definition: the x axis is positive toward Nao's front, the y from right to left and the z is vertical. The angle convention of Position6D is Rot_z(wz).Rot_y(wy).Rot_x(wx).
</summary>
      <param name="name"> Name of the item. Could be: Head, LArm, RArm, LLeg, RLeg, Torso, CameraTop, CameraBottom, MicroFront, MicroRear, MicroLeft, MicroRight, Accelerometer, Gyrometer, Laser, LFsrFR, LFsrFL, LFsrRR, LFsrRL, RFsrFR, RFsrFL, RFsrRR, RFsrRL, USSensor1, USSensor2, USSensor3, USSensor4. Use getSensorNames for the list of sensors supported on your robot. </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="useSensorValues"> If true, the sensor values will be used to determine the position. </param>
      <returns> Vector containing the Position6D using meters and radians (x, y, z, wx, wy, wz) </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getNextRobotPosition">
      <summary>
Gets the World Absolute next Robot Position.

In fact in the walk algorithm some foot futur foot step are incompressible due to previewcontrol, so this function give the next robot position which is incompressible.

If the robot doesn't walk this function is equivalent to getRobotPosition(false)
</summary>
      <returns> A vector containing the World Absolute next Robot position.(Absolute Position X, Absolute Position Y, Absolute Angle Z) </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getMoveConfig(System.String)">
      <summary>
Gets the move config.
</summary>
      <param name="config"> a string should be \"Max\", \"Min\", \"Default\" </param>
      <returns> An ALvalue with the move config </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getMotionCycleTime">
      <summary>
Get the motion cycle time in milliseconds.
</summary>
      <returns> Expressed in milliseconds </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getMass(System.String)">
      <summary>
Gets the mass of a joint, chain, \"Body\" or \"Joints\".
</summary>
      <param name="pName"> Name of the body which we want the mass. \"Body\", \"Joints\" and \"Com\" give the total mass of nao. For the chain, it gives the total mass of the chain. </param>
      <returns> The mass in kg. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getLimits(System.String)">
      <summary>
Get the minAngle (rad), maxAngle (rad), and maxVelocity (rad.s-1) for a given joint or actuator in the body.
</summary>
      <param name="name"> Name of a joint, chain, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <returns> Array of ALValue arrays containing the minAngle, maxAngle, maxVelocity and maxTorque for all the bodies specified. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getJointNames(System.String)">
      <summary>
DEPRECATED. Use getBodyNames function instead.
</summary>
      <param name="name"> Name of a chain, \"Arms\", \"Legs\", \"Body\", \"Chains\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <returns> Vector of strings, one for each joint in the collection </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getFootSteps">
      <summary>
Get the foot steps. This is a non-blocking call.
</summary>
      <returns> Give two list of foot steps. The first one give the unchangeable foot step. The second list give the changeable foot steps. Il you use setFootSteps or setFootStepsWithSpeed with clearExisting parmater equal true, walk engine execute unchangeable foot step and remove the other. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getFootGaitConfig(System.String)">
      <summary>
DEPRECATED. Use getMoveConfig function instead.

Gets the foot Gait config (\"MaxStepX\", \"MaxStepY\", \"MaxStepTheta\",  \"MaxStepFrequency\", \"StepHeight\", \"TorsoWx\", \"TorsoWy\")
</summary>
      <param name="config"> a string should be \"Max\", \"Min\", \"Default\" </param>
      <returns> An ALvalue with the following form :[[\"MaxStepX\", value],

 [\"MaxStepY\", value],

 [\"MaxStepTheta\", value],

 [\"MaxStepFrequency\", value],

 [\"StepHeight\", value],

 [\"TorsoWx\", value],

 [\"TorsoWy\", value]] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getFallManagerEnabled">
      <summary>
Give the state of the fall manager.
</summary>
      <returns> Return true is the fall manager is activated. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getCollisionProtectionEnabled(System.String)">
      <summary>
Allow to know if the collision protection is activated on the given chain.
</summary>
      <param name="pChainName"> The chain name {\"LArm\" or \"RArm\"}. </param>
      <returns> Return true is the collision protection of the given Arm is activated. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getCOM(System.String,System.Int32,System.Boolean)">
      <summary>
Gets the COM of a joint, chain, \"Body\" or \"Joints\".
</summary>
      <param name="pName"> Name of the body which we want the mass. In chain name case, this function give the com of the chain. </param>
      <param name="pSpace"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="pUseSensorValues"> If true, the sensor values will be used to determine the position. </param>
      <returns> The COM position (meter). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getBodyNames(System.String)">
      <summary>
Gets the names of all the joints and actuators in the collection.
</summary>
      <param name="name"> Name of a chain, \"Arms\", \"Legs\", \"Body\", \"Chains\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <returns> Vector of strings, one for each joint and actuator in the collection </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.getAngles(System.Object,System.Boolean)">
      <summary>
Gets the angles of the joints
</summary>
      <param name="names"> Names the joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="useSensors"> If true, sensor angles will be returned </param>
      <returns> Joint angles in radians. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.closeHand(System.String)">
      <summary>
NAO stiffens the motors of desired hand. Then, he closes the hand, then cuts motor current to conserve energy. This is a blocking call.
</summary>
      <param name="handName"> The name of the hand. Could be: \"RHand\" or \"LHand\" </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.changeTransform(System.String,System.Int32,System.Collections.Generic.List`1{System.Single},System.Single,System.Int32)">
      <summary>
Moves an end-effector to the given position and orientation transform. This is a non-blocking call.
</summary>
      <param name="chainName"> Name of the chain. Could be: \"Head\", \"LArm\",\"RArm\", \"LLeg\", \"RLeg\", \"Torso\" </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="transform"> Transform arrays </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.changePosition(System.String,System.Int32,System.Collections.Generic.List`1{System.Single},System.Single,System.Int32)">
      <summary>
Creates a move of an end effector in cartesian space. This is a non-blocking call.
</summary>
      <param name="effectorName"> Name of the effector. </param>
      <param name="space"> Task space {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. </param>
      <param name="positionChange"> 6D position change array (xd, yd, zd, wxd, wyd, wzd) in meters and radians </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
      <param name="axisMask"> Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.changeAngles(System.Object,System.Object,System.Single)">
      <summary>
Changes Angles. This is a non-blocking call.
</summary>
      <param name="names"> The name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="changes"> One or more changes in radians </param>
      <param name="fractionMaxSpeed"> The fraction of maximum speed to use </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.areResourcesAvailable(System.Collections.Generic.List`1{System.String})">
      <summary>
Returns true if all the desired resources are available. Only motion API's' blocking call takes resources.
</summary>
      <param name="resourceNames"> A vector of resource names such as joints. Use getBodyNames(\"Body\") to have the list of the available joint for your robot. </param>
      <returns> True if the resources are available </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.angleInterpolationWithSpeed(System.Object,System.Object,System.Single)">
      <summary>
Interpolates one or multiple joints to a target angle, using a fraction of max speed. Only one target angle is allowed for each joint. This is a blocking call.
</summary>
      <param name="names"> Name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="targetAngles"> An angle, or list of angles in radians </param>
      <param name="maxSpeedFraction"> A fraction. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.angleInterpolationBezier(System.Collections.Generic.List`1{System.String},System.Object,System.Object)">
      <summary>
Interpolates a sequence of timed angles for several motors using bezier control points. This is a blocking call.
</summary>
      <param name="jointNames"> A vector of joint names </param>
      <param name="times"> An ragged ALValue matrix of floats. Each line corresponding to a motor, and column element to a control point. </param>
      <param name="controlPoints"> An ALValue array of arrays each containing [float angle, Handle1, Handle2], where Handle is [int InterpolationType, float dAngle, float dTime] descibing the handle offsets relative to the angle and time of the point. The first bezier param describes the handle that controls the curve preceeding the point, the second describes the curve following the point. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.angleInterpolation(System.Object,System.Object,System.Object,System.Boolean)">
      <summary>
Interpolates one or multiple joints to a target angle or along timed trajectories. This is a blocking call.
</summary>
      <param name="names"> Name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". </param>
      <param name="angleLists"> An angle, list of angles or list of list of angles in radians </param>
      <param name="timeLists"> A time, list of times or list of list of times in seconds </param>
      <param name="isAbsolute"> If true, the movement is described in absolute angles, else the angles are relative to the current angle. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MotionProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Motion </summary>
      <remarks>ALMotion provides methods that help make Nao move. It contains commands for manipulating joint angles, joint stiffness, and a higher level API for controling walks.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
MotionProxy proxy = new MotionProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.MotionProxy">
      <summary>ALMotion provides methods that help make Nao move. It contains commands for manipulating joint angles, joint stiffness, and a higher level API for controling walks.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.setWordListAsVocabulary(System.Collections.Generic.List`1{System.String})">
      <summary>
Sets the list of words (vocabulary) that should be recognized by the speech recognition engine.
</summary>
      <param name="vocabulary"> List of words that should be recognized </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.setVocabulary(System.Collections.Generic.List`1{System.String},System.Boolean)">
      <summary>
Sets the list of words (vocabulary) that should be recognized by the speech recognition engine.
</summary>
      <param name="vocabulary"> List of words that should be recognized </param>
      <param name="enabledWordSpotting"> If disabled, the engine expects to hear one of the specified words, nothing more, nothing less. If enabled, the specified words can be pronounced in the middle of a whole speech stream, the engine will try to spot them. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.setVisualExpression(System.Boolean)">
      <summary>
Enables or disables the leds animations showing the state of the recognition engine during the recognition process.
</summary>
      <param name="setOrNot"> Enable (true) or disable it (false). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.setParameter(System.String,System.Single)">
      <summary>
Sets a parameter of the speech recognition engine. Note that when the ASR engine language is set to Chinese, no parameter can be set.               The parameters that can be set and the corresponding values are:               \"EarUseSpeechDetector\" - Values : 0 (No), 1 (Regular), or 2 (Cepstral) : type of speech detector used by the ASR engine - default value is 2.                \"EarSpeed\" - Values : 0 to 3 - 0 is slowest and most accurate. 3 is the fastest but may add some recognition errors, especially if you talk fast because some parts of the audio data is not processed. - default value is 2.                \"EarUseFilter\" : Values : 0 (no) or 1 (yes) - Applies a High-Pass filter on the input signal - default value is 0.
</summary>
      <param name="paramName"> Name of the parameter. </param>
      <param name="paramValue"> Value of the parameter. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.setLanguage(System.String)">
      <summary>
Sets the language used by the speech recognition engine.               The list of the available languages can be collected through the getAvailableLanguages method.               If you want to set a language as the default language (loading automatically at module launch), please refer to the web page of the robot.
</summary>
      <param name="languageName"> Name of the language in English. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.setDebugMode(System.Boolean)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="bSetOrUnset"> enable the functionnality when true. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.setAudioExpression(System.Boolean)">
      <summary>
Enables or disables the playing of sounds indicating the state of the recognition engine. 

If this option is enabled, a sound is played at the beginning of the recognition process (after a call to the subscribe method), and a sound is played when the user call the unsubscribe method
</summary>
      <param name="setOrNot"> Enable (true) or disable it (false). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.processSoundRemote(System.Int32,System.Int32,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.processRemote(System.Int32,System.Int32,System.Object,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="timestamp"> Provides the timestamp of the buffer. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.loadVocabulary(System.String)">
      <summary>
Loads the vocabulary to recognized contained in a .lxd file. This method is not available with the ASR engine language set to Chinese. For more informations see the red documentation
</summary>
      <param name="vocabularyFile"> Name of the lxd file containing the vocabulary </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper.#ctor(AL.ALSpeechRecognitionProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.SpeechRecognitionProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.setWordListAsVocabulary(System.Collections.Generic.List`1{System.String})">
      <summary>
Sets the list of words (vocabulary) that should be recognized by the speech recognition engine.
</summary>
      <param name="vocabulary"> List of words that should be recognized </param>
      <example>
        <code lang="python">
#Sets the words to recognize
wordList=["yes","no","hello Nao","goodbye Nao"]
asr.setWordListAsVocabulary(wordList)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.setVocabulary(System.Collections.Generic.List`1{System.String},System.Boolean)">
      <summary>
Sets the list of words (vocabulary) that should be recognized by the speech recognition engine.
</summary>
      <param name="vocabulary"> List of words that should be recognized </param>
      <param name="enabledWordSpotting"> If disabled, the engine expects to hear one of the specified words, nothing more, nothing less. If enabled, the specified words can be pronounced in the middle of a whole speech stream, the engine will try to spot them. </param>
      <example>
        <code lang="python">
#Sets the words to recognize wit words spotting mode enabled 
wordList=["yes","no","hello Nao","goodbye Nao"]
asr.setVocabulary(wordList, True)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.setVisualExpression(System.Boolean)">
      <summary>
Enables or disables the leds animations showing the state of the recognition engine during the recognition process.
</summary>
      <param name="setOrNot"> Enable (true) or disable it (false). </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.setParameter(System.String,System.Single)">
      <summary>
Sets a parameter of the speech recognition engine. Note that when the ASR engine language is set to Chinese, no parameter can be set.               The parameters that can be set and the corresponding values are:               \"EarUseSpeechDetector\" - Values : 0 (No), 1 (Regular), or 2 (Cepstral) : type of speech detector used by the ASR engine - default value is 2.                \"EarSpeed\" - Values : 0 to 3 - 0 is slowest and most accurate. 3 is the fastest but may add some recognition errors, especially if you talk fast because some parts of the audio data is not processed. - default value is 2.                \"EarUseFilter\" : Values : 0 (no) or 1 (yes) - Applies a High-Pass filter on the input signal - default value is 0.
</summary>
      <param name="paramName"> Name of the parameter. </param>
      <param name="paramValue"> Value of the parameter. </param>
      <example>
        <code lang="python">
#Sets the EarSpeed parameter to 3 
asr.setParameter("EarSpeed", 3.0)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.setLanguage(System.String)">
      <summary>
Sets the language used by the speech recognition engine.               The list of the available languages can be collected through the getAvailableLanguages method.               If you want to set a language as the default language (loading automatically at module launch), please refer to the web page of the robot.
</summary>
      <param name="languageName"> Name of the language in English. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.setDebugMode(System.Boolean)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="bSetOrUnset"> enable the functionnality when true. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.setAudioExpression(System.Boolean)">
      <summary>
Enables or disables the playing of sounds indicating the state of the recognition engine. 

If this option is enabled, a sound is played at the beginning of the recognition process (after a call to the subscribe method), and a sound is played when the user call the unsubscribe method
</summary>
      <param name="setOrNot"> Enable (true) or disable it (false). </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.processSoundRemote(System.Int32,System.Int32,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.processRemote(System.Int32,System.Int32,System.Object,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="timestamp"> Provides the timestamp of the buffer. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.loadVocabulary(System.String)">
      <summary>
Loads the vocabulary to recognized contained in a .lxd file. This method is not available with the ASR engine language set to Chinese. For more informations see the red documentation
</summary>
      <param name="vocabularyFile"> Name of the lxd file containing the vocabulary </param>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getPhoneticTranscription(System.String)">
      <summary>
This function allows you to get the phonetic transcription(s) used by the speech recognition engine when it is asked to recognize a word. Note that when the ASR engine language is set to Chinese, no phonetic transcription can be retrieved.
</summary>
      <param name="word"> Word to phoneticize. </param>
      <returns> Phonetic transcription(s) of the word </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getParameter(System.String)">
      <summary>
Gets a parameter of the speech recognition engine. Note that when the ASR engine language is set to Chinese, no parameter can be retrieved
</summary>
      <param name="paramName"> Name of the parameter. </param>
      <returns> Value of the parameter. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getLanguage">
      <summary>
Returns the current language used by the speech recognition system.
</summary>
      <returns> Current language used by the speech recognition engine. </returns>
      <example>
        <code lang="python">
#gets the current language of the speech recognition system and displays it
currentLanguage=asr.getLanguage()
print currentLanguage
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.getAvailableLanguages">
      <summary>
Returns the list of the languages installed on the system.
</summary>
      <returns> Array of strings that contains the list of the installed languages. </returns>
      <example>
        <code lang="python">
#gets the list of the available languages and displays it
availableLanguages=asr.getAvailableLanguages()
print availableLanguages
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SpeechRecognitionProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to SpeechRecognition </summary>
      <remarks>ALSpeechRecognition gives access to the                        embedded voice recognition system. It can be                       dynamically modified. This class allows user                       to load the current words list that should be recognized.                       The result of the recognition engine is located in the ALMemory's key: \"WordRecognized\"                       The structure of the result is an array :  [ (string) word , (float) confidence ]</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
SpeechRecognitionProxy proxy = new SpeechRecognitionProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.SpeechRecognitionProxy">
      <summary>ALSpeechRecognition gives access to the                        embedded voice recognition system. It can be                       dynamically modified. This class allows user                       to load the current words list that should be recognized.                       The result of the recognition engine is located in the ALMemory's key: \"WordRecognized\"                       The structure of the result is an array :  [ (string) word , (float) confidence ]</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.setIntensity(System.String,System.Single)">
      <summary>
Sets the intensity of a LED or Group of LEDs.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <param name="intensity"> The intensity of the LED or Group (a value between 0 and 1). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.rotateEyes(System.Int32,System.Single,System.Single)">
      <summary>
Launch a rotation using the leds of the eyes.
</summary>
      <param name="rgb"> the RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB. </param>
      <param name="timeForRotation"> Approximate time to make one turn. </param>
      <param name="totalDuration"> Approximate duration of the animation in seconds. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.rasta(System.Single)">
      <summary>
Launch a green/yellow/red rasta animation on all body.
</summary>
      <param name="duration"> Approximate duration of the animation in seconds. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.randomEyes(System.Single)">
      <summary>
Launch a random animation in eyes
</summary>
      <param name="duration"> Approximate duration of the animation in seconds. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.on(System.String)">
      <summary>
Switch to a maximum intensity a LED or Group of LEDs.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.off(System.String)">
      <summary>
Switch to a minimum intensity a LED or Group of LEDs.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.fadeRGB(System.String,System.Int32,System.Single)">
      <summary>
Sets the intensity of a led. If the name matches an RGB led, all channels are set to the same value.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <param name="rgb"> The RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB. </param>
      <param name="duration"> Time used to fade in seconds. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.fadeListRGB(System.String,System.Object,System.Object)">
      <summary>
Chain a list of color for a device, as the motion.doMove command.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <param name="rgbList"> List of RGB led value, RGB as seen in hexa-decimal: 0x00RRGGBB. </param>
      <param name="timeList"> List of time to go to given intensity. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.fade(System.String,System.Single,System.Single)">
      <summary>
Sets the intensity of a LED or Group of LEDs within a given time.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <param name="intensity"> The intensity of the LED or Group (a value between 0 and 1). </param>
      <param name="duration"> The duration of the fade in seconds </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.earLedsSetAngle(System.Int32,System.Single,System.Boolean)">
      <summary>
An animation to show a direction with the ears.
</summary>
      <param name="degrees"> The angle you want to show in degrees (int). 0 is up, 90 is forwards, 180 is down and 270 is back. </param>
      <param name="duration"> The duration in seconds of the animation. </param>
      <param name="leaveOnAtEnd"> If true the last led is left on at the end of the animation. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.createGroup(System.String,System.Collections.Generic.List`1{System.String})">
      <summary>
Makes a group name for ease of setting multiple LEDs.
</summary>
      <param name="groupName"> The name of the group. </param>
      <param name="ledNames"> A vector of the names of the LEDs in the group. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.PostHelper.#ctor(AL.ALLedsProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.LedsProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.setIntensity(System.String,System.Single)">
      <summary>
Sets the intensity of a LED or Group of LEDs.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <param name="intensity"> The intensity of the LED or Group (a value between 0 and 1). </param>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.rotateEyes(System.Int32,System.Single,System.Single)">
      <summary>
Launch a rotation using the leds of the eyes.
</summary>
      <param name="rgb"> the RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB. </param>
      <param name="timeForRotation"> Approximate time to make one turn. </param>
      <param name="totalDuration"> Approximate duration of the animation in seconds. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.rasta(System.Single)">
      <summary>
Launch a green/yellow/red rasta animation on all body.
</summary>
      <param name="duration"> Approximate duration of the animation in seconds. </param>
      <example>
        <code lang="python">
# Example showing a one second rasta animation
duration = 1.0
proxy.rasta(duration)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.randomEyes(System.Single)">
      <summary>
Launch a random animation in eyes
</summary>
      <param name="duration"> Approximate duration of the animation in seconds. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.on(System.String)">
      <summary>
Switch to a maximum intensity a LED or Group of LEDs.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <example>
        <code lang="python">
# Example showing how to switch on a group
name = "FaceLeds"
proxy.on(name)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.off(System.String)">
      <summary>
Switch to a minimum intensity a LED or Group of LEDs.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <example>
        <code lang="python">
# Example showing how to switch off a group
name = "FaceLeds"
proxy.off(name)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.listLEDs">
      <summary>
Lists the short LED names.
</summary>
      <returns> A vector of LED names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.listLED(System.String)">
      <summary>
Lists the devices aliased by a short LED name.
</summary>
      <param name="name"> The name of the LED to list </param>
      <returns> A vector of device names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.listGroups">
      <summary>
Lists available group names.
</summary>
      <returns> A vector of group names. </returns>
      <example>
        <code lang="python">
# Example showing how to print all groups
result = proxy.listGroups()
print '
'.join(result)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.listGroup(System.String)">
      <summary>
Lists the devices in the group.
</summary>
      <param name="groupName"> The name of the Group. </param>
      <returns> A vector of string device names. </returns>
      <example>
        <code lang="python">
# Example showing how print a list of the LEDs in a group
groupName = "AllLeds"
result = proxy.listGroup(groupName)
print '
'.join(result)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.getIntensity(System.String)">
      <summary>
Gets the intensity of a LED or device
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <returns> The intensity of the LED or Group. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.fadeRGB(System.String,System.Int32,System.Single)">
      <summary>
Sets the intensity of a led. If the name matches an RGB led, all channels are set to the same value.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <param name="rgb"> The RGB value led, RGB as seen in hexa-decimal: 0x00RRGGBB. </param>
      <param name="duration"> Time used to fade in seconds. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.fadeListRGB(System.String,System.Object,System.Object)">
      <summary>
Chain a list of color for a device, as the motion.doMove command.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <param name="rgbList"> List of RGB led value, RGB as seen in hexa-decimal: 0x00RRGGBB. </param>
      <param name="timeList"> List of time to go to given intensity. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.fade(System.String,System.Single,System.Single)">
      <summary>
Sets the intensity of a LED or Group of LEDs within a given time.
</summary>
      <param name="name"> The name of the LED or Group. </param>
      <param name="intensity"> The intensity of the LED or Group (a value between 0 and 1). </param>
      <param name="duration"> The duration of the fade in seconds </param>
      <example>
        <code lang="python">
# Example showing how to fade the left eye group to mid-intensity
name = "LeftEye"
intensity = 0.5
duration = 1.0
proxy.fade(name, intensity, duration)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.earLedsSetAngle(System.Int32,System.Single,System.Boolean)">
      <summary>
An animation to show a direction with the ears.
</summary>
      <param name="degrees"> The angle you want to show in degrees (int). 0 is up, 90 is forwards, 180 is down and 270 is back. </param>
      <param name="duration"> The duration in seconds of the animation. </param>
      <param name="leaveOnAtEnd"> If true the last led is left on at the end of the animation. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.createGroup(System.String,System.Collections.Generic.List`1{System.String})">
      <summary>
Makes a group name for ease of setting multiple LEDs.
</summary>
      <param name="groupName"> The name of the group. </param>
      <param name="ledNames"> A vector of the names of the LEDs in the group. </param>
    </member>
    <member name="M:Aldebaran.Proxies.LedsProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Leds </summary>
      <remarks>This module allows you to control NAO's LEDs. It provides simple ways of setting or fading the intensity of single LEDs and groups of LEDs. 

Groups of LEDs typically include face LEDs, ear LEDs etc. It is also possible to control each LED separately (for example, each of the 8 LEDs in one NAO's eyes).

There are three primary colors of LEDs available - red, green and blue, so it is possible to combine them to obtain different colors. The ears contain blue LEDs only.

It is possible to control the LED's intensity (between 0 and 100%).</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
LedsProxy proxy = new LedsProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.LedsProxy">
      <summary>This module allows you to control NAO's LEDs. It provides simple ways of setting or fading the intensity of single LEDs and groups of LEDs. 

Groups of LEDs typically include face LEDs, ear LEDs etc. It is also possible to control each LED separately (for example, each of the 8 LEDs in one NAO's eyes).

There are three primary colors of LEDs available - red, green and blue, so it is possible to combine them to obtain different colors. The ears contain blue LEDs only.

It is possible to control the LED's intensity (between 0 and 100%).</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.PostHelper.#ctor(AL.ALRedBallDetectionProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.RedBallDetectionProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.RedBallDetectionProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to RedBallDetection </summary>
      <remarks>ALRedBallDetection is a module which can detect red ball based on color saturation.

  The output value is written in ALMemory in the redBallDetected microEvent.

   It contains an array of tags, with the following format.

  [ [time_info], [ball_info], [camera_info_torsoFrame] [camera_info_robotFrame] [camera_id] ]

 

   Tag time_info = [timestamp_seconds, timestamp_microseconds]

  The time Stamp when image was taken.



   Tag ball_info = [ballAngleWz, ballAngleWy, ballSizeInRadianX, ballSizeInRadianY]

  ballAngleWz and ballAngleWy are the angular coordinates in camera angles  (in radians), corresponding to the direct (counter-clokwise) rotations along  the Z axis and the Y axis.

  ballSizeInRadianX and ballSizeInRadianY correspond to the size of the ball in camera angles.



   Tag camera_info_torsoFrame = [x, y, z, wx, wy, wz] in FRAME_TORSO (see motion documentation)

  Tag camera_info_robotFrame = [x, y, z, wx, wy, wz] in FRAME_ROBOT (see motion documentation)

  Tag camera_id = id of the active camera (see videodevice documentation)</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
RedBallDetectionProxy proxy = new RedBallDetectionProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.RedBallDetectionProxy">
      <summary>ALRedBallDetection is a module which can detect red ball based on color saturation.

  The output value is written in ALMemory in the redBallDetected microEvent.

   It contains an array of tags, with the following format.

  [ [time_info], [ball_info], [camera_info_torsoFrame] [camera_info_robotFrame] [camera_id] ]

 

   Tag time_info = [timestamp_seconds, timestamp_microseconds]

  The time Stamp when image was taken.



   Tag ball_info = [ballAngleWz, ballAngleWy, ballSizeInRadianX, ballSizeInRadianY]

  ballAngleWz and ballAngleWy are the angular coordinates in camera angles  (in radians), corresponding to the direct (counter-clokwise) rotations along  the Z axis and the Y axis.

  ballSizeInRadianX and ballSizeInRadianY correspond to the size of the ball in camera angles.



   Tag camera_info_torsoFrame = [x, y, z, wx, wy, wz] in FRAME_TORSO (see motion documentation)

  Tag camera_info_robotFrame = [x, y, z, wx, wy, wz] in FRAME_ROBOT (see motion documentation)

  Tag camera_id = id of the active camera (see videodevice documentation)</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.PostHelper.#ctor(AL.ALBatteryProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.BatteryProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.getBatteryCharge">
      <summary>
Get the battery charge in percents
</summary>
      <returns> the percentage of remaining power </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BatteryProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Battery </summary>
      <remarks>Deals with Battery informations.

A event name BatteryChargeCellVoltageMinChanged is raised when the cell voltage Min (int) of the battery changed.

A event name BatteryChargingFlagChanged is raised when the flag battery is charging (bool) changed.

A event name BatteryFullChargedFlagChanged is raised when the flag battery is full charged (bool) changed.

A event name BatteryDisChargingFlagChanged is raised when the flag battery is disCharging (bool) changed.

A event name BatteryLevelChanged is raised when the battery level percentage (int) changed.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
BatteryProxy proxy = new BatteryProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.BatteryProxy">
      <summary>Deals with Battery informations.

A event name BatteryChargeCellVoltageMinChanged is raised when the cell voltage Min (int) of the battery changed.

A event name BatteryChargingFlagChanged is raised when the flag battery is charging (bool) changed.

A event name BatteryFullChargedFlagChanged is raised when the flag battery is full charged (bool) changed.

A event name BatteryDisChargingFlagChanged is raised when the flag battery is disCharging (bool) changed.

A event name BatteryLevelChanged is raised when the battery level percentage (int) changed.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.PostHelper.startRecording(System.String,System.String,System.Boolean)">
      <summary>
Starts recording a video. Please note that only one record at a time can be made.
</summary>
      <param name="folderPath"> Folder where the video is saved. </param>
      <param name="fileName"> Filename used to save the video. </param>
      <param name="overwrite"> If false and the filename already exists, an error is thrown. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.PostHelper.startRecording(System.String,System.String)">
      <summary>
Starts recording a video. Please note that only one record at a time can be made.
</summary>
      <param name="folderPath"> Folder where the video is saved. </param>
      <param name="fileName"> Filename used to save the video. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.PostHelper.setVideoFormat(System.String)">
      <summary>
Sets video format.
</summary>
      <param name="videoFormat"> New video format. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.PostHelper.setResolution(System.Int32)">
      <summary>
Sets resolution.
</summary>
      <param name="resolution"> New frame resolution. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.PostHelper.setFrameRate(System.Single)">
      <summary>
Sets frame rate.
</summary>
      <param name="frameRate"> New frame rate. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.PostHelper.setColorSpace(System.Int32)">
      <summary>
Sets color space.
</summary>
      <param name="colorSpace"> New color space. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.PostHelper.setCameraID(System.Int32)">
      <summary>
Sets camera ID.
</summary>
      <param name="cameraID"> ID of the camera to use. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.PostHelper.#ctor(AL.ALVideoRecorderProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.VideoRecorderProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.stopRecording">
      <summary>
Stops a video record that was launched with startRecording(). The function returns the number of frames that were recorded, as well as the video absolute file name.
</summary>
      <returns> Array of two elements [numRecordedFrames, recordAbsolutePath] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.startRecording(System.String,System.String,System.Boolean)">
      <summary>
Starts recording a video. Please note that only one record at a time can be made.
</summary>
      <param name="folderPath"> Folder where the video is saved. </param>
      <param name="fileName"> Filename used to save the video. </param>
      <param name="overwrite"> If false and the filename already exists, an error is thrown. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.startRecording(System.String,System.String)">
      <summary>
Starts recording a video. Please note that only one record at a time can be made.
</summary>
      <param name="folderPath"> Folder where the video is saved. </param>
      <param name="fileName"> Filename used to save the video. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.setVideoFormat(System.String)">
      <summary>
Sets video format.
</summary>
      <param name="videoFormat"> New video format. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.setResolution(System.Int32)">
      <summary>
Sets resolution.
</summary>
      <param name="resolution"> New frame resolution. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.setFrameRate(System.Single)">
      <summary>
Sets frame rate.
</summary>
      <param name="frameRate"> New frame rate. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.setColorSpace(System.Int32)">
      <summary>
Sets color space.
</summary>
      <param name="colorSpace"> New color space. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.setCameraID(System.Int32)">
      <summary>
Sets camera ID.
</summary>
      <param name="cameraID"> ID of the camera to use. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.isRecording">
      <summary>
Are we currently recording a video
</summary>
      <returns> True/False </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.getVideoFormat">
      <summary>
Returns current video format.
</summary>
      <returns> Current video format. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.getResolution">
      <summary>
Returns current resolution.
</summary>
      <returns> Current resolution. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.getFrameRate">
      <summary>
Returns current frame rate.
</summary>
      <returns> Current frame rate. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.getColorSpace">
      <summary>
Returns current color space.
</summary>
      <returns> Current color space. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.getCameraID">
      <summary>
Returns current camera ID.
</summary>
      <returns> Current camera ID. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VideoRecorderProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to VideoRecorder </summary>
      <remarks>This module provides methods to record videos and store them on disk.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
VideoRecorderProxy proxy = new VideoRecorderProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.VideoRecorderProxy">
      <summary>This module provides methods to record videos and store them on disk.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.unloadFile(System.Int32)">
      <summary>
unloads a file previously loaded with the loadFile function
</summary>
      <param name="id"> Id returned by the loadFile function </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.unloadAllFiles">
      <summary>
unloads all the files already loaded.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.stopAll">
      <summary>
Stops all the files that are currently playing.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.setVolume(System.Int32,System.Single)">
      <summary>
Sets the volume of the player
</summary>
      <param name="id"> Id of the process that is playing the file you want to put louder or less loud </param>
      <param name="volume"> Volume - range 0.0 to 1.0 </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.setPanorama(System.Single)">
      <summary>
sets the audio panorama : -1 for left speaker / 1 for right speaker
</summary>
      <param name="arg1"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.setMasterVolume(System.Single)">
      <summary>
Sets the master volume of the player
</summary>
      <param name="volume"> Volume - range 0.0 to 1.0 </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.playWebStream(System.String,System.Single,System.Single)">
      <summary>
Starts the playback of a wab audio stream
</summary>
      <param name="streamName"> Path of the web audio stream </param>
      <param name="arg2"> arg </param>
      <param name="arg3"> arg </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.playSine(System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>
Play a sine wave which specified caracteristics.
</summary>
      <param name="frequence"> Frequence in Hertz </param>
      <param name="gain"> Volume Gain between 0 and 100 </param>
      <param name="pan"> Stereo Pan set to either {-1,0,+1} </param>
      <param name="duration"> Duration of the sine wave in seconds </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.playInLoop(System.Int32,System.Single,System.Single)">
      <summary>
Plays a wav or mp3 file in loop, with specific volume and audio balance
</summary>
      <param name="id"> Id returned by the loadFile function </param>
      <param name="volume"> volume of the sound file (must be between 0.0 and 1.0) </param>
      <param name="pan"> audio balance of the sound file (-1.0 : left / 1.0 : right) </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.playInLoop(System.Int32)">
      <summary>
Starts the playback in loop of a file preloaded with the loadFile function
</summary>
      <param name="id"> Id returned by the loadFile function </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.playFileInLoop(System.String,System.Single,System.Single)">
      <summary>
Plays a wav or mp3 file in loop, with specific volume and audio balance
</summary>
      <param name="fileName"> Path of the sound file </param>
      <param name="volume"> volume of the sound file (must be between 0.0 and 1.0) </param>
      <param name="pan"> audio balance of the sound file (-1.0 : left / 1.0 : right) </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.playFileInLoop(System.String)">
      <summary>
Plays a wav or mp3 file in loop
</summary>
      <param name="fileName"> Path of the sound file </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.playFileFromPosition(System.String,System.Single,System.Single,System.Single)">
      <summary>
Plays a wav or mp3 file from a given position in the file, with specific volume and audio balance
</summary>
      <param name="fileName"> Name of the sound file </param>
      <param name="position"> Position in second where the playing has to begin </param>
      <param name="volume"> volume of the sound file (must be between 0.0 and 1.0) </param>
      <param name="pan"> audio balance of the sound file (-1.0 : left / 1.0 : right) </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.playFileFromPosition(System.String,System.Single)">
      <summary>
Plays a wav or mp3 file from a given position in the file.
</summary>
      <param name="fileName"> Name of the sound file </param>
      <param name="position"> Position in second where the playing has to begin </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.playFile(System.String,System.Single,System.Single)">
      <summary>
Plays a wav or mp3 file, with specific volume and audio balance
</summary>
      <param name="fileName"> Path of the sound file </param>
      <param name="volume"> volume of the sound file (must be between 0.0 and 1.0) </param>
      <param name="pan"> audio balance of the sound file (-1.0 : left / 1.0 : right / 0.0 : centered) </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.playFile(System.String)">
      <summary>
Plays a wav or mp3 file
</summary>
      <param name="fileName"> Path of the sound file </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.play(System.Int32,System.Single,System.Single)">
      <summary>
Starts the playback of a file preloaded with the loadFile function, with specific volume and audio balance
</summary>
      <param name="id"> Id returned by the loadFile function </param>
      <param name="volume"> volume of the sound file (must be between 0.0 and 1.0) </param>
      <param name="pan"> audio balance of the sound file (-1.0 : left / 1.0 : right) </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.play(System.Int32)">
      <summary>
Starts the playback of a file preloaded with the loadFile function.
</summary>
      <param name="id"> Id returned by the loadFile function </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.pause(System.Int32)">
      <summary>
Pause a play back
</summary>
      <param name="id"> Id of the process that is playing the file you want to put in pause </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.goTo(System.Int32,System.Single)">
      <summary>
Goes to a given position in a file which is playing.
</summary>
      <param name="playId"> Id of the process which is playing the file </param>
      <param name="position"> Position in the file (in second) </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.PostHelper.#ctor(AL.ALAudioPlayerProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.AudioPlayerProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.unloadFile(System.Int32)">
      <summary>
unloads a file previously loaded with the loadFile function
</summary>
      <param name="id"> Id returned by the loadFile function </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.unloadAllFiles">
      <summary>
unloads all the files already loaded.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.stopAll">
      <summary>
Stops all the files that are currently playing.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.setVolume(System.Int32,System.Single)">
      <summary>
Sets the volume of the player
</summary>
      <param name="id"> Id of the process that is playing the file you want to put louder or less loud </param>
      <param name="volume"> Volume - range 0.0 to 1.0 </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.setPanorama(System.Single)">
      <summary>
sets the audio panorama : -1 for left speaker / 1 for right speaker
</summary>
      <param name="arg1"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.setMasterVolume(System.Single)">
      <summary>
Sets the master volume of the player
</summary>
      <param name="volume"> Volume - range 0.0 to 1.0 </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.playWebStream(System.String,System.Single,System.Single)">
      <summary>
Starts the playback of a wab audio stream
</summary>
      <param name="streamName"> Path of the web audio stream </param>
      <param name="arg2"> arg </param>
      <param name="arg3"> arg </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.playSine(System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>
Play a sine wave which specified caracteristics.
</summary>
      <param name="frequence"> Frequence in Hertz </param>
      <param name="gain"> Volume Gain between 0 and 100 </param>
      <param name="pan"> Stereo Pan set to either {-1,0,+1} </param>
      <param name="duration"> Duration of the sine wave in seconds </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.playInLoop(System.Int32,System.Single,System.Single)">
      <summary>
Plays a wav or mp3 file in loop, with specific volume and audio balance
</summary>
      <param name="id"> Id returned by the loadFile function </param>
      <param name="volume"> volume of the sound file (must be between 0.0 and 1.0) </param>
      <param name="pan"> audio balance of the sound file (-1.0 : left / 1.0 : right) </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.playInLoop(System.Int32)">
      <summary>
Starts the playback in loop of a file preloaded with the loadFile function
</summary>
      <param name="id"> Id returned by the loadFile function </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.playFileInLoop(System.String,System.Single,System.Single)">
      <summary>
Plays a wav or mp3 file in loop, with specific volume and audio balance
</summary>
      <param name="fileName"> Path of the sound file </param>
      <param name="volume"> volume of the sound file (must be between 0.0 and 1.0) </param>
      <param name="pan"> audio balance of the sound file (-1.0 : left / 1.0 : right) </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.playFileInLoop(System.String)">
      <summary>
Plays a wav or mp3 file in loop
</summary>
      <param name="fileName"> Path of the sound file </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.playFileFromPosition(System.String,System.Single,System.Single,System.Single)">
      <summary>
Plays a wav or mp3 file from a given position in the file, with specific volume and audio balance
</summary>
      <param name="fileName"> Name of the sound file </param>
      <param name="position"> Position in second where the playing has to begin </param>
      <param name="volume"> volume of the sound file (must be between 0.0 and 1.0) </param>
      <param name="pan"> audio balance of the sound file (-1.0 : left / 1.0 : right) </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.playFileFromPosition(System.String,System.Single)">
      <summary>
Plays a wav or mp3 file from a given position in the file.
</summary>
      <param name="fileName"> Name of the sound file </param>
      <param name="position"> Position in second where the playing has to begin </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.playFile(System.String,System.Single,System.Single)">
      <summary>
Plays a wav or mp3 file, with specific volume and audio balance
</summary>
      <param name="fileName"> Path of the sound file </param>
      <param name="volume"> volume of the sound file (must be between 0.0 and 1.0) </param>
      <param name="pan"> audio balance of the sound file (-1.0 : left / 1.0 : right / 0.0 : centered) </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.playFile(System.String)">
      <summary>
Plays a wav or mp3 file
</summary>
      <param name="fileName"> Path of the sound file </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.play(System.Int32,System.Single,System.Single)">
      <summary>
Starts the playback of a file preloaded with the loadFile function, with specific volume and audio balance
</summary>
      <param name="id"> Id returned by the loadFile function </param>
      <param name="volume"> volume of the sound file (must be between 0.0 and 1.0) </param>
      <param name="pan"> audio balance of the sound file (-1.0 : left / 1.0 : right) </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.play(System.Int32)">
      <summary>
Starts the playback of a file preloaded with the loadFile function.
</summary>
      <param name="id"> Id returned by the loadFile function </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.pause(System.Int32)">
      <summary>
Pause a play back
</summary>
      <param name="id"> Id of the process that is playing the file you want to put in pause </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.loadFile(System.String)">
      <summary>
Loads a file for ulterior playback
</summary>
      <param name="fileName"> Path of the sound file (either mp3 or wav) </param>
      <returns> Id of the file which has been loaded. This file can then be played with the play function </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.goTo(System.Int32,System.Single)">
      <summary>
Goes to a given position in a file which is playing.
</summary>
      <param name="playId"> Id of the process which is playing the file </param>
      <param name="position"> Position in the file (in second) </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getVolume(System.Int32)">
      <summary>
Returns the volume of the player
</summary>
      <param name="playId"> Id of the process which is playing the file </param>
      <returns> Volume of the player - range 0.0 to 1.0. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getMasterVolume">
      <summary>
Returns the master volume of the player
</summary>
      <returns> Volume of the master - range 0.0 to 1.0. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getLoadedFilesNames">
      <summary>
returns an array containing the names of the currently loaded files
</summary>
      <returns> Array containing the names of the files which has been loaded </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getLoadedFilesIds">
      <summary>
returns an array containing the Ids of the currently loaded files
</summary>
      <returns> Array containing the Ids of the files which has been loaded </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getFileLength(System.Int32)">
      <summary>
Returns the length of the file played
</summary>
      <param name="playId"> Id of the process which is playing the file </param>
      <returns> Length of the file in seconds </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getCurrentPosition(System.Int32)">
      <summary>
Returns the position in the file which is currently played
</summary>
      <param name="playId"> Id of the process which is playing the file </param>
      <returns> Position in the file in seconds </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioPlayerProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to AudioPlayer </summary>
      <remarks>This module allows to play wav and mp3 files on NAO</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
AudioPlayerProxy proxy = new AudioPlayerProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.AudioPlayerProxy">
      <summary>This module allows to play wav and mp3 files on NAO</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.PostHelper.stopTracker">
      <summary>
Stop the tracker by Unsubscribing to Event FaceDetected from ALFaceDetection module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.PostHelper.startTracker">
      <summary>
Start the tracker by Subscribing to Event FaceDetected from ALFaceDetection module.

Then Wait Event FaceDetected from ALFaceDetection module.

And finally send information to motion for head tracking.

NOTE: Stiffness of Head must be set to 1.0 to move!
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.PostHelper.setWholeBodyOn(System.Boolean)">
      <summary>
if true, the tracking will be through a Whole Body Process.
</summary>
      <param name="pWholeBodyOn"> The whole Body state </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.PostHelper.#ctor(AL.ALFaceTrackerProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.FaceTrackerProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.stopTracker">
      <summary>
Stop the tracker by Unsubscribing to Event FaceDetected from ALFaceDetection module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.startTracker">
      <summary>
Start the tracker by Subscribing to Event FaceDetected from ALFaceDetection module.

Then Wait Event FaceDetected from ALFaceDetection module.

And finally send information to motion for head tracking.

NOTE: Stiffness of Head must be set to 1.0 to move!
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.setWholeBodyOn(System.Boolean)">
      <summary>
if true, the tracking will be through a Whole Body Process.
</summary>
      <param name="pWholeBodyOn"> The whole Body state </param>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.isNewData">
      <summary>
Return true if a new face was detected since the last getPosition().
</summary>
      <returns> true if a new face was detected since the last getPosition(). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.isActive">
      <summary>
Return true if the face Tracker is running.
</summary>
      <returns> true if the face Tracker is running. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.getPosition">
      <summary>
Return the [x, y, z] position of the face in FRAME_TORSO. This is done assuming an average face size, so it might not be very accurate.

 This invalidates the isNewData field of the tracker. See isNewData()) for more details.
</summary>
      <returns> An Array containing the face position [x, y, z]. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FaceTrackerProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to FaceTracker </summary>
      <remarks>This module is dedicated to track a face. When activated, Nao will move its head to follow the detected face.

 This module relies on ALFaceDetection, so be sure it is loaded on your robot.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
FaceTrackerProxy proxy = new FaceTrackerProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.FaceTrackerProxy">
      <summary>This module is dedicated to track a face. When activated, Nao will move its head to follow the detected face.

 This module relies on ALFaceDetection, so be sure it is loaded on your robot.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.waitForResourcesTree(System.Collections.Generic.List`1{System.String},System.String,System.String,System.Int32)">
      <summary>
Wait for resource tree. Parent and children are not in conflict. Local function
</summary>
      <param name="ressourceName"> Resource name </param>
      <param name="ownerName"> Owner name </param>
      <param name="callbackName"> callback name </param>
      <param name="timeoutSeconds"> Timeout in seconds </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.waitForResource(System.String,System.String,System.String,System.Int32)">
      <summary>
Wait resource
</summary>
      <param name="ressourceName"> Resource name </param>
      <param name="ownerName"> Owner name </param>
      <param name="callbackName"> callback name </param>
      <param name="timeoutSeconds"> Timeout in seconds </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.releaseResources(System.Collections.Generic.List`1{System.String},System.String)">
      <summary>
Release  resources list
</summary>
      <param name="resourceNames"> Resource names </param>
      <param name="ownerName"> Owner name </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.releaseResource(System.String,System.String)">
      <summary>
Release resource
</summary>
      <param name="resourceName"> Resource name </param>
      <param name="ownerName"> Existing owner name </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.enableStateResource(System.String,System.Boolean)">
      <summary>
Enable or disable a state resource
</summary>
      <param name="resourceName"> The name of the resource that you wish enable of disable. e.g. Standing </param>
      <param name="enabled"> True to enable, false to disable </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.deleteResource(System.String,System.Boolean)">
      <summary>
Delete a root resource
</summary>
      <param name="resourceName"> Resource name to delete </param>
      <param name="deleteChildResources"> Delete child resources if true </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.createResourcesList(System.Collections.Generic.List`1{System.String},System.String)">
      <summary>
True if a resource is in another parent resource
</summary>
      <param name="resourceGroupName"> Group name. Ex: Arm </param>
      <param name="resourceName"> Resource name </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.createResource(System.String,System.String)">
      <summary>
Create a resource
</summary>
      <param name="resourceName"> Resource name to create </param>
      <param name="parentResourceName"> Parent resource name or empty string for root resource </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.PostHelper.#ctor(AL.ALResourceManagerProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.ResourceManagerProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.waitForResourcesTree(System.Collections.Generic.List`1{System.String},System.String,System.String,System.Int32)">
      <summary>
Wait for resource tree. Parent and children are not in conflict. Local function
</summary>
      <param name="ressourceName"> Resource name </param>
      <param name="ownerName"> Owner name </param>
      <param name="callbackName"> callback name </param>
      <param name="timeoutSeconds"> Timeout in seconds </param>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.waitForResource(System.String,System.String,System.String,System.Int32)">
      <summary>
Wait resource
</summary>
      <param name="ressourceName"> Resource name </param>
      <param name="ownerName"> Owner name </param>
      <param name="callbackName"> callback name </param>
      <param name="timeoutSeconds"> Timeout in seconds </param>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.waitForOptionalResourcesTree(System.Collections.Generic.List`1{System.String},System.String,System.String,System.Int32,System.Collections.Generic.List`1{System.String})">
      <summary>
Wait resource
</summary>
      <param name="arg1"> arg </param>
      <param name="arg2"> arg </param>
      <param name="arg3"> arg </param>
      <param name="arg4"> arg </param>
      <param name="arg5"> arg </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.releaseResources(System.Collections.Generic.List`1{System.String},System.String)">
      <summary>
Release  resources list
</summary>
      <param name="resourceNames"> Resource names </param>
      <param name="ownerName"> Owner name </param>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.releaseResource(System.String,System.String)">
      <summary>
Release resource
</summary>
      <param name="resourceName"> Resource name </param>
      <param name="ownerName"> Existing owner name </param>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.ownersGet">
      <summary>
The tree of the resources owners.
</summary>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.isResourceFree(System.String)">
      <summary>
True if one resources free
</summary>
      <param name="resourceNames"> Resource names </param>
      <returns> True if the specify resources is free </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.isInGroup(System.String,System.String)">
      <summary>
True if a resource is in another parent resource
</summary>
      <param name="resourceGroupName"> Group name. Ex: Arm </param>
      <param name="resourceName"> Resource name </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.enableStateResource(System.String,System.Boolean)">
      <summary>
Enable or disable a state resource
</summary>
      <param name="resourceName"> The name of the resource that you wish enable of disable. e.g. Standing </param>
      <param name="enabled"> True to enable, false to disable </param>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.deleteResource(System.String,System.Boolean)">
      <summary>
Delete a root resource
</summary>
      <param name="resourceName"> Resource name to delete </param>
      <param name="deleteChildResources"> Delete child resources if true </param>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.createResourcesList(System.Collections.Generic.List`1{System.String},System.String)">
      <summary>
True if a resource is in another parent resource
</summary>
      <param name="resourceGroupName"> Group name. Ex: Arm </param>
      <param name="resourceName"> Resource name </param>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.createResource(System.String,System.String)">
      <summary>
Create a resource
</summary>
      <param name="resourceName"> Resource name to create </param>
      <param name="parentResourceName"> Parent resource name or empty string for root resource </param>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.areResourcesOwnedBy(System.Collections.Generic.List`1{System.String},System.String)">
      <summary>
True if all the specified resources are owned by the owner
</summary>
      <param name="resourceNameList"> Resource name </param>
      <param name="ownerName"> Owner pointer with hierarchy </param>
      <returns> True if all the specify resources are owned by the owner </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.areResourcesFree(System.Collections.Generic.List`1{System.String})">
      <summary>
True if resources free
</summary>
      <param name="resourceNames"> Resource names </param>
      <returns> True if all the specify resources are free </returns>
    </member>
    <member name="M:Aldebaran.Proxies.ResourceManagerProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to ResourceManager </summary>
      <remarks>Manage robot resources: Synchronize movement, led, sound. Run specific actions when another behavior wants your resources</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
ResourceManagerProxy proxy = new ResourceManagerProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.ResourceManagerProxy">
      <summary>Manage robot resources: Synchronize movement, led, sound. Run specific actions when another behavior wants your resources</summary>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.PostHelper.writePrefFile(System.String,System.Object,System.Boolean)">
      <summary>
Writes all preferences from ALValue to an xml file.
</summary>
      <param name="fileName"> Name of the module associate to the preference. </param>
      <param name="prefs"> array reprenting the whole file. </param>
      <param name="ignoreMemoryNames"> If true all memory names will be removed before saving. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.PostHelper.#ctor(AL.ALPreferencesProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.PreferencesProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.writePrefFile(System.String,System.Object,System.Boolean)">
      <summary>
Writes all preferences from ALValue to an xml file.
</summary>
      <param name="fileName"> Name of the module associate to the preference. </param>
      <param name="prefs"> array reprenting the whole file. </param>
      <param name="ignoreMemoryNames"> If true all memory names will be removed before saving. </param>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.saveToMemory(System.Object)">
      <summary>
Writes all preferences from ALValue to an xml file.
</summary>
      <param name="prefs"> array reprenting the whole file. </param>
      <returns> True upon success. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.readPrefFile(System.String,System.Boolean)">
      <summary>
Reads all preferences from an xml files and stores them in an ALValue.
</summary>
      <param name="fileName"> Name of the module associate to the preference. </param>
      <param name="autoGenerateMemoryNames"> If true a memory name will be generated for each non-array preference. </param>
      <returns> array reprenting the whole file. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.PreferencesProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Preferences </summary>
      <remarks>ALPreferences allows access to xml preference files. 

A preference is defined as follows : 

pParams[0] Name of the preference; 

pParams[1] Description of the preference; 

pParams[2] The value of the preference (can contain other preferences); 

pParams[3] (optional) The name of the data when inserted into memory.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
PreferencesProxy proxy = new PreferencesProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.PreferencesProxy">
      <summary>ALPreferences allows access to xml preference files. 

A preference is defined as follows : 

pParams[0] Name of the preference; 

pParams[1] Description of the preference; 

pParams[2] The value of the preference (can contain other preferences); 

pParams[3] (optional) The name of the data when inserted into memory.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.setPowerLimit(System.Single)">
      <summary>
DEPRECATED since 1.14

 Change the power threshold; below it, Nao will sit down and remove power from his motors.
</summary>
      <param name="powerLimit"> power limit in percent, default: 0.07; 0.00 to disable this feature. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.run">
      <summary>
Monitors buttons and Battery.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.presentation(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 Launch a small presentation of Nao: name, ip, battery. It's the default behavior launched when user press on the chest
</summary>
      <param name="enableFastCheckJoints"> if true, Nao will quickly check that his joints are moving properly. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.onTemperatureMeasure(System.String,System.Object,System.String)">
      <summary>
DEPRECATED since 1.14

 callback for change in battery power level. (internal use).
</summary>
      <param name="dataName"> Name of the modified data </param>
      <param name="data"> value of the data </param>
      <param name="message"> associate message. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.onMotorError(System.String,System.Object,System.String)">
      <summary>
DEPRECATED since 1.14

 callback for change in battery power level. (internal use).
</summary>
      <param name="dataName"> Name of the modified data </param>
      <param name="data"> value of the data </param>
      <param name="message"> associate message. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.onBatteryMeasure(System.String,System.Object,System.String)">
      <summary>
DEPRECATED since 1.14

 callback for internal use.
</summary>
      <param name="dataName"> Name of the modified data </param>
      <param name="data"> value of the data </param>
      <param name="message"> associate message. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.exitNaoqi">
      <summary>
DEPRECATED since 1.14

 exit naoqi (warning: it will really exit Naoqi)
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.enablePowerMonitoring(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 Enable or Disable power monitoring.
</summary>
      <param name="enable"> true to enable, false to disable, default: true </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.enableHeatMonitoring(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 Enable or Disable heat monitoring.
</summary>
      <param name="enable"> true to enable, false to disable, default: true </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.enableDefaultActionTripleClick(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 enable or disable the \"restart naoqi\" action after three pushes.
</summary>
      <param name="enable"> true of false to respectively enable or disable </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.enableDefaultActionSimpleClick(System.Boolean)">
      <summary>
DEPRECATED since 1.14.

enable or disable the \"hello, i'm nao...\" after one short push of the Power button. In both cases the ALMemory ALSentinel/SimpleClickOccured key will be set to true, so users can read/registerOnChange it, then reset to false after handling the event.
</summary>
      <param name="enable"> true of false to respectively enable or disable </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.enableDefaultActionDoubleClick(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 enable or disable the \"ouch\" action after two pushes.
</summary>
      <param name="enable"> true of false to respectively enable or disable </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.enableCheckRemainingRam(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 check the remaining physical memory
</summary>
      <param name="enable"> true of false to respectively enable or disable (default: true) </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.enableBatteryMeasure(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 check the battery information, voltage and alarm flag
</summary>
      <param name="enable"> true of false to respectively enable or disable (default: true) </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.batteryPowerPluggedChanged(System.String,System.Object,System.String)">
      <summary>
DEPRECATED since 1.14

 callback for internal use.
</summary>
      <param name="dataName"> Name of the modified data </param>
      <param name="data"> value of the data </param>
      <param name="message"> associate message. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.PostHelper.#ctor(AL.ALSentinelProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.SentinelProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.setPowerLimit(System.Single)">
      <summary>
DEPRECATED since 1.14

 Change the power threshold; below it, Nao will sit down and remove power from his motors.
</summary>
      <param name="powerLimit"> power limit in percent, default: 0.07; 0.00 to disable this feature. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.run">
      <summary>
Monitors buttons and Battery.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.presentation(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 Launch a small presentation of Nao: name, ip, battery. It's the default behavior launched when user press on the chest
</summary>
      <param name="enableFastCheckJoints"> if true, Nao will quickly check that his joints are moving properly. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.onTemperatureMeasure(System.String,System.Object,System.String)">
      <summary>
DEPRECATED since 1.14

 callback for change in battery power level. (internal use).
</summary>
      <param name="dataName"> Name of the modified data </param>
      <param name="data"> value of the data </param>
      <param name="message"> associate message. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.onMotorError(System.String,System.Object,System.String)">
      <summary>
DEPRECATED since 1.14

 callback for change in battery power level. (internal use).
</summary>
      <param name="dataName"> Name of the modified data </param>
      <param name="data"> value of the data </param>
      <param name="message"> associate message. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.onBatteryMeasure(System.String,System.Object,System.String)">
      <summary>
DEPRECATED since 1.14

 callback for internal use.
</summary>
      <param name="dataName"> Name of the modified data </param>
      <param name="data"> value of the data </param>
      <param name="message"> associate message. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.getRemainingRam">
      <summary>
DEPRECATED since 1.14

 get the remaining physical memory value (one shot)
</summary>
      <returns> the remaining RAM in kb </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.getBatteryLevelDesc">
      <summary>
DEPRECATED since 1.14

 Get a text presentation of the battery level ('My battery is...').
</summary>
      <returns> the sentence describing the battery level </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.getBatteryLevel">
      <summary>
DEPRECATED since 1.14

 Get the battery level (0..5) 5: full 0: totally empty (never reached).
</summary>
      <returns> the battery level (0..5): 5: full 0: totally empty (never reached) </returns>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.exitNaoqi">
      <summary>
DEPRECATED since 1.14

 exit naoqi (warning: it will really exit Naoqi)
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.enablePowerMonitoring(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 Enable or Disable power monitoring.
</summary>
      <param name="enable"> true to enable, false to disable, default: true </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.enableHeatMonitoring(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 Enable or Disable heat monitoring.
</summary>
      <param name="enable"> true to enable, false to disable, default: true </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.enableDefaultActionTripleClick(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 enable or disable the \"restart naoqi\" action after three pushes.
</summary>
      <param name="enable"> true of false to respectively enable or disable </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.enableDefaultActionSimpleClick(System.Boolean)">
      <summary>
DEPRECATED since 1.14.

enable or disable the \"hello, i'm nao...\" after one short push of the Power button. In both cases the ALMemory ALSentinel/SimpleClickOccured key will be set to true, so users can read/registerOnChange it, then reset to false after handling the event.
</summary>
      <param name="enable"> true of false to respectively enable or disable </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.enableDefaultActionDoubleClick(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 enable or disable the \"ouch\" action after two pushes.
</summary>
      <param name="enable"> true of false to respectively enable or disable </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.enableCheckRemainingRam(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 check the remaining physical memory
</summary>
      <param name="enable"> true of false to respectively enable or disable (default: true) </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.enableBatteryMeasure(System.Boolean)">
      <summary>
DEPRECATED since 1.14

 check the battery information, voltage and alarm flag
</summary>
      <param name="enable"> true of false to respectively enable or disable (default: true) </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.batteryPowerPluggedChanged(System.String,System.Object,System.String)">
      <summary>
DEPRECATED since 1.14

 callback for internal use.
</summary>
      <param name="dataName"> Name of the modified data </param>
      <param name="data"> value of the data </param>
      <param name="message"> associate message. </param>
    </member>
    <member name="M:Aldebaran.Proxies.SentinelProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Sentinel </summary>
      <remarks>ALSentinel (ex-ALWatchDog) is a module that implements vital services for Nao:

	- Check Vitality of naoqi.

	- Check Battery.

	- Check press on chest Button (soft power off).

	- Warn about motor heating.

...</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
SentinelProxy proxy = new SentinelProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.SentinelProxy">
      <summary>ALSentinel (ex-ALWatchDog) is a module that implements vital services for Nao:

	- Check Vitality of naoqi.

	- Check Battery.

	- Check press on chest Button (soft power off).

	- Warn about motor heating.

...</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.PostHelper.enableTracking(System.Boolean)">
      <summary>
(BETA) Choose to enable or disable tracking. Enabling tracking usually allows you to follow a face for a longer period of time. However, it can lead to more false detections.
</summary>
      <param name="enable"> True/False </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.PostHelper.enableRecognition(System.Boolean)">
      <summary>
enable/disable the recognition stageProcess will be faster when disabled when you don't need to recognize people
</summary>
      <param name="enable"> True/False </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.PostHelper.#ctor(AL.ALFaceDetectionProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.FaceDetectionProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.reLearnFace(System.String)">
      <summary>
use in a new learning process     the latest images where a face has been wrongly recognized
</summary>
      <param name="pId"> The name of the person to save </param>
      <returns> true if the operation succeeds </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.learnFace(System.String)">
      <summary>
Add a new face in the database.
</summary>
      <param name="pId"> The name of the person to save </param>
      <returns> true if the operation succeeds </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.isTrackingEnabled">
      <summary>
(BETA) Returns if tracking is enabled.
</summary>
      <returns> True/False </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.forgetPerson(System.String)">
      <summary>
Delete from the database all faces instances of a person.
</summary>
      <param name="pId"> The name of the person to forget </param>
      <returns> true if the operation succeeds </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.enableTracking(System.Boolean)">
      <summary>
(BETA) Choose to enable or disable tracking. Enabling tracking usually allows you to follow a face for a longer period of time. However, it can lead to more false detections.
</summary>
      <param name="enable"> True/False </param>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.enableRecognition(System.Boolean)">
      <summary>
enable/disable the recognition stageProcess will be faster when disabled when you don't need to recognize people
</summary>
      <param name="enable"> True/False </param>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.clearDatabase">
      <summary>
Remove all faces from the database.
</summary>
      <returns> true if the operation succeeds </returns>
    </member>
    <member name="M:Aldebaran.Proxies.FaceDetectionProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to FaceDetection </summary>
      <remarks>ALFaceDetection is the Module which detects faces. 

This module detects if there is one, several or no face in Nao's field of view. Better results are obtained when facing Nao. 

The output value is written in ALMemory in the FaceDetected variable. 

 The output value is organized as follows: 

 

[ [ TimeStampField ] [ Face_info_0 , Face_info_1, . . . , Face_info_N-1, Time_Filtered_Reco_info ]                        [ Camera_info_torsoFrame ] [ Camera_info_robotFrame ] [Camera_id] ] 

with 

- TimeStampField = [ TimeStamp_seconds, Timestamp_microseconds ]. This field is the time stamp of the image                                                                         that was used to perform the detection. 

- Face_info = [ ShapeInfo, ExtraInfo ]. For each detected face, we have one Face_info field. 

  &gt; ShapeInfo = [ 0, alpha, beta, sizeX, sizeY ]. 

     - alpha and beta represent the face's location in terms of camera angles 

     - sizeX and sizeY are the face's size in camera angle 

  &gt; ExtraInfo = [ Reco_info_0, Reco_info_1, ..., Reco_info_M ] 

   with Reco_info_0 = [ faceID, score_reco, face_label, left_eye_points, right_eye_points,                                left_eyebrow_points, right_eyebrow_points, nose_points, mouth_points ] 

   and 

   ==&gt; faceID the ID number for the face 

   ==&gt; score_reco the score returned by the rocognition process (the higher the better) 

   ==&gt; face_label the name of the recognized face 

   ==&gt; xxxx_eye_points = [ eyeCenter_x, eyeCenter_y, noseSideLimit_x, noseSideLimit_y, earSideLimit_x, earSideLimit_y,                                   topLimit_x, topLimit_y, bottomLimit_x, bottomLimit_y, midTopEarLimit_x, midTopEarLimit_y,                                   midTopNoseLimit_x, midTopNoseLimit_y ] 

   ==&gt; xxxx_eyebrow_points = [ noseSideLimit_x, noseSideLimit_y, center_x, center_y, earSideLimit_x, earSideLimit_y ] 

   ==&gt; nose_points = [ bottomCenterLimit_x, bottomCenterLimit_y, bottomLeftLimit_x, bottomLeftLimit_y,                               bottomRightLimit_x, bottomRightLimit_y ] 

   ==&gt; mouth_points = [ leftLimit_x, leftLimit_y, rightLimit_x, rightLimit_y, topLimit_x, topLimit_y, bottomLimit_x,                                bottomLimit_y, midTopLeftLimit_x, midTopLeftLimit_y, midTopRightLimit_x, midTopRightLimit_y,                                midBottomRightLimit_x, midBottomRightLimit_y, midBottomLeftLimit_x, midBottomLeftLimit_y ] 

   ...all these coordinates are given in camera angles. 

- Time_Filtered_Reco_info can be equal to 

  &gt; [] if there is nothing new 

  &gt; [ 2 [ face_label ] ] if there is one face recognized 

  &gt; [ 3 [ face_label_0, ..., face_label_P ] ] if there are several recognized faces 

  &gt; [ 4 ] if a face has been detected for more than 8 seconds without being recognized. Getting this result is a            suggestion to learn this face if desired, but keep in mind that recognition only works for faces looking towards NAO. 

- Camera_info_torsoFrame = [x, y, z, wx, wy, wz] in FRAME_TORSO (see motion documentation)

- Camera_info_robotFrame = [x, y, z, wx, wy, wz] in FRAME_ROBOT (see motion documentation)

- Camera_id = id of the active camera (see videodevice documentation)</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
FaceDetectionProxy proxy = new FaceDetectionProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.FaceDetectionProxy">
      <summary>ALFaceDetection is the Module which detects faces. 

This module detects if there is one, several or no face in Nao's field of view. Better results are obtained when facing Nao. 

The output value is written in ALMemory in the FaceDetected variable. 

 The output value is organized as follows: 

 

[ [ TimeStampField ] [ Face_info_0 , Face_info_1, . . . , Face_info_N-1, Time_Filtered_Reco_info ]                        [ Camera_info_torsoFrame ] [ Camera_info_robotFrame ] [Camera_id] ] 

with 

- TimeStampField = [ TimeStamp_seconds, Timestamp_microseconds ]. This field is the time stamp of the image                                                                         that was used to perform the detection. 

- Face_info = [ ShapeInfo, ExtraInfo ]. For each detected face, we have one Face_info field. 

  &gt; ShapeInfo = [ 0, alpha, beta, sizeX, sizeY ]. 

     - alpha and beta represent the face's location in terms of camera angles 

     - sizeX and sizeY are the face's size in camera angle 

  &gt; ExtraInfo = [ Reco_info_0, Reco_info_1, ..., Reco_info_M ] 

   with Reco_info_0 = [ faceID, score_reco, face_label, left_eye_points, right_eye_points,                                left_eyebrow_points, right_eyebrow_points, nose_points, mouth_points ] 

   and 

   ==&gt; faceID the ID number for the face 

   ==&gt; score_reco the score returned by the rocognition process (the higher the better) 

   ==&gt; face_label the name of the recognized face 

   ==&gt; xxxx_eye_points = [ eyeCenter_x, eyeCenter_y, noseSideLimit_x, noseSideLimit_y, earSideLimit_x, earSideLimit_y,                                   topLimit_x, topLimit_y, bottomLimit_x, bottomLimit_y, midTopEarLimit_x, midTopEarLimit_y,                                   midTopNoseLimit_x, midTopNoseLimit_y ] 

   ==&gt; xxxx_eyebrow_points = [ noseSideLimit_x, noseSideLimit_y, center_x, center_y, earSideLimit_x, earSideLimit_y ] 

   ==&gt; nose_points = [ bottomCenterLimit_x, bottomCenterLimit_y, bottomLeftLimit_x, bottomLeftLimit_y,                               bottomRightLimit_x, bottomRightLimit_y ] 

   ==&gt; mouth_points = [ leftLimit_x, leftLimit_y, rightLimit_x, rightLimit_y, topLimit_x, topLimit_y, bottomLimit_x,                                bottomLimit_y, midTopLeftLimit_x, midTopLeftLimit_y, midTopRightLimit_x, midTopRightLimit_y,                                midBottomRightLimit_x, midBottomRightLimit_y, midBottomLeftLimit_x, midBottomLeftLimit_y ] 

   ...all these coordinates are given in camera angles. 

- Time_Filtered_Reco_info can be equal to 

  &gt; [] if there is nothing new 

  &gt; [ 2 [ face_label ] ] if there is one face recognized 

  &gt; [ 3 [ face_label_0, ..., face_label_P ] ] if there are several recognized faces 

  &gt; [ 4 ] if a face has been detected for more than 8 seconds without being recognized. Getting this result is a            suggestion to learn this face if desired, but keep in mind that recognition only works for faces looking towards NAO. 

- Camera_info_torsoFrame = [x, y, z, wx, wy, wz] in FRAME_TORSO (see motion documentation)

- Camera_info_robotFrame = [x, y, z, wx, wy, wz] in FRAME_ROBOT (see motion documentation)

- Camera_id = id of the active camera (see videodevice documentation)</summary>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.PostHelper.#ctor(AL.ALPythonBridgeProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.PythonBridgeProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.evalReturn(System.String)">
      <summary>
eval script and return result. evalReturn(2+2) will return 4
</summary>
      <param name="stringToEvaluate"> string to eval </param>
      <returns> the result of the evaluation </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.evalFull(System.String)">
      <summary>
evaluates script and returns an informative array.
</summary>
      <param name="stringToEvaluate"> string to eval </param>
      <returns> an array containing [return value, exceptions, stdout, stderr] </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.eval(System.String)">
      <summary>
eval script
</summary>
      <param name="stringToEvaluate"> string to eval </param>
      <returns> if the evaluation has gone wrong </returns>
    </member>
    <member name="M:Aldebaran.Proxies.PythonBridgeProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to PythonBridge </summary>
      <remarks>This module evaluates python commands on the fly.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
PythonBridgeProxy proxy = new PythonBridgeProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.PythonBridgeProxy">
      <summary>This module evaluates python commands on the fly.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.PostHelper.#ctor(AL.ALBonjourProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.BonjourProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BonjourProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Bonjour </summary>
      <remarks />
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
BonjourProxy proxy = new BonjourProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.BonjourProxy">
      <summary />
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.setParameter(System.String,System.Object)">
      <summary>
Set the specified parameter.
</summary>
      <param name="parameter"> Name of the parameter. \"Sensibility\" between 0 and 1 to adjust the capacity of NAO to locate quiet sounds. \"EnergyComputation\" (1 or 0) that activates the computation of the located source signal energy. This energy is added in the \"ALAudioSourceLocalization/SoundLocated\" ALMemory key. </param>
      <param name="value"> \"Sensibility\" : a float in [0,1]. \"EnergyComputation\" : (1 or 0). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.setDebugMode(System.Boolean)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="bSetOrUnset"> enable the functionnality when true. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.processSoundRemote(System.Int32,System.Int32,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.processRemote(System.Int32,System.Int32,System.Object,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="timestamp"> Provides the timestamp of the buffer. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper.#ctor(AL.ALAudioSourceLocalizationProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.AudioSourceLocalizationProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.setParameter(System.String,System.Object)">
      <summary>
Set the specified parameter.
</summary>
      <param name="parameter"> Name of the parameter. \"Sensibility\" between 0 and 1 to adjust the capacity of NAO to locate quiet sounds. \"EnergyComputation\" (1 or 0) that activates the computation of the located source signal energy. This energy is added in the \"ALAudioSourceLocalization/SoundLocated\" ALMemory key. </param>
      <param name="value"> \"Sensibility\" : a float in [0,1]. \"EnergyComputation\" : (1 or 0). </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.setDebugMode(System.Boolean)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="bSetOrUnset"> enable the functionnality when true. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.processSoundRemote(System.Int32,System.Int32,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.processRemote(System.Int32,System.Int32,System.Object,System.Object)">
      <summary>
enable/disable the printing of some debug information
</summary>
      <param name="nbOfChannels"> Provides the number of channels of the buffer. </param>
      <param name="nbOfSamplesByChannel"> Provides the number of samples by channel. </param>
      <param name="timestamp"> Provides the timestamp of the buffer. </param>
      <param name="buffer"> Provides the audio buffer as an ALValue. </param>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.AudioSourceLocalizationProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to AudioSourceLocalization </summary>
      <remarks>This module computes the position (azimuth, elevation) of a sound source detected by ALSoundDetection.

 When a sound is detected and located, an event is created.

 This module requires ALSoundDetection and ALMotion modules to run correctly.

 One event is created when nao locates a sound source : ALAudioSourceLocalization/SoundLocated.

 ALAudioSourceLocalization/SoundLocated : [ [time(sec), time(usec)], [azimuth, elevation, confidence, (optional: energy)] , [Head Position[6D]] ]</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
AudioSourceLocalizationProxy proxy = new AudioSourceLocalizationProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.AudioSourceLocalizationProxy">
      <summary>This module computes the position (azimuth, elevation) of a sound source detected by ALSoundDetection.

 When a sound is detected and located, an event is created.

 This module requires ALSoundDetection and ALMotion modules to run correctly.

 One event is created when nao locates a sound source : ALAudioSourceLocalization/SoundLocated.

 ALAudioSourceLocalization/SoundLocated : [ [time(sec), time(usec)], [azimuth, elevation, confidence, (optional: energy)] , [Head Position[6D]] ]</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.unsubscribeToMicroEvent(System.String,System.String)">
      <summary>
Unsubscribes from the given event. No further notifications will be received.
</summary>
      <param name="name"> Name of the event. </param>
      <param name="callbackModule"> The name of the module that was given when subscribing. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.unsubscribeToEvent(System.String,System.String)">
      <summary>
Unsubscribes a module from the given event. No further notifications will be received.
</summary>
      <param name="name"> The name of the event </param>
      <param name="callbackModule"> The name of the module that was given when subscribing. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.unregisterModuleReference(System.String)">
      <summary>
Does nothing. DEPRECATED.
</summary>
      <param name="moduleName" />
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.subscribeToMicroEvent(System.String,System.String,System.String,System.String)">
      <summary>
Subscribes to a microEvent. Subscribed modules are notified on theircallback method whenever the data is updated, even if the new value is the same as the old value.
</summary>
      <param name="name"> Name of the data. </param>
      <param name="callbackModule"> Name of the module to call with notifications </param>
      <param name="callbackMessage"> Message included in the notification. This can be used to disambiguate multiple subscriptions. </param>
      <param name="callbackMethod"> Name of the module's method to call when a data is changed </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.subscribeToEvent(System.String,System.String,System.String,System.String)">
      <summary>
DEPRECATED Subscribes to event and automaticaly launches the module capable of generating the event if it is not already running. Please use the version without the callbackMessage parameter.
</summary>
      <param name="name"> The name of the event to subscribe to </param>
      <param name="callbackModule"> Name of the module to call with notifications </param>
      <param name="callbackMessage"> DEPRECATED Message included in the notification. </param>
      <param name="callbacMethod"> Name of the module's method to call when a data is changed </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.subscribeToEvent(System.String,System.String,System.String)">
      <summary>
Subscribes to an event and automaticaly launches the module that declared itself as the generator of the event if required.
</summary>
      <param name="name"> The name of the event to subscribe to </param>
      <param name="callbackModule"> Name of the module to call with notifications </param>
      <param name="callbackMethod"> Name of the module's method to call when a data is changed </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.setDescription(System.String,System.String)">
      <summary>
Describe a key
</summary>
      <param name="name"> Name of the key. </param>
      <param name="description"> The description of the event (text format). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.removeMicroEvent(System.String)">
      <summary>
Removes a micro event from memory and unsubscribes any exiting subscribers.
</summary>
      <param name="name"> Name of the event to remove. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.removeData(System.String)">
      <summary>
Removes a key-value pair from memory
</summary>
      <param name="key"> Name of the data to be removed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.raiseMicroEvent(System.String,System.Object)">
      <summary>
Publishes the given data to all subscribers.
</summary>
      <param name="name"> Name of the event to raise. </param>
      <param name="value"> The data associated with the event. This could contain a basic type, or a more complex array. See the ALValue documentation for more information. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.raiseEvent(System.String,System.Object)">
      <summary>
Publishes the given data to all subscribers.
</summary>
      <param name="name"> Name of the event to raise. </param>
      <param name="value"> The data associated with the event. This could contain a basic type, or a more complex array. See the ALValue documentation for more information. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.insertListData(System.Object)">
      <summary>
Inserts a list of key-value pairs into memory.
</summary>
      <param name="list"> An ALValue list of the form [[Key, Value],...]. Each item will be inserted. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.insertData(System.String,System.Object)">
      <summary>
Inserts a key-value pair into memory, where value is an ALValue
</summary>
      <param name="key"> Name of the value to be inserted. </param>
      <param name="data"> The ALValue to be inserted. This could contain a basic type, or a more complex array. See the ALValue documentation for more information. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.insertData(System.String,System.String)">
      <summary>
Inserts a key-value pair into memory, where value is a string
</summary>
      <param name="key"> Name of the value to be inserted. </param>
      <param name="value"> The string to be inserted </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.insertData(System.String,System.Single)">
      <summary>
Inserts a key-value pair into memory, where value is a float
</summary>
      <param name="key"> Name of the value to be inserted. </param>
      <param name="value"> The float to be inserted </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.insertData(System.String,System.Int32)">
      <summary>
Inserts a key-value pair into memory, where value is an int
</summary>
      <param name="key"> Name of the value to be inserted. </param>
      <param name="value"> The int to be inserted </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.declareEvent(System.String,System.String)">
      <summary>
Declares an event to allow future subscriptions to the event
</summary>
      <param name="eventName"> The name of the event </param>
      <param name="extractorName"> The name of the extractor capable of creating the event </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.declareEvent(System.String)">
      <summary>
Declares an event to allow future subscriptions to the event
</summary>
      <param name="eventName"> The name of the event </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.PostHelper.#ctor(AL.ALMemoryProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.MemoryProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.unsubscribeToMicroEvent(System.String,System.String)">
      <summary>
Unsubscribes from the given event. No further notifications will be received.
</summary>
      <param name="name"> Name of the event. </param>
      <param name="callbackModule"> The name of the module that was given when subscribing. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.unsubscribeToEvent(System.String,System.String)">
      <summary>
Unsubscribes a module from the given event. No further notifications will be received.
</summary>
      <param name="name"> The name of the event </param>
      <param name="callbackModule"> The name of the module that was given when subscribing. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.unregisterModuleReference(System.String)">
      <summary>
Does nothing. DEPRECATED.
</summary>
      <param name="moduleName" />
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.subscribeToMicroEvent(System.String,System.String,System.String,System.String)">
      <summary>
Subscribes to a microEvent. Subscribed modules are notified on theircallback method whenever the data is updated, even if the new value is the same as the old value.
</summary>
      <param name="name"> Name of the data. </param>
      <param name="callbackModule"> Name of the module to call with notifications </param>
      <param name="callbackMessage"> Message included in the notification. This can be used to disambiguate multiple subscriptions. </param>
      <param name="callbackMethod"> Name of the module's method to call when a data is changed </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.subscribeToEvent(System.String,System.String,System.String,System.String)">
      <summary>
DEPRECATED Subscribes to event and automaticaly launches the module capable of generating the event if it is not already running. Please use the version without the callbackMessage parameter.
</summary>
      <param name="name"> The name of the event to subscribe to </param>
      <param name="callbackModule"> Name of the module to call with notifications </param>
      <param name="callbackMessage"> DEPRECATED Message included in the notification. </param>
      <param name="callbacMethod"> Name of the module's method to call when a data is changed </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.subscribeToEvent(System.String,System.String,System.String)">
      <summary>
Subscribes to an event and automaticaly launches the module that declared itself as the generator of the event if required.
</summary>
      <param name="name"> The name of the event to subscribe to </param>
      <param name="callbackModule"> Name of the module to call with notifications </param>
      <param name="callbackMethod"> Name of the module's method to call when a data is changed </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.setDescription(System.String,System.String)">
      <summary>
Describe a key
</summary>
      <param name="name"> Name of the key. </param>
      <param name="description"> The description of the event (text format). </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.removeMicroEvent(System.String)">
      <summary>
Removes a micro event from memory and unsubscribes any exiting subscribers.
</summary>
      <param name="name"> Name of the event to remove. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.removeData(System.String)">
      <summary>
Removes a key-value pair from memory
</summary>
      <param name="key"> Name of the data to be removed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.raiseMicroEvent(System.String,System.Object)">
      <summary>
Publishes the given data to all subscribers.
</summary>
      <param name="name"> Name of the event to raise. </param>
      <param name="value"> The data associated with the event. This could contain a basic type, or a more complex array. See the ALValue documentation for more information. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.raiseEvent(System.String,System.Object)">
      <summary>
Publishes the given data to all subscribers.
</summary>
      <param name="name"> Name of the event to raise. </param>
      <param name="value"> The data associated with the event. This could contain a basic type, or a more complex array. See the ALValue documentation for more information. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.insertListData(System.Object)">
      <summary>
Inserts a list of key-value pairs into memory.
</summary>
      <param name="list"> An ALValue list of the form [[Key, Value],...]. Each item will be inserted. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.insertData(System.String,System.Object)">
      <summary>
Inserts a key-value pair into memory, where value is an ALValue
</summary>
      <param name="key"> Name of the value to be inserted. </param>
      <param name="data"> The ALValue to be inserted. This could contain a basic type, or a more complex array. See the ALValue documentation for more information. </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.insertData(System.String,System.String)">
      <summary>
Inserts a key-value pair into memory, where value is a string
</summary>
      <param name="key"> Name of the value to be inserted. </param>
      <param name="value"> The string to be inserted </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.insertData(System.String,System.Single)">
      <summary>
Inserts a key-value pair into memory, where value is a float
</summary>
      <param name="key"> Name of the value to be inserted. </param>
      <param name="value"> The float to be inserted </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.insertData(System.String,System.Int32)">
      <summary>
Inserts a key-value pair into memory, where value is an int
</summary>
      <param name="key"> Name of the value to be inserted. </param>
      <param name="value"> The int to be inserted </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getType(System.String)">
      <summary>
Gets the storage class of the stored data. This is not the underlying POD type.
</summary>
      <param name="key"> Name of the variable </param>
      <returns> String type: Data, Event, MicroEvent </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getTimestamp(System.String)">
      <summary>
Get data value and timestamp
</summary>
      <param name="key"> Name of the variable </param>
      <returns> A list of all the data key names that contain the given string. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getSubscribers(System.String)">
      <summary>
Gets a list containing the names of subscribers to an event.
</summary>
      <param name="name"> Name of the event or micro-event </param>
      <returns> List of subscriber names </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getMicroEventList">
      <summary>
Gets a list containing the names of all the declared micro events
</summary>
      <returns> A list containing the names of all the microEvents </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getListData(System.Object)">
      <summary>
Gets the values associated with the given list of keys. This is more efficient than calling getData many times, especially over the network.
</summary>
      <param name="keyList"> An array containing the key names. </param>
      <returns> An array containing all the values corresponding to the given keys. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getExtractorEvent(System.String)">
      <summary>
Gets the list of all events generated by a given extractor
</summary>
      <param name="extractorName"> The name of the extractor </param>
      <returns> A list containing the names of the events associated with the given extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getEventList">
      <summary>
Gets a list containing the names of all the declared events
</summary>
      <returns> A list containing the names of all events </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getEventHistory(System.String)">
      <summary>
Get data value and timestamp
</summary>
      <param name="key"> Name of the variable </param>
      <returns> A list of all the data key names that contain the given string. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getDescriptionList(System.Collections.Generic.List`1{System.String})">
      <summary>
Descriptions of all given keys
</summary>
      <param name="keylist"> List of keys. (empty to get all descriptions) </param>
      <returns> an array of tuple (name, type, description) describing all keys. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getDataOnChange(System.String,System.Int32)">
      <summary>
DEPRECATED - Blocks the caller until the value of a key changes
</summary>
      <param name="key"> Name of the data. </param>
      <param name="deprecatedParameter"> DEPRECATED - this parameter has no effect </param>
      <returns> an array containing all the retrieved data </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getDataListName">
      <summary>
Gets the key names for all the key-value pairs in memory
</summary>
      <returns> A list containing the keys in memory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getDataList(System.String)">
      <summary>
Gets a list of all key names that contain a given string
</summary>
      <param name="filter"> A string used as the search term </param>
      <returns> A list of all the data key names that contain the given string. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getData(System.String,System.Int32)">
      <summary>
DEPRECATED - Gets the value of a key-value pair stored in memory. Please use the version of this method with no second parameter.
</summary>
      <param name="key"> Name of the value. </param>
      <param name="deprecatedParameter"> DEPRECATED - This parameter has no effect, but is left for compatibility reason. </param>
      <returns> The data as an ALValue </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getData(System.String)">
      <summary>
Gets the value of a key-value pair stored in memory
</summary>
      <param name="key"> Name of the value. </param>
      <returns> The data as an ALValue. This can often be cast transparently into the original type. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.declareEvent(System.String,System.String)">
      <summary>
Declares an event to allow future subscriptions to the event
</summary>
      <param name="eventName"> The name of the event </param>
      <param name="extractorName"> The name of the extractor capable of creating the event </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.declareEvent(System.String)">
      <summary>
Declares an event to allow future subscriptions to the event
</summary>
      <param name="eventName"> The name of the event </param>
    </member>
    <member name="M:Aldebaran.Proxies.MemoryProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Memory </summary>
      <remarks>ALMemory provides a centralized memory that can be used to store and retrieve named values. It also acts as a hub for the distribution of event notifications.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
MemoryProxy proxy = new MemoryProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.MemoryProxy">
      <summary>ALMemory provides a centralized memory that can be used to store and retrieve named values. It also acts as a hub for the distribution of event notifications.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper.setParam(System.String,System.Object)">
      <summary>
Set vision recognition parameters.
</summary>
      <param name="paramName"> Name of the parameter to be changed. Among (\"resolution\", \"scoreThreshold\") </param>
      <param name="paramValue"> Value(s) of the parameter to be changed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper.load">
      <summary>
Deprecated since 1.12
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper.#ctor(AL.ALVisionRecognitionProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.VisionRecognitionProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.setParam(System.String,System.Object)">
      <summary>
Set vision recognition parameters.
</summary>
      <param name="paramName"> Name of the parameter to be changed. Among (\"resolution\", \"scoreThreshold\") </param>
      <param name="paramValue"> Value(s) of the parameter to be changed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.load">
      <summary>
Deprecated since 1.12
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.changeDatabase(System.String,System.String)">
      <summary>
By default the database has the name \"database\" and is on the robot in /home/nao/.local/share/naoqi/vision/visionrecognition/current/ folder. This bound method allows to choose both another name and another folder for the database.
</summary>
      <param name="databasePath"> Absolute path of the database on the robot, or \"\" to set default path. </param>
      <param name="databaseName"> Name of the database (without extension), or \"\" to set default database name. </param>
      <returns />
    </member>
    <member name="M:Aldebaran.Proxies.VisionRecognitionProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to VisionRecognition </summary>
      <remarks>ALVisionRecognition is a module which detects and recognizes learned pictures, like pages of a comic books, faces of objects or even locations.

The learning stage is done using the Choregraphe interface. Follow the steps in the green doc that will explain how to create your own database.

The output value is written in ALMemory in the PictureDetected variable.

It contains an array of tags, with the following format: 

 

[ [ TimeStampField ] [ Picture_info_0 , Picture _info_1, . . . , Picture_info_N-1 ] ] 

 

with as many Picture_info tags as things currently recognized. 

Picture_info = [[labels_list], matched_keypoints, ratio, [boundary_points]] 

with labels_list = [label_0, label_1, ..., label_N-1] and label_n belongs to label_n+1 

and boundary_points = [[x0,y0], [x1,y1], ..., [xN,yN]] 

 

- Labels are the names given to the picture (e.g. \"cover/my book\", or \"fridge corner/kitchen/my flat\"). 

- matched_keypoints corresponds to the number of keypoints retrieved in the current frame. 

- ratio represents the number of keypoints found for the object in the current frame divided by the number of keypoints found during the learning stage. 

- boundary_points is a list of points coordinates in angle values representing the reprojection in the current image of the boundaries selected during the learning stage.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
VisionRecognitionProxy proxy = new VisionRecognitionProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.VisionRecognitionProxy">
      <summary>ALVisionRecognition is a module which detects and recognizes learned pictures, like pages of a comic books, faces of objects or even locations.

The learning stage is done using the Choregraphe interface. Follow the steps in the green doc that will explain how to create your own database.

The output value is written in ALMemory in the PictureDetected variable.

It contains an array of tags, with the following format: 

 

[ [ TimeStampField ] [ Picture_info_0 , Picture _info_1, . . . , Picture_info_N-1 ] ] 

 

with as many Picture_info tags as things currently recognized. 

Picture_info = [[labels_list], matched_keypoints, ratio, [boundary_points]] 

with labels_list = [label_0, label_1, ..., label_N-1] and label_n belongs to label_n+1 

and boundary_points = [[x0,y0], [x1,y1], ..., [xN,yN]] 

 

- Labels are the names given to the picture (e.g. \"cover/my book\", or \"fridge corner/kitchen/my flat\"). 

- matched_keypoints corresponds to the number of keypoints retrieved in the current frame. 

- ratio represents the number of keypoints found for the object in the current frame divided by the number of keypoints found during the learning stage. 

- boundary_points is a list of points coordinates in angle values representing the reprojection in the current image of the boundaries selected during the learning stage.</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.PostHelper.setOpeningAngle(System.Single,System.Single)">
      <summary>
Set openning angle of the laser
</summary>
      <param name="angle_min_f"> float containing the min value in rad, this value must be upper than -2.35619449 </param>
      <param name="angle_max_f"> float containing the max value in rad, this value must be lower than 2.092349795 </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.PostHelper.setDetectingLength(System.Int32,System.Int32)">
      <summary>
Set detection threshold of the laser
</summary>
      <param name="length_min_l"> int containing the min length that the laser will detect(mm), this value must be upper than 20 mm </param>
      <param name="length_max_l"> int containing the max length that the laser will detect(mm), this value must be lower than 5600 mm </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.PostHelper.laserON">
      <summary>
Enable laser light and sampling
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.PostHelper.laserOFF">
      <summary>
Disable laser light
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.PostHelper.#ctor(AL.ALLaserProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.LaserProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.setOpeningAngle(System.Single,System.Single)">
      <summary>
Set openning angle of the laser
</summary>
      <param name="angle_min_f"> float containing the min value in rad, this value must be upper than -2.35619449 </param>
      <param name="angle_max_f"> float containing the max value in rad, this value must be lower than 2.092349795 </param>
      <example>
        <code lang="python">
# Set the opening angle at -90/90 degres
laser = ALProxy("ALLaser","127.0.0.1",9559)
laser.setOpeningAngle(-1.570796327,1.570796327)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.setDetectingLength(System.Int32,System.Int32)">
      <summary>
Set detection threshold of the laser
</summary>
      <param name="length_min_l"> int containing the min length that the laser will detect(mm), this value must be upper than 20 mm </param>
      <param name="length_max_l"> int containing the max length that the laser will detect(mm), this value must be lower than 5600 mm </param>
      <example>
        <code lang="python">
# Set detection threshold at 500/3000 mm
laser = ALProxy("ALLaser","127.0.0.1",9559)
laser.setDetectingLength(500,3000)
</code>
      </example>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.laserON">
      <summary>
Enable laser light and sampling
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.laserOFF">
      <summary>
Disable laser light
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.LaserProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to Laser </summary>
      <remarks>Allow control over Hokuyo laser when available on Nao's head.</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
LaserProxy proxy = new LaserProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.LaserProxy">
      <summary>Allow control over Hokuyo laser when available on Nao's head.</summary>
    </member>
    <member name="M:Aldebaran.LanguageCompatibility.Convert.ToNativeType(System.Object)">
      <summary>Converts an Object into an AL::ALValue</summary>
      <param name="pParam">A possibly recursive Object refering to Lists or simple types</param>
      <returns>An AL::ALValue representation of the object</returns>
      <summary>Converts an Object into an AL::ALValue</summary>
      <param name="pParam">A possibly recursive Object refering to Lists or simple types</param>
      <returns>An AL::ALValue representation of the object</returns>
    </member>
    <member name="M:Aldebaran.LanguageCompatibility.Convert.ToNativeType(System.Collections.Generic.List`1{System.String})">
      <summary>Converts a generic List of Strings to an std::vector of std::strings</summary>
      <param name="pParam">A generic list of Strings</param>
      <returns>A std::vector of std::strings</returns>
      <summary>Converts a generic List of Strings to an std::vector of std::strings</summary>
      <param name="pParam">A generic list of Strings</param>
      <returns>A std::vector of std::strings</returns>
    </member>
    <member name="M:Aldebaran.LanguageCompatibility.Convert.ToNativeType(System.String)">
      <summary>Converts a String to a std::string</summary>
      <param name="pParam">A String</param>
      <returns>A std::string</returns>
      <summary>Converts a String to a std::string</summary>
      <param name="pParam">A String</param>
      <returns>A std::string</returns>
    </member>
    <member name="M:Aldebaran.LanguageCompatibility.Convert.ToNativeType(System.Collections.Generic.List`1{System.Single})">
      <summary>Converts a generic List of floats to an std::vector of floats</summary>
      <param name="pParam">A generic list of floats</param>
      <returns>A std::vector of floats</returns>
      <summary>Converts a generic List of floats to an std::vector of floats</summary>
      <param name="pParam">A generic list of floats</param>
      <returns>A std::vector of floats</returns>
    </member>
    <member name="M:Aldebaran.LanguageCompatibility.Convert.ToDotNetType(AL.ALValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
      <summary>Converts an AL::ALValue to an Object</summary>
      <param name="pParam">An AL::ALValue container</param>
      <returns>A possibly recursive Object refering to Lists or simple types</returns>
      <summary>Converts an AL::ALValue to an Object</summary>
      <param name="pParam">An AL::ALValue container</param>
      <returns>A possibly recursive Object refering to Lists or simple types</returns>
    </member>
    <member name="M:Aldebaran.LanguageCompatibility.Convert.ToDotNetType(std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;)">
      <summary>Converts an std::vector of std::strings to a generic List of Strings</summary>
      <param name="pParam">A std::vector of std::strings</param>
      <returns>A generic list of Strings</returns>
      <summary>Converts an std::vector of std::strings to a generic List of Strings</summary>
      <param name="pParam">A std::vector of std::strings</param>
      <returns>A generic list of Strings</returns>
    </member>
    <member name="M:Aldebaran.LanguageCompatibility.Convert.ToDotNetType(std.vector&lt;System.Single&gt;)">
      <summary>Converts an std::vector of floats to a generic List of floats</summary>
      <param name="pParam">An std::vector of floats</param>
      <returns>A generic list of floats</returns>
      <summary>Converts an std::vector of floats to a generic List of floats</summary>
      <param name="pParam">An std::vector of floats</param>
      <returns>A generic list of floats</returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper.setParameter(System.String,System.Object)">
      <summary>
DEPRECATED: Sets pause and resolution
</summary>
      <param name="paramName"> Name of the parameter to set </param>
      <param name="value"> New value </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper.pause(System.Boolean)">
      <summary>
Changes the pause status of the extractor
</summary>
      <param name="paused"> New pause satus </param>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper.exit">
      <summary>
Exits and unregisters the module.
</summary>
      <returns> brokerTaskID : The ID of the task assigned to it by the broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper.#ctor(AL.ALBacklightingDetectionProxyRemote*)">
      <summary>
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
      <param name="proxy">A parameter passed by the parent. You should never have to use this.</param>
    </member>
    <member name="T:Aldebaran.Proxies.BacklightingDetectionProxy.PostHelper">
      <summary>
The PostHelper object gives access to all bound methods of the module, using a thread around each call.
Long running tasks can be stopped by calling stop(id) with the id returned by the post. 
You should not need to instantiate this object, as it is available as a field of the normal proxy.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.wait(System.Int32,System.Int32)">
      <summary>
Wait for the end of a long running method that was called using 'post'
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <param name="timeoutPeriod"> The timeout period in ms. To wait indefinately, use a timeoutPeriod of zero. </param>
      <returns> True if the timeout period terminated. False if the method returned. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.version">
      <summary>
Returns the version of the module.
</summary>
      <returns> A string containing the version of the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.updatePrecision(System.String,System.Single)">
      <summary>
Updates the precision if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="precision"> Precision of the extractor. </param>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.updatePeriod(System.String,System.Int32)">
      <summary>
Updates the period if relevant.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <param name="period"> Refresh period (in milliseconds). </param>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.unsubscribe(System.String)">
      <summary>
Unsubscribes from the extractor.
</summary>
      <param name="name"> Name of the module which had subscribed. </param>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.subscribe(System.String)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.subscribe(System.String,System.Int32,System.Single)">
      <summary>
Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.
</summary>
      <param name="name"> Name of the module which subscribes. </param>
      <param name="period"> Refresh period (in milliseconds) if relevant. </param>
      <param name="precision"> Precision of the extractor if relevant. </param>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.stop(System.Int32)">
      <summary>
returns true if the method is currently running
</summary>
      <param name="id"> the ID of the method to wait for </param>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.setResolution(System.Int32)">
      <summary>
Sets extractor resolution
</summary>
      <param name="resolution"> New resolution </param>
      <returns> True if the update succeeded, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.setParameter(System.String,System.Object)">
      <summary>
DEPRECATED: Sets pause and resolution
</summary>
      <param name="paramName"> Name of the parameter to set </param>
      <param name="value"> New value </param>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.setFrameRate(System.Int32)">
      <summary>
Sets extractor framerate
</summary>
      <param name="framerate"> New framerate </param>
      <returns> True if the update succeeded, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.setActiveCamera(System.Int32)">
      <summary>
Sets extractor active camera
</summary>
      <param name="cameraId"> Id of the camera that will become the active camera </param>
      <returns> True if the update succeeded, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.ping">
      <summary>
Just a ping. Always returns true
</summary>
      <returns> returns true </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.pause(System.Boolean)">
      <summary>
Changes the pause status of the extractor
</summary>
      <param name="paused"> New pause satus </param>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.isRunning(System.Int32)">
      <summary>
Returns true if the method is currently running.
</summary>
      <param name="id"> The ID of the method that was returned when calling the method using 'post' </param>
      <returns> True if the method is currently running </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.isProcessing">
      <summary>
Gets extractor running status
</summary>
      <returns> True if the extractor is currently processing images, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.isPaused">
      <summary>
Gets extractor pause status
</summary>
      <returns> True if the extractor is paused, False if not </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getUsage(System.String)">
      <summary>
Gets the method usage string. This summarises how to use the method.
</summary>
      <param name="name"> The name of the method. </param>
      <returns> A string that summarises the usage of the method. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getSubscribersInfo">
      <summary>
Gets the parameters given by the module.
</summary>
      <returns> Array of names and parameters of all subscribers. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getResolution">
      <summary>
Gets extractor resolution
</summary>
      <returns> Current value of the resolution of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getOutputNames">
      <summary>
Get the list of values updated in ALMemory.
</summary>
      <returns> Array of values updated by this extractor in ALMemory </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getMyPrecision(System.String)">
      <summary>
Gets the precision for a specific subscription.
</summary>
      <param name="name"> name of the module which has subscribed </param>
      <returns> precision of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getMyPeriod(System.String)">
      <summary>
Gets the period for a specific subscription.
</summary>
      <param name="name"> Name of the module which has subscribed. </param>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getModuleHelp">
      <summary>
Retrieves the module's description.
</summary>
      <returns> A structure describing the module. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getMethodList">
      <summary>
Retrieves the module's method list.
</summary>
      <returns> An array of method names. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getMethodHelp(System.String)">
      <summary>
Retrieves a method's description.
</summary>
      <param name="methodName"> The name of the method. </param>
      <returns> A structure containing the method's description. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getFrameRate">
      <summary>
Gets extractor framerate
</summary>
      <returns> Current value of the framerate of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getCurrentPrecision">
      <summary>
Gets the current precision.
</summary>
      <returns> Precision of the extractor. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getCurrentPeriod">
      <summary>
Gets the current period.
</summary>
      <returns> Refresh period (in milliseconds). </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getBrokerName">
      <summary>
Gets the name of the parent broker.
</summary>
      <returns> The name of the parent broker. </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.getActiveCamera">
      <summary>
Gets extractor active camera
</summary>
      <returns> Id of the current active camera of the extractor </returns>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.exit">
      <summary>
Exits and unregisters the module.
</summary>
    </member>
    <member name="M:Aldebaran.Proxies.BacklightingDetectionProxy.#ctor(System.String,System.Int32)">
      <summary> Creates a proxy to BacklightingDetection </summary>
      <remarks>This module enables to check if the image of the camera is backlit</remarks>
      <param name="pIP"> The IP address used for the connection</param>
      <param name="pPort"> The port used for the connection </param>
      <example>
        <code lang="cs">
using Aldebaran.Proxies;

string ip = "127.0.0.1";
BacklightingDetectionProxy proxy = new BacklightingDetectionProxy(ip, 9559);
</code>
      </example>
    </member>
    <member name="T:Aldebaran.Proxies.BacklightingDetectionProxy">
      <summary>This module enables to check if the image of the camera is backlit</summary>
    </member>
  </members>
</doc>